### =============== _LEGEND ===============
    FORMAT:
        Command, Str|Num|Value|Subcommand, [OptionalParams, Select|One|Of|These]
        Function(Param1, [Param2:=DefaultValue])
        A_BuiltInVariable
    
    NOTES: Item refers to any command, built-in function/variable, or keyword.
        Items separated by pipes mean choose|only|one.
        Items inside brackets are considered [optional|not optional].
        BLANK means empty string. Same as: var := ""
    
    The following TAGS are listed in the order they appear on a card.
    TAGS:
        USE: What the item does and how it's used.
        SUBCOMMAND: List of subcommands for the current command.
            Most subcommands have their own card and own options.
        STR|NUM|VALUE: Input/output for that command.
            STR: A variable, character, or string of characters.
            NUM: A variable or number. Num1 .. Num2 means inclusive range.
            VALUE: VALUE or another identifier like STATE, MODE, TYPE, etc
                Describe expected field. Can include lists like ON|OFF|TOGGLE
        DEPRECATED: A command is phased out and should no longer be used.
            Deprecated tags always come with a replacement tag.
        REPLACEMENT: Replacement commands/functions for deprecated items.
            REPLACEMENT: Use SubStr() instead.
        RETURN: Type.  Possible values. Optional value meanings.
            RETURN: String|Number|Mix. On|Off|Toggle. -1 .. N
                -1 = Disabled. 0 = Off. 1 = On.
        ErrorLevel+EXO: ErrorLevel values. EX: 0 = Failure. 1 = Success.
            +EO = On failure, this command can throw an Exception Object.
        REMARK: Additional or beneficial information or suggestions about an item.
            REMARK: Omitting WinTitle will default to LastFoundWindow.
        CHEAT: This item has additional data/info on a Cheat_ card.
            These are used for quick referencing useful charts, data tables, lists
            and other various forms of information.
        EX: Small example of the item in use. Most items have these.
            Can usually be used with a message box.
            Also shows return values/gives extra info
            R/V=> Return/value of command/function.
            EX: arr =: [1, 2, 3]
                Arr.RemoveAt(2) ; R=> 2   ; V=> [1, 3]



### =============== DIRECTIVES ===============

#AllowSameLineComments [DEPRECATED!] 
DEPRECATED: This directive was removed. AutoIt scripts are no longer supported.

#ClipboardTimeout Num 
USE: Amount of time to wait for clipboard access after first attempt fails.
NUM: -1 = Try indefinitely    0  = Try once
      N = Time in ms to wait
EX: #ClipboardTimeout 50

#CommentFlag Str [DEPRECATED!] 
DEPRECATED: This directive is not recommended for use in 
    new scripts because it does more harm than good.
REMARK: Removed in v2.

#Delimiter Str [DEPRECATED!] 
DEPRECATED: This directive is not recommended for use in 
    new scripts because it does more harm than good.
REMARK: Removed in v2.

#DerefChar Str [DEPRECATED!] 
DEPRECATED: This directive is not recommended for use in 
    new scripts because it does more harm than good.
REMARK: Removed in v2.

#ErrorStdOut 
USE: Syntax errors that prevent a script from launching are sent to StdErr
    rather than displaying a dialog.

#EscapeChar Str [DEPRECATED!] 
DEPRECATED: This directive is not recommended for use in 
    new scripts because it does more harm than good.
REMARK: Removed in v2.

#HotkeyInterval Num 
USE: Used to detect hotkey spam and generate a warning dialog.
NUM: Time in ms. Default = 2000.
REMARK: This setting provides the "Interval" for #MaxHotkeysPerInterval.
EX: #HotkeyInterval 1500

#HotkeyModifierTimeout Num 
USE: Affects behavior of the Ctrl | Alt | Shift | Win modifiers.
NUM: -1 .. N
    -1 = Try indefinitely    0  = Try once
     N = Any time in ms to wait
EX: #HotkeyModifierTimeout 50

#Hotstring NoMouse | EndChars Str | Options 
USE: Sets default options | end characters for all following hotstrings.
NOMOUSE: Mouse clicks do not reset the hotstring recognizer.
ENDCHARS: Characters in Str will activate end of hotstring.
OPTIONS: Set the default options of future hotstrings. Space separated.
    * = Fires on match      ? = Each keystroke starts a new hotkey check
    C = Case sensitive      B = Backspaces hotstring text before sending
    R = Use {Raw} Send      O = End character is not sent
    T = Use {Text} Send     C1 = Hotstring does not conform to typed case
    Pn = Priority P1 to P5  SI|SP|SE = Send method Input | Play | Event
    Kn = N key delay|N key duration in ms for SE|SP
    X = Inline hotstring will treat text after it as a command
    Z = Reset hotstring recognizer after a hotstring fires
    Add a 0 to the end of an option (except Kn|Pn|X) to disable it.
REMARK: Hotstring() can be used instead of these directives.
EX: #Hotstring Options * ? O R

#If [Expression] 
USE: Creates context-sensitive hotkeys and hotstrings based on an expression.
REMARK: A blank #If sets hotkeys back to global mode.
EX: #If GetKeyState("CapsLock", "P")

#IfTimeout Num 
USE: Set the maximum time an #If directive can evaluate an expression.
NUM: Time in ms.
EX: #IfTimeout 100

#IfWinActive [WinTitle, WinText] 
USE: Hotkeys following this only work if the active window matches.
WINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A
REMARK: #If WinActive() is more flexible. WinTitle A = Use active window.
EX: #IfWinActive, ahk_exe notepad.exe

#IfWinExist [WinTitle, WinText] 
USE: Hotkeys following this only work if a window exists that matches.
WINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A
REMARK: #If WinExist() is more flexible. WinTitle A = Use active window.
EX: #IfWinExist, ahk_exe calc.exe

#IfWinNotActive [WinTitle, WinText] 
USE: Hotkeys following this only work if the active window does not match.
WINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A
REMARK: #If !WinActive() is more flexible. WinTitle A = Use active window.
EX: #IfWinNotActive, ahk_exe notepad.exe

#IfWinNotExist [WinTitle, WinText] 
USE: Hotkeys following this only work if the no existing window matches.
WINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A
REMARK: #If !WinExist() is more flexible. WinTitle A = Use active window.
EX: #IfWinNotExist, ahk_exe calc.exe

#Include Path 
USE: Import a file or set working directory for #Include/FileInstall
PATH: Path\File.ahk = Import AHK file    LibraryName = A library file/function.
      Directory = Changes working dir for #Include/#IncludeAgain/FileInstall. 
REMARK: Path cannot contain double quotes, wildcards, or non-built-in variables.

#IncludeAgain Path 
USE: Import a file or set working directory for #Include/FileInstall
PATH: Path\File.ahk = Import AHK file    LibraryName = A library file/function.
      Directory = Changes working dir for #Include/#IncludeAgain/FileInstall. 
REMARK: Path cannot contain double quotes, wildcards, or non-built-in variables.
        #IncludeAgain, unlike #Include, allows multiple loads of the same file.

#InputLevel [Num] 
USE: Set artificial keyboard and mouse event interrupt levels.
NUM: 0 .. 100
REMARK: Omitting a number = 0. See SendLevel docs for more info.
EX: #InputLevel 5

#InstallKeybdHook 
USE: Forces the unconditional installation of the keyboard hook.

#InstallMouseHook 
USE: Forces the unconditional installation of the mouse hook.

#KeyHistory Num 
USE: Set maximum number of keyboard & mouse events in KeyHistory window.
NUM: 0 .. 500
    0 = Disable all key history    40  = Default    500 = Max

#LTrim [OFF] 
USE: Trims tabs and spaces from the beginning and end of traditional strings.
    Primarily used to allow continuation sections to be indented.
OFF: Disables LTrim. Leaving this blank enables LTrim.
EX: #LTrim Off

#MaxHotkeysPerInterval Num 
USE: Send a warning if more than Num hotkeys are sent within #HotkeyInterval's time.
NUM: Hotkey limit per interval.
REMARK: The interval time is set by #HotkeyInterval
EX: #MaxHotkeysPerInterval 70

#MaxMem Num 
USE: Sets the maximum capacity of each variable to Num in megabytes.
NUM: 1 .. 4095 in megabytes
    Numbers under 1 default to 1 and over 4095 default to 4095.
EX: #MaxMem 2048

#MaxThreads Num 
USE: Sets the maximum number of simultaneous threads.
NUM: Between 1 and 255. A number over 255 defaults to 255.
EX: #MaxThreads Num 

#MaxThreadsBuffer Value 
USE: When the #MaxThreadsPerHotkey limit is reached, allow hotkey buffering.
VALUE: On = Hotkeys are buffered    Off = Hotkeys are ignored
EX: #MaxThreadsBuffer Off

#MaxThreadsPerHotkey Num 
USE: Set the maximum number of simultaneous threads per hotkey | hotstring.
NUM: 1 .. 255
EX: #MaxThreadsPerHotkey 100

#MenuMaskKey Str 
USE: Change which key is used to mask Win or Alt key-up events.
STR: A key name, virtual key, or scan code.
REMARK: vk07 and vkFF are good candidates as they do nothing.
EX: #MenuMaskKey vkFF

#NoEnv 
USE: Avoids checking empty variables to see if they are environment variables.
REMARK: Increases performance. Recommended for new scripts. This is a default in v2.

#NoTrayIcon 
USE: Disables showing of the tray icon.
REMARK: Re-enable tray icon with the command:
    Menu, Tray, Icon

#Persistent 
USE: Keeps a script running until ExitApp is reached.
REMARK: This is inferred if the script contains any of the following:
    Hotkey    Hotstring    OnMessage()    GUI

#SingleInstance Value 
USE: Controls whether multiple instances of a script can run simultaneously.
VALUE: Off = Default. Allows multiple instances of a script to run
    Force  = Force closes old script and opens a new instance
    Ignore = Script will not launch if an instance of it is running
EX: #SingleInstance Force

#UseHook Value 
USE: Forces the use of the hook to implement all | some keyboard hotkeys.
VALUE: On = Force hook use    Off = Hook is not used
EX: #UseHook On

#Warn [Type, Mode] 
USE: Control if warnings are shown for specific errors.
TYPE: If left BLANK, it defaults to All.
    UseUnsetLocal = Warn if a local variable is read before being declared
    UseUnsetGlobal = Warn if a global variable is read before being declared
    UseEnv = Warn if a blank variable inherits an environmental var
    LocalSameAsGlobal = Warn if a global & local variable share a name
    ClassOverwrite = Warn if a variable replaces a class
    All = Include all warnings
MODE: Warning notification method. BLANK uses MsgBox.
    MsgBox = Warning is sent to a message box.
    StdOut = Warning, filename and line number are sent to StdOut.
    OutputDebug = Warning is sent to the debugger for display.
    Off = Disable warnings of the given Type.
EX: #Warn All MsgBox

#WinActivateForce 
USE: Window activation uses a more forceful method.
REMARK: Affects: WinActivate|WinActivateBottom|GroupActivate


### =============== BUILT_IN_VARIABLES ===============

A_AhkPath 
USE: Contains the path and name of the exe running the current script.
RETURN: String. Format: Path
    Uncompiled = Path is from the current running process.
    Compiled = Path is from registry key: HKLM\SOFTWARE\AutoHotkey\InstallDir
REMARK: If script is compiled and registry key does not exist, variable is BLANK.
EX: MsgBox, % A_AhkPath ; D=> C:\Program Files\AutoHotkey\AutoHotkey.exe

A_AhkVersion 
USE: Contains version number of the current running script's AHK interpreter.
RETURN: Number. Format: 0.0.0.0
REMARK: Before v1.0.22.0, this variable is BLANK
EX: MsgBox, % A_AhkVersion         ; V=> 1.30.0.1

A_AppData 
USE: Contains full path and name of the user's AppData folder.
RETURN: String. Format: Path
EX: MsgBox, % A_AppData ; V=> C:\Users\GroggyOtter\AppData\Roaming

A_AppDataCommon 
USE: Contains full path and name of the common AppData folder.
RETURN: String. Format: Path
EX: MsgBox, % A_AppData ; V=> C:\ProgramData

A_Args 
USE: Contains an array of parameters (if any) passed to the script at launch.
RETURN: Object. Numbered array.
REMARK: Use a for-loop to easily enumerate the array.
EX: for key, data in A_Args
        MsgBox, % "key: " key "`ndata: " data

A_AutoTrim 
USE: Contains the current setting for AutoTrim.
RETURN: String. On|Off
EX: MsgBox, % A_AutoTrim ; V=> On

A_BatchLines 
USE: Contains the Lines|Time for SetBatchLines.
RETURN: String if time. Number of lines.
REMARK: If variable ends in ms, it's time. Otherwise, it's Lines.
    Synonymous with A_NumBatchLines.
EX: MsgBox, % A_BatchLines ; V=> 10ms

A_CaretX 
USE: Contains the current X coord of the caret.
RETURN: Number. BLANK if no active window.
REMARK: Coordinate is based on A_CoordModeCaret.
EX: MsgBox, % A_CaretX ; V=> 100

A_CaretY 
USE: Contains the current Y coord of the caret.
RETURN: Number. BLANK if no active window.
REMARK: Coordinate is based on A_CoordModeCaret.
EX: MsgBox, % A_CaretY ; V=> 100

A_ComputerName 
USE: This computer's name as seen on the network.
RETURN: String.
EX: MsgBox, % A_ComputerName ; V=> SYNACKPC

A_ComSpec 
USE: Contains the path to the system's Command Prompt.
RETURN: String. Format: Path
REMARK: Synonymous with the variable ComSpec
EX: MsgBox, % A_ComSpec ; V=> C:\Windows\system32\cmd.exe

A_ControlDelay 
USE: Contains the current delay setting for SetControlDelay.
RETURN: Number. -1 .. N. In ms. 
EX: MsgBox, % A_ControlDelay ; V=> 20

A_CoordModeCaret 
USE: Contains the current CoordMode setting for caret.
RETURN: String. Screen|Window|Client
EX: MsgBox, % A_CoordModeCaret ; V=> Screen

A_CoordModeMenu 
USE: Contains the current CoordMode setting for menu.
RETURN: String. Screen|Window|Client
EX: MsgBox, % A_CoordModeMenu ; V=> Screen

A_CoordModeMouse 
USE: Contains the current CoordMode setting for mouse.
RETURN: String. Screen|Window|Client
EX: MsgBox, % A_CoordModeMouse ; V=> Screen

A_CoordModePixel 
USE: Contains the current CoordMode setting for pixel.
RETURN: String. Screen|Window|Client
EX: MsgBox, % A_CoordModePixel ; V=> Screen

A_CoordModeToolTip 
USE: Contains the current CoordMode setting for ToolTip.
RETURN: String. Screen|Window|Client
EX: MsgBox, % A_CoordModeToolTip ; V=> Screen

A_Cursor 
USE: Contains the current type of mouse cursor being displayed.
RETURN: String. Note: NWSE = NorthWest to SouthEast.
    No      Icon     SizeWE     UpArrow
    Wait    Cross    SizeNS     SizeNWSE
    Size    IBeam    Unknown    SizeNESW
    Help    Arrow    SizeAll    AppStarting
REMARK: Hand-shaped pointing & grabbing cursors are classified as Unknown.
EX: MsgBox, % A_Cursor ; V=> IBeam

A_DD 
USE: Contains the current 2-digit day.
RETURN: Number. 01 .. 31
REMARK: Synonymous with A_MDay.
EX: MsgBox, % A_DD ; V=> 05

A_DDD 
USE: Contains the abbreviated day of the week.
RETURN: String. Sun|Mon|Tue|Wed|Thu|Fri|Sat
EX: MsgBox, % A_DDD ; V=> Sun

A_DDDD 
USE: Contains the current day of the week.
RETURN: String. Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday
EX: MsgBox, % A_DDDD ; V=> Sunday

A_DefaultGui 
USE: Contains the name|number of the current thread's default GUI.
RETURN: String.
EX: MsgBox, % A_DefaultGui ; V=> MyGui

A_DefaultListView 
USE: Contains the variable name or HWND of the current default ListView control. 
RETURN: String.
REMARK: If the default GUI lacks a ListView, this variable is BLANK.
EX: MsgBox, % A_DefaultListView ; V=> 0x152014e

A_DefaultMouseSpeed 
USE: Contains the current speed for SetDefaultMouseSpeed.
RETURN: Number. 0 .. 100. Default is 2.
REMARK: This number is always decimal.
EX: MsgBox, % A_DefaultMouseSpeed ; V=> 2

A_DefaultTreeView 
USE: Contains the variable name or HWND of the current default TreeView control. 
RETURN: String.
REMARK: If the default GUI lacks a TreeView, this variable is BLANK.
EX: MsgBox, % A_DefaultTreeView ; V=> 0x152014e

A_Desktop 
USE: Contains the full path to user's desktop folder.
RETURN: String. Format: Path
EX: MsgBox, % A_Desktop ; V=> C:\Users\GroggyOtter\Desktop

A_DesktopCommon 
USE: Contains the full path to the common desktop folder.
RETURN: String. Format: Path
EX: MsgBox, % A_DesktopCommon ; V=> C:\Users\Public\Desktop

A_DetectHiddenText 
USE: Contains the current setting for DetectHiddenText.
RETURN: String. On|Off
EX: MsgBox, % A_DetectHiddenText ; V=> On

A_DetectHiddenWindows 
USE: Contains the current setting for DetectHiddenWindows.
RETURN: String. On|Off
EX: MsgBox, % A_DetectHiddenWindows ; V=> Off

A_EndChar 
USE: Contains the trigger character for the most recent hotstring.
RETURN: String. BLANK if * (wildcard) option is in use.
EX: MsgBox, % A_EndChar ; V=> -()[]{}':;"/\,.?!`n `t

A_EventInfo 
USE: Contains additional information about different events.
RETURN: Event info can contain the following
    OnClipboardChange label: Deprecated. Use: OnClipboardChange()
    MouseWheel Down|Up|Left|Right Hotkeys: Wheel click amount
    OnMessage(): 0 = SemdMessage else Number = PostMessage tick count
    RegisterCallback(): Identifying Integer
    RegEx Callouts: pcre_callout_block information
    GUI Events: Message varies between events. 0 for no information.
        Used By: GuiContextMenu GuiDropFiles ListBox ListView TreeView StatusBar
REMARK: Contains a 0 by default.

A_ExitReason [DEPRECATED!] 
DEPRECATED: The OnExit: label is not recommended for use in new scripts.
REPLACEMENT: Use OnExit() function.
USE: Contains the most recent script termination reason.
    BLANK|Logoff|Shutdown|Close|Error|Menu|Exit|Reload|Single

A_FileEncoding 
USE: Contains the default encoding for:
    FileRead, FileReadLine, Loop-Read, FileAppend and FileOpen
RETURN: String. UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn
EX: MsgBox, % A_FileEncoding ; V=> UTF-8

A_Gui 
USE: Contains the name|number of the GUI that launched the current thread. 
RETURN: String|Number. Blank if not launched by GUI control|event|menu bar.
EX: MsgBox, % A_Gui ; V=> MyGui

A_GuiControl 
USE: Contains info about the GUI control that launched the current thread.
RETURN: String. Returns variable name or, if no name, the control text
REMARK: BLANK if: 
    A_Gui is BLANK              Thread launched by menu bar/Gui event
    Control no longer exists    Control has no variable or text
EX: MsgBox % A_GuiControl ; V=> GuiBtnName

A_GuiControlEvent 
USE: Contains the type of GUI event that launched the current thread.
RETURN: String. Normal|DoubleClick|RightClick|Context-sensitive|BLANK
REMARK: Synonymous with  A_GuiEvent
EX: MsgBox % A_GuiControlEvent ; V=> Normal

A_GuiEvent 
USE: Contains the type of GUI event that launched the current thread.
RETURN: String. Normal|DoubleClick|RightClick|Context-sensitive|BLANK
REMARK: Synonymous with  A_GuiControlEvent
EX: MsgBox % A_GuiEvent ; V=> Normal

A_GuiHeight 
USE: Contains the height of a GUI. Only active inside a GuiSize subroutine.
RETURN: Number. 0 .. N
REMARK: Height is client size. Use WinGetPos for window height.
    Consider using the GuiSize() function instead of a GuiSize: label.
EX: GuiSize:
        MsgBox % A_GuiHeight ; V=> 100

A_GuiWidth 
USE: Contains the width of a GUI. Only active inside a GuiSize subroutine.
RETURN: Number. 0 .. N
REMARK: Width is client size. Use WinGetPos for window width.
    Consider using the GuiSize() function instead of a GuiSize: label.
EX: GuiSize:
        MsgBox % A_GuiWidth ; V=> 100

A_GuiX 
USE: Contains X coordinates for GuiContextMenu: and GuiDropFiles: labels.
RETURN: Number.
REMARK: Coordinates are relative to the upper-left corner of the window.
    Consider using the GuiSize() function instead of a GuiSize: label.
EX: GuiContextMenu:
        MsgBox % A_GuiX ; V=> 15

A_GuiY 
USE: Contains Y coordinates for GuiContextMenu: and GuiDropFiles: labels.
RETURN: Number.
REMARK: Coordinates are relative to the upper-left corner of the window.
    Consider using the GuiSize() function instead of a GuiSize: label.
EX: GuiContextMenu:
        MsgBox % A_GuiY ; V=> 15

A_Hour 
USE: Current 2-digit hour in 24-hour format.
RETURN: Number. 00 .. 23
REMARK: For a 12 hour AM|PM variant, use this expression:
    (A_Hour>12?A_Hour-12 " PM":A_Hour " AM")
EX: MsgBox, % A_Hour ; V=> 09

A_IconFile 
USE: Contains the path to the current custom tray icon file.
RETURN: String. Format: Path
REMARK: Variable is BLANK if no custom tray icon is set.
Ex: MsgBox, % A_IconFile ; V=> D:\Scripts\otter.ico

A_IconHidden 
USE: Contains the visibility state for the current scripts tray icon.
RETURN: Number. 1 = Hidden. 0 = Visible.
REMARK: Tray icon can be hidden via #NoTrayIcon or the Menu command.
Ex: MsgBox, % A_IconHidden ; V=> 0

A_IconNumber 
USE: Contains the icon number being used by A_IconFile. Typically 1.
RETURN: Number.
REMARK: If A_IconFile is BLANK, this variable is BLANK.
Ex: MsgBox, % A_IconNumber ; V=> 1

A_IconTip 
USE: Contains the text of the current custom tray's tooltip text.
RETURN: String.
REMARK: If no custom tooltip is set, this variable is BLANK.
Ex: MsgBox, % A_IconTip ; V=> My SciTE AHK Script

A_Index 
USE: Contains a variable that tells you the current running loop's iteration.
RETURN: Number. 1 .. N
REMARK: To track previous indexes, store them to a variable.
EX: Loop, 3
        index1 := A_Index ; Saves this loop's current index

A_IPAddress1 
USE: Contains IP Address of 1st network adapter.
RETURN: Number. Format: 0.0.0.0
EX: MsgBox, % A_IPAddress1 ; R=> 192.168.0.0

A_IPAddress2 
USE: Contains IP Address of 2nd network adapter.
RETURN: Number. Format: 0.0.0.0
EX: MsgBox, % A_IPAddress2 ; R=> 169.254.0.0

A_IPAddress3 
USE: Contains IP Address of 3rd network adapter.
RETURN: Number. Format: 0.0.0.0
EX: MsgBox, % A_IPAddress3 ; R=> 198.18.0.0

A_IPAddress4 
USE: Contains IP Address of 4th network adapter.
RETURN: Number. Format: Format: 0.0.0.0
EX: MsgBox, % A_IPAddress4 ; R=> 127.0.0.0

A_Is64bitOS 
USE: Contains number indicating 32 or 64 bit system architecture.
RETURN: Number. 1 = 64 bit    0 = 32 bit
EX: MsgBox, % A_Is64bitOS ; R=> 1

A_IsAdmin 
USE: Contains privilege level for user.
RETURN: Number. 1 = Admin rights    0 = No admin rights
EX: MsgBox, % A_IsAdmin ; R=> 1

A_IsCompiled 
USE: Contains variable indicating if script is running as an exe.
RETURN: Number. 1 = Compiled EXE    BLANK = Uncompiled script
EX: MsgBox, % A_IsCompiled ; R=> 1

A_IsCritical 
USE: Contains frequency Time that critical checks the message queue.
RETURN: Number. 0 .. N. In ms. Default is 0.
    0 = Critical off    N = Frequency that queue is checked.
EX: MsgBox, % A_IsCritical ; R=> 16

A_IsPaused 
USE: Contains pause state of thread immediately underneath the current one.
RETURN: Number. 1 = Paused    0 = Not paused
EX: MsgBox, % A_IsPaused ; R=> 0

A_IsSuspended 
USE: Contains suspend status of the current script.
RETURN: Number. 1 = Suspended    0 = Not suspended
EX: MsgBox, % A_IsSuspended ; R=> 0

A_IsUnicode 
USE: Contains current string type.
RETURN: Number. 1 = Unicode    BLANK = ANSI
REMARK: .ahk = Is set by AutoHotkey.exe
        .exe = Is set by the bin file used to compile it
EX: MsgBox, % A_IsUnicode ; R=> 1

A_KeyDelay 
USE: Contains the current delay setting for SetKeyDelay.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_KeyDelay ; R=> -1

A_KeyDelayPlay 
USE: Contains the current delay setting for SetKeyDelay's Play mode.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_KeyDelayPlay ; R=> -1

A_KeyDuration 
USE: Contains the current duration setting for SetKeyDelay.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_KeyDuration ; R=> -1

A_KeyDurationPlay 
USE: Contains the current duration setting for SetKeyDelay's Play mode.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_KeyDurationPlay ; R=> -1

A_Language 
USE: Contains the system's current language.
RETURN: Number. 0000 .. 9999
CHEAT: See Cheat_Language_Codes
EX: MsgBox, % A_Language ; R=> 0409

A_LastError 
USE: Contains result of the operating system's last GetLastError().
RETURN: Number. 1 .. 4294967295.
    0 = Success    >1 = Failure.
REMARK: Can also be the last COM object invocation. Docs have more info.
EX: MsgBox, % A_LastError ; R=> 0

A_LineFile 
USE: Contains the path and file name of the current executing line.
RETURN: String. Format: Path
REMARK: Use with A_LineNumber to help troubleshoot #Include files.
EX: MsgBox, % A_LineFile ; R=> D:\Scripts\SciTE_GOTestInclude.ahk

A_LineNumber 
USE: Contains the line number of the current executing line.
RETURN: Number. 1 .. N
REMARK: Line number can vary in compiled files with #Include files.
EX: MsgBox, % A_LineNumber ; R=> 42

A_ListLines 
USE: Contains the current state of ListLines.
RETURN: Number. 1 = Enabled    0 = Disabled
EX: MsgBox, % A_ListLines ; R=> 0

A_LoopField 
USE: Contains the data from the parse loop's current item.
RETURN: String.
EX: Loop, Parse, % "ABC"      ; Parse through each letter
        MsgBox, % A_LoopField ; Show letters one at a time

A_LoopFileAttrib 
USE: Used by Loop-Files. Contains the attributes of the current item.
RETURN: String. D|O|N|T|C|R|A|S|H|X|BLANK
    D = Directory     O = Offline     N = Normal     T = Temporary
    C = Compressed    R = ReadOnly    A = Archive    S = System
    H = Hidden        X = No Attr     BLANK = No file found
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileAttrib in use
        MsgBox, % "Name:`t" A_LoopFileName "`nAttr:`t" A_LoopFileAttrib

A_LoopFileDir 
USE: Used by Loop-Files. Contains the directory of the current item.
RETURN: String. Format: Path
REMARK: If a relative path is used, this path will also be relative.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileDir in use
        MsgBox, % "File name & dir`n" A_LoopFileDir "\" A_LoopFileName

A_LoopFileExt 
USE: Used by Loop-Files. Contains the extension of the current item.
RETURN: String. ahk|exe|txt|doc|ini|etc...
REMARK: Extension's dot is not included.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileExt in use
        MsgBox, % "Name: " A_LoopFileName "`nExt:`t" A_LoopFileExt

A_LoopFileFullPath 
USE: Used by Loop-Files. Contains the full path of the current item.
RETURN: String. Format: Path
REMARK: If the loop uses a relative path is used, this path will be relative.
    Consider using A_LoopFilePath. Same variable but more accurately named.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileFullPath in use
        MsgBox, % "File full path: " A_LoopFileFullPath

A_LoopFileLongPath 
USE: Used by Loop-Files. Contains the absolute path of the current item.
RETURN: String. Format: Path
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileLongPath in use
        MsgBox, % "File long path: " A_LoopFileLongPath

A_LoopFileName 
USE: Used by Loop-Files. Contains the name of the current item.
RETURN: String.
REMARK: Extensions are included.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileName in use
        MsgBox, % "File name: " A_LoopFileName

A_LoopFilePath 
USE: Used by Loop-Files. Contains the path of the current item.
RETURN: String. Format: Path
REMARK: If the files loop uses a relative path, this variable will be relative.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFilePath in use
        MsgBox, % "File path: " A_LoopFilePath

A_LoopFileShortName 
USE: Used by Loop-Files. Contains the short file name of the current item.
RETURN: String. Format: 8.3
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileShortName in use
        MsgBox, % "Short file name: " A_LoopFileShortName

A_LoopFileShortPath 
USE: Used by Loop-Files. Contains the short folder path of the current item.
RETURN: String. Path. Format: 8.3
REMARK: If the files loop uses a relative path, this variable will be relative.
EX: Loop, Files, % A_ProgramFiles "\*.*" ; Show A_LoopFileShortPath in use
        MsgBox, % "Short file path: " A_LoopFileShortPath

A_LoopFileSize 
USE: Used by Loop-Files. Contains the file size of the current item.
RETURN: Number. In bytes.
REMARK: Files larger than 4 gigabytes are supported.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileSize in use
        MsgBox, % "File: " A_LoopFileName " is " A_LoopFileSizeKB " bytes."

A_LoopFileSizeKB 
USE: Used by Loop-Files. Contains the file size of the current item.
RETURN: Number. In kilobytes.
REMARK: Files larger than 4 gigabytes are supported.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileSizeKB in use
        MsgBox, % "File: " A_LoopFileName " is " A_LoopFileSizeKB " KB."

A_LoopFileSizeMB 
USE: Used by Loop-Files. Contains the file size of the current item.
RETURN: Number. In megabytes.
REMARK: Files larger than 4 gigabytes are supported.
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileSizeMB in use
        MsgBox, % "File: " A_LoopFileName " is " A_LoopFileSizeMB " MB."

A_LoopFileTimeAccessed 
USE: Used by Loop-Files. Contains the last access time of the current item.
RETURN: Number. Format: YYYYMMDDHH24MISS
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileTimeAccessed in use
        MsgBox, % A_LoopFileName "`nLast Accessed: " A_LoopFileTimeAccessed

A_LoopFileTimeCreated 
USE: Used by Loop-Files. Contains the creation time of the current item.
RETURN: Number. Format: YYYYMMDDHH24MISS
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileTimeCreated in use
        MsgBox, % A_LoopFileName "`nLast Accessed: " A_LoopFileTimeCreated

A_LoopFileTimeModified 
USE: Used by Loop-Files. Contains the last modified time of the current item.
RETURN: Number. Format: YYYYMMDDHH24MISS
EX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileTimeModified in use
        MsgBox, % A_LoopFileName "`nLast Accessed: " A_LoopFileTimeModified

A_LoopReadLine 
USE: Used by Loop-Read. Contains the data of the current line iteration.
RETURN: String.
EX: Loop, Read, % A_ScriptFullPath ; Displays each line of the
        MsgBox, % A_LoopReadLine   ; current running script

A_LoopRegKey 
USE: Used by Loop-Reg. Contains the root key of the current registry item.
RETURN: String.
    HKEY_CLASSES_ROOT    HKEY_CURRENT_CONFIG    HKEY_LOCAL_MACHINE
    HKEY_USERS           HKEY_CURRENT_USER
REMARK: For remote registry access, the computer name is not returned.
EX: Loop, Reg, HKLM, KR ; Loop through HKLM
        MsgBox, % "Key Name:`t" A_LoopRegName "`nRoot Key:`t" A_LoopRegKey

A_LoopRegName 
USE: Used by Loop-Reg. Contains the name of the current registry item.
RETURN: String.
REMARK: This can be a value or a key.
EX: Loop, Reg, HKLM, KR ; Loop through HKLM
        MsgBox, % "Key Name:`t" A_LoopRegName

A_LoopRegSubKey 
USE: Used by Loop-Reg. Contains the subkey of the current registry item.
RETURN: String.
REMARK: If recurse is being used return the full path except the root key.
EX: Loop, Reg, HKLM, VKR ; Loop through HKLM
        MsgBox, % "Current Subkey:`t" A_LoopRegSubKey

A_LoopRegTimeModified 
USE: Used by Loop-Reg. Contains last modification time of the current registry item.
RETURN: Number. Format YYYYMMDDHH24MISS.
EX: Loop, Reg, HKLM, VKR ; Loop through HKLM
        MsgBox, % "File:`t " A_LoopRegName "`nModified:`t" A_LoopRegTimeModified

A_LoopRegType 
USE: Used by Loop-Reg. Contains the type of the current registry item.
RETURN: String.
    REG_SZ       REG_MULTI_SZ         REG_EXPAND_SZ
    REG_LINK     REG_RESOURCE_LIST    REG_DWORD_BIG_ENDIAN
    REG_DWORD    REG_QWORD            REG_BINARY
    REG_FULL_RESOURCE_DESCRIPTOR      REG_RESOURCE_REQUIREMENTS_LIST
REMARK: This variable is BLANK if the retrieved type is unknown.
EX: Loop, Reg, HKLM, VKR ; Loop through HKLM
        MsgBox, % "File:`t " A_LoopRegName "`nType:`t" A_LoopRegType

A_MDay 
USE: Contains the current 2-digit day.
RETURN: Number. 01 .. 31
REMARK: Synonymous with A_DD.
EX: MsgBox, % A_MDay ; V=> 03

A_Min 
USE: Contains the current 2-digit minute.
RETURN: Number. 00 .. 59
EX: MsgBox, % A_Min ; V=> 08

A_MM 
USE: Contains the current 2-digit month.
RETURN: Number. 01 .. 12
REMARK: Synonymous with A_Mon.
EX: MsgBox, % A_MM ; V=> 01

A_MMM 
USE: Contains the current abbreviated month.
RETURN: String. Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec
REMARK: Based on locale.
EX: MsgBox, % A_MMM ; V=> Dec

A_MMMM 
USE: Contains the current month.
RETURN: String.
    January|February|March|April|May|June|July|
    August|September|October|November|December
REMARK: Based on locale.
EX: MsgBox, % A_MMMM ; V=> October

A_Mon 
USE: Contains the current 2-digit month.
RETURN: Number. 01 .. 12
REMARK: Synonymous with A_MM.
EX: MsgBox, % A_Mon ; V=> 09

A_MouseDelay 
USE: Contains the current delay for SetMouseDelay.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_MouseDelay ; V=> 10

A_MouseDelayPlay 
USE: Contains the current delay for SetMouseDelay Play mode.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_MouseDelayPlay ; V=> -1

A_MSec 
USE: Contains the current 3 digit millisecond.
RETURN: Number.  000 .. 999
REMARK: To remove leading zeros, use: (A_MSec+0)
EX: MsgBox, % A_MSec ; V=> 094

A_MyDocuments 
USE: Contains the path to user's "My Documents" folder.
RETURN: String. Format: Path
REMARK: A folder that's also a root drive still returns no backslash.
EX: MsgBox, % A_MyDocuments ; V=> C:\Users\GroggyOtter\Documents

A_Now 
USE: Contains the current local time.
RETURN: Number. Format: YYYYMMDDHH24MISS
REMARK: For UTC (universal time coordinated), use A_NowUTC.
EX: MsgBox, % A_Now ; V=> 19490608123000

A_NowUTC 
USE: Contains the current UTC (universal time coordinated) time.
RETURN: Number. YYYYMMDDHH24MISS format.
REMARK: For local time, use A_Now.
EX: MsgBox, % A_Now ; V=> 19851018000000

A_NumBatchLines  
USE: Contains the Lines|Time for SetBatchLines.
RETURN: String if time. Number if lines.
REMARK: If variable ends in ms, it's time. Otherwise it's Lines.
    Synonymous with A_BatchLines.
EX: MsgBox, % A_NumBatchLines ; V=> 10ms

A_OSType 
USE: Contains the current operating system type.
RETURN: String. WIN32_NT|WIN32_WINDOWS
REMARK: Win 95/98/ME are no longer supported but would return WIN32_WINDOWS.
EX: MsgBox, % A_OSType ; V=> WIN32_NT

A_OSVersion 
USE: Contains the current operating system version.
RETURN: String. WIN_7|WIN_8|WIN_8.1|WIN_VISTA|WIN_2003|WIN_XP|WIN_2000
REMARK: If OS version unknown, return versionMajor.versionMinor.build string.
EX: MsgBox, % A_OSVersion ; V=> 10.0.14393

A_PriorHotkey 
USE: Contains the name of the last activated hotkey or hotstring.
RETURN: String. Includes modifiers.
REMARK: BLANK until two hotkeys have fired.
EX: MsgBox, % A_PriorHotkey ; V=> $*^s

A_PriorKey 
USE: Contains the last pressed key.
RETURN: String. BLANK if no hotkey has been pressed.
REMARK: A hook must be used for this to work.
EX: MsgBox, % A_PriorKey ; V=> Enter

A_ProgramFiles 
USE: Contains the path to the systems Program Files folder.
RETURN: String. Format: Path
REMARK: On 64-bit systems, 32-bit AHK returns Program Files(x86)
    The ProgramW6432 environmental variable has the 64 bit path.
EX: MsgBox, % A_ProgramFiles ; V=> C:\Program Files

A_Programs 
USE: Contains the path to the user's start menu "Programs" folder.
RETURN: String. Format: Path
REMARK: Synonymous with the ProgramFiles variable.
EX: MsgBox, % A_Programs ; V=> C:\Users\GroggyOtter\AppData\...\Start Menu\Programs

A_ProgramsCommon 
USE: Contains the path to the common start menu "Programs" folder.
RETURN: String. Format: Path
EX: MsgBox, % A_ProgramsCommon ; V=> C:\ProgramData\...\Start Menu\Programs

A_PtrSize 
USE: Contains the exe's pointer size
RETURN: Number. 4 = 32-bit    8 = 64-bit
REMARK: This variable is dependent on the exe running the current script.
EX: MsgBox, % A_PtrSize ; V=> 8

A_RegView 
USE: Contains the current setting of SetRegView.
RETURN: String. Default|32|64
REMARK: This is inapplicable to 32-bit systems.
EX: MsgBox, % A_RegView ; V=> 32

A_ScreenDPI 
USE: Contains the number of pixels per logical inch of screen width.
RETURN: Number. Default is 96.
EX: MsgBox, % A_ScreenDPI ; V=> 96

A_ScreenHeight 
USE: Contains the height of the primary monitor.
RETURN: Number. In pixels.
REMARK: Use SysGet for non-primary monitors or to get full desktop height.
EX: MsgBox, % A_ScreenHeight ; V=> 1080

A_ScreenWidth 
USE: Contains the width of the primary monitor.
RETURN: Number. In pixels.
REMARK: Use SysGet for non-primary monitors or to get full desktop width.
EX: MsgBox, % A_ScreenWidth ; V=> 1920

A_ScriptDir 
USE: Contains the path of the current running script's directory.
RETURN: String. Format: Path
REMARK: The final backslash is omitted even if it's a root directory.
EX: MsgBox, % A_ScriptDir ; V=> D:\Scripts

A_ScriptFullPath 
USE: Contains the full path and name of the current running script.
RETURN: String. Format: Path
EX: MsgBox, % A_ScriptDir ; V=> D:\Scripts\SciTE_GOTest.ahk

A_ScriptHWND 
USE: Contains the unique ID/HWND of the current script's main hidden window.
RETURN: Number. Handle.
EX: MsgBox, % A_ScriptHWND ; V=> 0x110646

A_ScriptName 
USE: Contains the name and extension of the current running script.
RETURN: String.
EX: MsgBox, % A_ScriptName ; V=> SciTE_GOTest.ahk

A_Sec 
USE: Contains the current 2-digit second.
RETURN: Number. 00 .. 59
EX: MsgBox, % A_Sec ; V=> 07

A_SendLevel 
USE: Contains the current level set by SendLevel.
RETURN: Number. 0 .. 100
EX: MsgBox, % A_SendLevel ; V=> 0

A_SendMode 
USE: Contains the current mode set by SendMode.
RETURN: String. Event|Input|Play|InputThenPlay
EX: MsgBox, % A_SendMode ; V=> Input

A_Space 
USE: Contains the space character.
REMARK: Same as hitting spacebar or using Chr(32).
EX: MsgBox, % "SP" A_Space "C" Chr(32) "E" ; V=> SP A CE

A_StartMenu 
USE: Contains the path to the user's start menu folder.
RETURN: String. Format: Path
EX: MsgBox, % A_StartMenu ; V=> C:\Users\GroggyOtter\AppData\...\Windows\Start Menu

A_StartMenuCommon 
USE: Contains the path to the common start menu folder.
RETURN: String. Format: Path
EX: MsgBox, % A_StartMenuCommon ; V=> C:\ProgramData\Microsoft\Windows\Start Menu

A_Startup 
USE: Contains the path to the user's start menu "Startup" folder.
RETURN: String. Format: Path
EX: MsgBox, % A_Startup ; V=> C:\Users\GroggyOtter\AppData\...\Programs\Startup

A_StartupCommon 
USE: Contains the path to the common start menu "Startup" folder.
RETURN: String. Format: Path
EX: MsgBox, % A_StartMenuCommon ; V=> C:\ProgramData\Microsoft\...\Programs\Startup

A_StoreCapsLockMode 
USE: Contains the current mode set by SetStoreCapsLockMode.
RETURN: String. On|Off
EX: MsgBox, % A_StoreCapsLockMode ; V=> On

A_StringCaseSense 
USE: Contains the current mode set by StringCaseSense.
RETURN: String. On|Off|Locale
EX: MsgBox, % A_StringCaseSense ; V=> Off

A_Tab 
USE: Contains the tab character.
REMARK: Same as hitting tab or using Chr(9).
EX: MsgBox, % "T" A_Tab "A" Chr(9) "B" ; V=> T    A    B

A_Temp 
USE: Contains the path to the designated temporary folder.
REMARK: Path is retrieved from one of the following locations.
    Listed in order: TMP > TEMP > USERPROFILE > WINDIR
EX: MsgBox, % A_Temp ; V=> C:\Users\User\AppData\Local\Temp

A_ThisFunc 
USE: Contains the name of the currently executing function.
RETURN: String. BLANK = Call was not made inside a function.
EX: GroggyFunc(){
        MsgBox, % A_ThisFunc ; V=> GroggyFunc
    }

A_ThisHotkey 
USE: Contains the name of the current hotkey or hotstring.
RETURN: String. BLANK = No hotkey has been pressed
EX: MsgBox, % A_PriorHotkey ; V=> $*^s

A_ThisLabel 
USE: Contains the name of current executing label|subroutine.
RETURN: String. BLANK = A label is not executing
REMARK: Updated when the script executes a GoSub|Return|Goto.
EX: GroggyLabel:
        MsgBox, % A_ThisLabel ; V=> GroggyLabel

A_ThisMenu 
USE: Contains the menu name of the most recently selected custom menu item.
RETURN: String. BLANK if none.
EX: MsgBox, % A_ThisMenu ; V=> MyMenu

A_ThisMenuItem 
USE: Contains the name of the most recently selected custom menu item.
RETURN: String. BLANK = None
REMARK: For the menu number, use A_ThisMenuItemPos.
EX: MsgBox, % A_ThisMenuItem ; V=> MenuItem1

A_ThisMenuItemPos 
USE: Contains the number of the most recently selected custom menu item.
RETURN: Number. 1 .. N. BLANK = none.
REMARK: For the menu name, use A_ThisMenuItem.
EX: MsgBox, % A_ThisMenuItem ; V=> 1

A_TickCount 
USE: Contains the amount of time since the computer was started.
RETURN: Number. In ms. 1 .. N
REMARK: If precision is an issue, use QueryPerformanceCounter()
EX: MsgBox, % A_TickCount ; V=> 876531740

A_TimeIdle 
USE: Contains the time since the system last detected input.
RETURN: Number. In ms. 0 .. N
REMARK: Includes mouse, keyboard, and other input types.
EX: If (A_TimeIdle > 60000) ; If true, no user input in over 60 sec.
        MsgBox, User has been gone more than a minute!

A_TimeIdleKeyboard 
USE: Contains the time since the computer last detected keyboard input.
RETURN: Number. In ms. 0 .. N
REMARK: This defaults to A_TimeIdle if a keyboard hook is not installed.
EX: If (A_TimeIdleKeyboard > 60000) ; If true, no keyboard input in over 60 sec.
        MsgBox, User has not typed anything in over a minute!

A_TimeIdleMouse 
USE: Contains the time since the computer last detected mouse input.
RETURN: Number. In ms. 0 .. N
REMARK: This defaults to A_TimeIdle if a mouse hook is not installed.
EX: If (A_TimeIdleMouse > 60000) ; If true, no mouse input in over 60 sec.
        MsgBox, User has not typed anything in over a minute!

A_TimeIdlePhysical 
USE: Contains the time since the system last detected physical input.
RETURN: Number. In ms. 0 .. N
REMARK: A hook is required to track mouse and|or keyboard input.
    This variable defaults to A_TimeIdle if no hook is used.
EX: If (A_TimeIdlePhysical > 60000) ; If true, no physical input in over 60 sec.
        MsgBox, User has not typed anything in over a minute!

A_TimeSincePriorHotkey 
USE: Contains time since A_PriorHotkey was pressed.
RETURN: Number. -1 .. N. -1 = A_PriorHotkey is BLANK.
EX: MsgBox, % A_TimeSincePriorHotkey ; V=> 999983

A_TimeSinceThisHotkey 
USE: Contains time since A_ThisHotkey was pressed.
RETURN: Number. -1 .. N. -1 = A_ThisHotkey is BLANK.
EX: MsgBox, % A_TimeSinceThisHotkey ; V=> 3333360

A_TitleMatchMode 
USE: Contains the current MatchMode set by SetTitleMatchMode.
RETURN: 1|2|3|RegEx
    1 = Title must start with    3 = Title must exactly match
    2 = Title must contain       RegEx = Title must match RegEx Pattern
EX: MsgBox, % A_TitleMatchMode ; V=> Fast

A_TitleMatchModeSpeed 
USE: Contains the current speed set by SetTitleMatchMode.
RETURN: String. Fast|Slow
EX: MsgBox, % A_TitleMatchModeSpeed ; V=> Fast

A_UserName 
USE: Contains the name of the user account that launched the script.
RETURN: String.
EX: MsgBox, % A_UserName ; V=> GroggyOtter

A_WDay 
USE: Contains the current day of the week.
RETURN: Number. 1 .. 7. 1 = Sunday
EX: MsgBox, % A_WDay ; V=> 2

A_WinDelay 
USE: Contains the current delay set by SetWinDelay.
RETURN: Number. -1 .. N
    -1 = No delay    0  = Shortest delay    N = Delay in ms
REMARK: Always decimal.
EX: MsgBox, % A_WinDelay ; V=> -1

A_WinDir 
USE: Contains the path to the current machines Window's directory.
RETURN: String. Format: Path
EX: MsgBox, % A_WinDir ; V=> C:\Windows

A_WorkingDir 
USE: Contains the path to the current working directory.
RETURN: String. Format: Path. A_ScriptDir is default.
REMARK: Working dir is used when a path isn't provided.
EX: MsgBox, % A_WinDelay ; V=> -1

A_YDay 
USE: Contains the current 3-digit day of the year.
RETURN: Number. 1 .. 366
REMARK: If the number needs to be padded, use: Format("{:03}",A_YDay)
EX: MsgBox, % A_YDay ; V=> 274

A_Year 
USE: Contains the current 4-digit year.
RETURN: Number. Format: 0000 .. 9999
REMARK: Synonymous with A_YYYY
EX: MsgBox, % A_Year ; V=> 2018

A_YWeek 
USE: Contains the current 4-digit year and 2 digit week of the year.
RETURN: Number. Format: YYYYWW. For weeks use: SubStr(A_YWeek,5) 
REMARK: If the 1st week in Jan has more than 3 days, it counts as week 1.
EX: MsgBox, % A_YWeek ; V=> 201840

A_YYYY 
USE: Contains the current 4-digit year.
RETURN: Number. Format: 0000 .. 9999
REMARK: Synonymous with A_Year
EX: MsgBox, % A_YYYY ; V=> 2018

Clipboard 
USE: Stores the text data of the clipboard if it contains text.
RETURN: String.
REMARK: You can read/write to the Clipboard like any other variable.
    To paste text from the clipboard, use: Send, ^v
EX: MsgBox, % Clipboard

ClipboardAll 
USE: Contains anything on the clipboard. Including binary data.
REMARK: ClipboardAll can be saved directly to a file using FileAppend.
EX: MsgBox, % ClipboardAll

ComSpec 
USE: Contains the path to the system's Command Prompt.
RETURN: String. Format: Path
REMARK: Synonymous with A_ComSpec.
EX: MsgBox, % ComSpec ; V=> C:\Windows\system32\cmd.exe

ErrorLevel 
USE: Used by multiple commands to indicate success|failure|other info. 
RETURN: There is no set return types. 0 is generally used for success.
REMARK: Users can write to this like any other variable.
EX: If (ErrorLevel > 0)
        MsgBox, An error occurred! ; Detects when an error occurs

False 
USE: Contains the number 0. 0 is synonymous with False.
RETURN: Number. 0
REMARK: Most evaluations treat 0 and BLANK the same as False
EX: MsgBox, % "True:" True " False:" False ; V=> True:1 False:0

ProgramFiles 
USE: Contains the path to the user's start menu "Programs" folder.
RETURN: String. Format: Path
REMARK: Synonymous with A_Programs.
EX: MsgBox, % A_Programs ; V=> C:\Users\GroggyOtter\...\Start Menu\Programs

True 
USE: Contains the number. 1 is synonymous with True.
RETURN: Number. 1
REMARK: Most evaluations treat any value greater than 0 as true.
EX: MsgBox, % "True:" True " False:" False ; V=> True:1 False:0


### =============== BUILT_IN_FUNCTIONS ===============

Abs(Num) 
USE: Math func. the converts Num to an absolute value.
RETURN: Number. Integer|Float is dependent on input Number.
EX: Abs(-12.0) ; R=> 12.0

ACos(Num) 
USE: Math func. Returns the arccosine of Num.
RETURN: Number. In radians. -1 .. 1
    BLANK = Number is out of range.
EX: ACos(0.2) ; R=> 1.369438

Array(Item1, Item2, ..., ItemN) 
USE: An object that stores data in sequentially numbered indexes.
RETURN: Object. Numbered array.
METHODS: All objects have access to these methods:
    .Clone()    .MaxIndex()    .InsertAt()    .GetAddress()
    .Count()    .MinIndex()    .RemoveAt()    .GetCapacity()
    .Pop()      .Delete()      ._NewEnum()    .SetCapacity()
    .Push()     .Length()      .HasKey()
EX: arr := Array("Dog","Cat","Bird","Ape") ; Create an array

Asc(Str) 
USE: Returns the numeric code of the first character in Str.
RETURN: Number. 0 = BLANK Str
REMARK: Only returns the number for the first character in the String.
EX: Asc("t") ; R=> 116

ASin(Num) 
USE: Math func. Returns the arcsine of Num.
RETURN: Number. In radians. -1 .. 1
    BLANK = Number out of range.
EX: ASin(0.2) ; R=> 0.201358

ATan(Num) 
USE: Math func. Returns the arctangent of Number.
RETURN: Number. In radians.
EX: ATan(1.2) ; R=> 0.876058

Ceil(Num) 
USE: Math func. Returns Num rounded up.
RETURN: Number.
EX: Ceil(8.01) ; R=> 9

Chr(Num) 
USE: Get the character for the provided Number code.
RETURN: String. Range depends on ANSI or Unicode:
    ANSI = 0 .. 255    Unicode = 0x0 .. 0x10FFFF
REMARK: Codes over 127|0x7F depend on encoding or AHK exe type.
EX: Chr(0x2B) ; R=> +

ComObjActive(CLSID) 
USE: Retrieves a running object that has been registered with OLE.
RETURN: Object. COM.
EX: ComObject := ComObjActive("21ec2020-3aea-1069-a2dd-08002b30309d")

ComObjArray(VariantType, Count1 , Count2, ..., Count8) 
USE: Creates a SafeArray for use with COM.
VARIANTTYPE: Any COM variant type except: VT_ARRAY|VT_BYREF|VT_EMPTY|VT_NULL
COUNT: Size of each dimension. 1 .. 8
RETURN: Object. SafeArray.
CHEAT: For a full list of Variant Types, see: Cheat_Variant_Type
METHODS: Methods available to this array:
    Array.MaxIndex(dimensionN)    Array.Clone()
    Array.MinIndex(dimensionN)    Array._NewEnum()
EX: ComObjArray(VT_VARIANT:=12, 3)

ComObjConnect(ComObject, [Prefix:=""]) 
USE: Connects the object's event sources to functions with a given prefix.
PREFIX: Name to prefix event handlers with. If omitted, ComObject is disconnected.
REMARK: Event-handlers should be named: PrefixnameEventname()
EX: ComObjConnect(comObj, "Event_") ; comObj's events are connected to 
                                    ; functions with an Event_ prefix.

ComObjCreate(CLSID, [IID:=""]) 
USE: Creates a COM object.
RETURN: Object. COM.
EX: ie := ComObjCreate("InternetExplorer.Application") ; Create an IE COM

ComObject(Type, Int|Pointer, [Flag:=""]) 
USE: Creates an object to be used as a parameter or return value.
    This object represents a COM variant type.
TYPE: Com Object variation type. For a list, see: Cheat_Variant_Type
FLAGS: Affects interface reference counting. See docs.
    0 = AddRef is called    1 = AddRef is not called
RETURN: Object.
EX: ComObject := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)

ComObjEnwrap() [DEPRECATED!] 
DEPRECATED: This command is deprecated and will be removed in future versions.
REMARK: This function is now an alias for ComObject() using variant type 9.

ComObjUnwrap() [DEPRECATED!] 
DEPRECATED: This command is deprecated and will be removed in future versions.
REMARK: This function is now an alias for ComObject() using variant type 9.

ComObjError([Value:=""]) 
USE: Enable or disable notification of COM errors.
VALUE: 1 = On    0 = Off
RETURN: String. Settings before Value was applied.
EX: comObjErrorSetting := ComObjError() ; Stores current setting

ComObjFlags(ComObject, [Flag:="", Mask:=""]) 
USE: Set|get the flags which control a COM wrapper object's behavior.
FLAG: F_OWNVALUE = SafeArray is destroyed when wrapper object is freed.
MASK: Bitmask of flags. If omitted, flags are toggled.
RETURN: String. Current flag settings of COM object.
EX: ComObjFlags(SafeArr, -1) ; Sets F_OWNVALUE to false.

ComObjGet(Name) 
USE: Returns a reference to an object provided by a COM component.
NAME: Object's display name.
RETURN: Object. COM.
EX: wmiCom := ComObjGet("winmgmts:") ; Gets WMI service object

ComObjMissing() [DEPRECATED!] 
DEPRECATED: This command is deprecated and will be removed in future versions.
REMARK: This function is now an alias for ComObject() using variant type 9.

ComObjParameter() [DEPRECATED!] 
DEPRECATED: This command is deprecated and will be removed in future versions.
REMARK: This function is now an alias for ComObject() using variant type 9.

ComObjQuery(ComObject, [SID:="",] IID) 
USE: Query a COM object for an interface or service.
SID|IID: Service Identifier | Interface Identifier (GUID)
RETURN: Handle.
REMARK: Both use the format: {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
    If omitting SID, omit the comma.
EX: pointer := ComObjQuery(comObj, "{B196B283-BAB4-101A-B69C-00AA00341D07}")

ComObjType(ComObject, [Type:=""]) 
USE: Retrieves information from a COM object.
REMARK: Return BLANK if a parameter is invalid or if type can't be retrieved. 
RETURN: Based on Type.
TYPES: Information type to retrieve.
    Get Variant Type:   vtNum := ComObjType(ComObject)
    Get Interface Name: iName := ComObjType(ComObject, "Name")
    Get GUID:            GUID := ComObjType(ComObject, "IID")
    Get Class Name:     cName := ComObjType(ComObject, "Class")
    Get Class GUID:     cGUID := ComObjType(ComObject, "CLSID")

ComObjValue(ComObject) 
USE: Retrieves the value or pointer stored in a COM wrapper object.
RETURN: Number. 64-bit signed integer.

Cos(Num) 
USE: Math func. Returns the trigonometric cosine of Num.
RETURN: Number. In radians.
EX: Cos(1.2) ; R=> 0.362358

DllCall("[DllFile\]Function", [Type1, Value1, ..., TypeN, ValueN, "CDecl Type"]) 
USE: Call a function inside a DLL, such as a standard Windows API function.
CDecl: Normally omitted as most functions use the standard calling convention.
TYPE: Name & byte values. Ptr value is 32|64 bit. Str is ANSI|Unicode
    Int  4    UInt  4    Int64 8    UInt64 8    Double 8
    Char 1    UChar 1    Short 2    UShort 2    Float  4
    WStr 2    Str 1|2    AStr  1    Ptr  4|8
ErrorLevel:
    0 = Success                       -1 = DllFile\Function error
    -2 = Return|Arg invalid           -3 = DLL inaccessible or privilege too low
    -4 = Function not found in DLL    1+ = Function called with fatal exception
    A+n = Too many arguments          A-n = Too few arguments
EX: DllCall("IsWindowVisible", "Ptr", WinActive("A")) ; Check if active window is visible.

Exception(Message, [What:="", Extra:=""]) 
USE: Creates an object with properties for use with exceptions.
MESSAGE: An error message or ErrorLevel.
WHAT: Name of the function|label|command that was running.
EXTRA: Any extra information that should be included.
RETURN: Object. Properties: MESSAGE|EXEC|EXTRA|FILE|LINE
REMARK: The FILE and LINE properties are generated automatically.
    FILE    = Path to the script|file running at error time.
    LINE    = Line number that was running at error time.
EX: ExObj := Exception("Failed write", "FileAppend") ; Error writing exception

Exp(Num) 
USE: Returns e to the Num power.
NUM: A positive or negative number.
REMARK: e (Euler's number) is a mathematical constant. 2.71828...
EX: Exp(1.2) ; R=> 3.320117
    
FileExist(Pattern) 
USE: Checks for the existence of a file or folder
PATTERN: A path, filename, or pattern.
RETURN: String. D|O|N|T|C|R|A|S|H|X|BLANK
    D = Directory     O = Offline     N = Normal     T = Temporary
    C = Compressed    R = ReadOnly    A = Archive    S = System
    H = Hidden        X = No Attr     BLANK = No file found
EX: FileExist("C:\Windows\") ; R=> D

FileOpen(Filename, Flags, [Encoding:=A_FileEncoding]) 
USE: Open a file.
FILENAME: Path can be relative or absolute. For STD stream, use:
    FileOpen("*", "w")  = StdOut    FileOpen("*", "r")  = StdIn
    FileOpen("**", "w") = StdErr
FLAGS: r = Read | w = Write | rw = ReadWrite | a = Append | h = Handle
ENCODING: UTF-8 | UTF-8-RAW | UTF-16 | UTF-16-RAW | CPnnn
RETURN: Object. File Object. See: Cheat_Object_File
REMARK: BLANK encoding defaults to what FileEncoding is set to.
EX: FileOpen(A_ScriptFullPath, r)

Floor(Num) 
USE: Math func. Rounds Num down.
EX: Floor(1.9) ; R=> 1

Format(FormStr, [i1, i2, ..., iN]) 
USE: Format, convert, or pad any number of items.
FORMSTR: String format that represents how the final data should look.
    Format is "{1:Form}{2:Form}"
FORM: Unspaced format: Flag [0]Width.Places ULT Type
    FLAGS: -=Left align | SPACE=Prefix positive numbers with a space
        #=Hex prefix/force decimal | +=Force +- number prefix
    ULT: Case. UPPER lower Title
    WIDTH: Ensures variable is padded that much. Prefix 0 to pad with zeroes.
    PLACES: Max characters|digits|decimal places
    TYPE: Int:d|i|u|x|X|o|p    Float:f|e|E|g|G|a|A    String:s    Code:c
RETURN: String. Formatted.
REMARK: Use {{} and {}} for literal curly braces.
CHEAT: See Cheat_Format or Docs for more details.
EX: MsgBox, % Format("|{2:Ts}{3:-7Us}|`n|{4:10Ls}|","","sci","te","4AHK")

Func(FuncName) 
USE: Retrieves a reference|handle to the specified function.
RETURN: Object Reference. 0 = Function does not exist.
EX: fn := Func("StrLen") ; Sets string length function to fn
    MsgBox, % fn.Call("Test") ; Same as StrLen("Test")

GetKeyName(Key) 
USE: Return AHK's name for the provided key.
KEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)
RETURN: String.
REMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)
EX: GetKeyName("vk" Format("{:x}",27)) ; R=> Escape

GetKeyVK(Key) 
USE: Return the vk (Virtual Key) for provided key.
KEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)
RETURN: Number. Decimal.
REMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)
EX: GetKeyVK("Escape") ; R=> 27

GetKeySC(Key) 
USE: Return the sc (Scan Code) for the provided key.
KEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)
RETURN: Number. Decimal.
REMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)
EX: GetKeySC("Escape") ; R=> 1

GetKeyState(Key, [Mode:=""]) 
USE: Return the up|down|toggle state of a key, mouse button, or joy button.
KEY: Name (Enter) | Scan Code (SC0x1C) | Virtual Key (VK0xD)
MODE: BLANK = Logical state    P = Physical state    T = Toggle state
RETURN: Number. 1 = Down|toggle on    0 = Up|toggle off
EX: GetKeyState("LButton", "P") ; R=> 1

GuiClose(HWND) 
USE: Launched when a GUI is closed. (GUI is hidden).
RETURN: If a number > 0 is returned, GUI window is not hidden.
REMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.
EX: GuiClose(mainHWND){
        ExitApp
    }

GuiEscape(GuiHWND) 
USE: Launches when Escape is pressed in a GUI.
REMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.
EX: GuiEscape(GuiHWND){
        MsgBox, % "You pressed the escape key!" 
    }

GuiSize(GuiHWND, EventInfo, Width, Height) 
USE: Launches when a GUI is resized|minimized|maximized|restored.
WIDTH|HEIGHT: Stores the window's client width|height.
REMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.
ErrorLevel|A_EVENTINFO: Both receive one of the following:
    0=Restore|resize    1=Minimize    2=Maximize
EX: GuiNamGuiSize(GuiHWND, EventInfo, Width, Height){
        MsgBox, % "GUI Resized! Client area is now " height "x" width "."
    }

GuiContextMenu(GuiHWND, CtrlHWND, EventInfo, RightClick, X, Y) 
USE: Launches when a context menu (like the right click menu) is detected.
CTRLHWND: HWND of the control that received the event. BLANK if none.
WIDTH|HEIGHT: Window's current client width|height.
A_EVENTINFO: Contains additional info for ListBox|ListView|TreeView.
X|Y: Coordinates of the event. Relative to window.
RIGHTCLICK: True if right click launched the script.
REMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.
EX: GuiContextMenu(GuiHWND, CtrlHWND, EventInfo, RightClick, X, Y){
        MsgBox, % "You right clicked at x" X "y:" Y
    }

GuiDropFiles(GuiHWND, FileArray, CtrlHWND, X, Y) 
USE: Launches when a file is dragged & dropped onto a GUI.
FILEARRAY: An numbered array of filenames.
CTRLHWND: HWND of the control that received the event. BLANK if dropped on GUI.
X|Y: Contains the drop location X and Y coordinates. Relative to the window.
REMARK: Prefixing the function with a GUI's name makes it exclusive to that GUI.
    To disable drag and drop, remove the GUI's WS_EX_ACCEPTFILES style.
ErrorLevel|A_EVENTINFO: Both receive the total number of files dropped.
EX: GuiDropFiles(GuiHWND, FileArray, CtrlHWND, X, Y){
        MsgBox, % "You provided " FileArray.Length() " files."
    }

Hotstring( ) 
USE: Create|modify|enables|disable a hotstring.
VARIANTS:
    Hotstring(Trigger, [Action, State]) = Make/Change hotstring
    Hotstring(NewOptions)               = Set Default Options
    Hotstring("EndChars", [Value])      = Set end characters
    Hotstring("MouseReset", [Value])    = Mouse click|Hotstring behavior
    Hotstring("Reset")                  = Hotstring recognizer reset

Hotstring(Trigger, [Action:="", State:=""]) 
USE: Defines a hotstring.
TRIGGER: Format:  :OPTIONS:PATTERN
OPTIONS: Space separated list of options.
    * = Fires on match      ? = Each keystroke starts a new hotkey check
    C = Case sensitive      B = Backspaces hotstring text before sending
    R = Use {Raw} Send      O = End character is not sent
    T = Use {Text} Send     C1 = Hotstring does not conform to typed case
    Pn = Priority P1 to P5  SI|SP|SE = Send method Input | Play | Event
    Kn = N key delay|N key duration in ms for SE|SP
    X = Inline hotstring will treat text after it as a command
    Z = Reset hotstring recognizer after a hotstring fires
    Add a 0 to the end of an option (except Kn|Pn|X) to disable it.
ACTION: Replacement text. If X option, item to execute.
STATE: On|Off|Toggle
EX: Hotstring(":*:rtm", " = ""Read The Manual!""", On)

Hotstring(Options) 
USE: Set the default options for all future hotstrings.
OPTIONS: Space separated list of options.
    * = Fires on match      ? = Each keystroke starts a new hotkey check
    C = Case sensitive      B = Backspaces hotstring text before sending
    R = Use {Raw} Send      O = End character is not sent
    T = Use {Text} Send     C1 = Hotstring does not conform to typed case
    Pn = Priority P1 to P5  SI|SP|SE = Send method Input | Play | Event
    Kn = N key delay|N key duration in ms for SE|SP
    X = Inline hotstring will treat text after it as a command
    Z = Reset hotstring recognizer after a hotstring fires
    Add a 0 to the end of an option (except Kn|Pn|X) to disable it.
EX: Hotstring("*?TCB0")

Hotstring("EndChars", [Value:="-()[]{}':;""/\,.?!`n `t"]) 
USE: Characters in Value will activate end of hotstring.
VALUE: String of new characters.
RETURN: String. Prior characters before Value was applied.
REMARK: EndChars are irrelevant with the * option.
EX: Hotstring("EndChars", "`t(") ; Only uses tab and open parentheses

Hotstring("MouseReset", [Value:=""]) 
USE: Get or set the mouse reset setting for hotstrings.
VALUE: 1 = Enable    0 = Disable
RETURN: String. Setting before Value was applied.
REMARK: Mouse hook may be installed if needed.
EX: var := Hotstring("MouseReset") ; Get current MouseReset setting

Hotstring("Reset") 
USE: Resets the hotstring recognizer.
REMARK: Hotstring recognizer assumes you've typed nothing so far.

IL_Add(IL_ID, Filename, [IconNum:=1, ResizeNonIcon:=0]) 
USE: Add an icon or picture to the specified IL_ID.
IL_ID: An Image List ID made by IL_Create()
FILENAME: Path to an image file or a bitmap|icon handle.
ICONNUM: Icon group number. -Number = Resource ID for an EXE.
RETURN: Number. Index of new icon.
EX: IL_Add(imgListID, "C:\Main.ico", 2)

IL_Create([StartNum:=2, Grow:=5, LargeIcons:=0]) 
USE: Creates a new, empty ImageList.
STARTNUM: Number of icons to put into the initial list.
GROW: When list size is exceeded, increase capacity by this number.
LARGEICONS: 0 = Has small icons    1+ = Has large icons
RETURN: Number. 0 = Failure    N+ = ID of the ImageList
EX: IL_Create(10, 10, true)

IL_Destroy(IL_ID) 
USE: Delete the specified ImageList ID.
RETURN: Number. 1=Success    0=Failure

InStr(Data, Search, [Case:=1, Pos:=1, Occurrence:=1]) 
USE: Searches through Data for a match to Search.
DATA: The data (haystack) to search through.
SEARCH: The string (needle) to search for.
CASE: 1 = Case sensitive search    0 = Case insensitive search
POS: Char to start at. If negative, start at end and reverse search.
    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last
OCCURRENCE: For multiple matches, return the pos of this match.
RETURN: Number. Index of match.
REMARK: If Pos is negative, result is still chars from the beginning.
EX: InStr("HotShot", "hot", 0, -3, 2) ; R=> 5

IsByRef(ParameterVar) 
USE: Checks if a variable was passed by memory reference (By Ref).
RETURN: Number. 1 = True    0 = False
EX: IsByRef(SomeVar) ; R=> 1

IsFunc(FunctionName) 
USE: Checks if specified function exists in the script.
RETURN: Number. 0 = Not found    1 = Found    2+ = Found with parameters 
REMARK: Number of parameters is return value - 1.
Ex: IsFunc("StrLen") ; R=> 1

IsLabel(Label|Hotkey|Hotstring) 
USE: Checks if specified Label|Hotkey|Hotstring exists in the script.
RETURN: Number. 0 = Not found    1+ = Found
REMARK: Do not include colons.
EX: IsLabel("GuiClose") ; R=> 1

IsObject(ObjectName) 
USE: Checks if specified label exists in the script.
RETURN: Number. 0 = Not an Object    1+ = Is an Object
EX: IsObject("MyObj") ; R=> 1

Ln(Num) 
USE: Math func. Returns the natural logarithm (base e) of Num.
REMARK: Returns BLANK if Num is negative.
EX: Ln(1.2) ; R=> 0.182322

LoadPicture(Filename, [Options, ByRef ImgType:=0]) 
USE: Loads a picture from file and returns a bitmap or icon handle.
OPTIONS: Any of the following. Space or tab separation allowed.
    Wn|Hn: Sets width|height of image.
    IconN: Load Nth icon from files with multiple images.
    GDI+: Use GDI+ to load the image.
IMGTYPE: Variable that stores the return handle type.
    0 = IMAGE_BITMAP    1 = IMAGE_ICON    2 = IMAGE_CURSOR
RETURN: Number. Handle.
EX: Menu, Tray, Icon , % "HICON:" LoadPicture("Shell32.dll", "Icon28")

Log(Num) 
USE: Math func. Returns the logarithm (base 10) of Num.
REMARK: Returns BLANK if Num is negative.
EX: Ln(1.2) ; R=> 0.079181

LTrim(Str, [Omit:=A_Space A_Tab]) 
USE: Removes all defined characters from the beginning of Str.
OMIT: User defined characters to be trimmed. Default = Spaces Tabs
EX: MsgBox, % LTrim("!!! HI !!!", "!") ; R=> HI !!!

LV_Add(Options, Field1, Field2, ..., FieldN) 
USE: Adds a new row to the bottom of the list.
RETURN: Number. 0 = Failure    1+ = New row's number
OPTIONS: Zero or more options. Use space or tab for separation.
    Select = Selects row            ColN = Begin at column number N 
    FocusN = Sets focus to row N    Check = Show check mark if available
    Vis = Ensures row is visible    IconN = Nth Icon from imagelist
EX: LV_Add("Check", "RowName")

LV_Delete([RowNum:=""]) 
USE: Delete the specified row|all rows.
ROWNUM: BLANK = Delete all rows    N+ = Row number to delete
RETURN: 0 = Failure    1 = Success
EX: LV_Delete() ; Deletes all rows R=> 1

LV_DeleteCol(ColNum) 
USE: Deletes the specified column and all content beneath it.
RETURN: 0 = Failure    1 = Success
EX: LV_DeleteCol(1) ; R=> 1

LV_GetCount([Mode:=""]) 
USE: Returns the total number of rows or columns
MODE: BLANK      = Return total number of rows.
      S|Selected = Return number of selected/highlighted rows.
      Col|Column = Return total number of columns.
EX: LV_GetCount("Col") ; R=> 4

LV_GetNext([StartNum:=0, RowType:=""]) 
USE: Returns row number of the next selected|checked|focused row.
STARTNUM: Start row number.
ROWTYPE:
    BLANK       = Returns the next selected/highlighted row.
    C|Checked   = Returns the next checked row.
    F|Focused   = Returns the row that has focus.
EX: LV_GetNext(0, "F") ; Gets the focused row. R=> 3

LV_GetText(OutputVar, RowNum, [ColNum:=1]) 
USE: Get text from the specified RowNumber and ColNumber.
ROWNUMBER: If 0, OutputVar is set to col header.
RETURN: 1 = Success    0 = Failure. OutputVar is set to BLANK
EX: LV_GetText(var, 0, 2) ; Var is set to the header of column 2

LV_Insert(RowNum, [Options:="", Col1, Col2, ..., ColN]) 
USE: Insert a new row before the specified row.
COL: Contents to put in each column.
OPTIONS: Zero or more options. Use space or tab for separation.
    Select = Selects row            ColN = Begin at column number N 
    FocusN = Sets focus to row N    Check = Show check mark if available
    Vis = Ensures row is visible    IconN = Nth Icon from imagelist
REMARK: Like LV_Add() except newly inserted row uses the first parameter.
EX: LV_Insert(2,, "A", "B", "C") ; Insert row at row 2. Set col 1,2,3 to A,B,C

LV_InsertCol(ColNum, [Options:="", ColTitle:=""]) 
USE: Inserts a new column to the left of the specified column.
OPTIONS: 
    Center = Center text         Text = SORT-Mark col is text
    Uni = One-way sorting        IconRight = Icon goes on right
    N = Col width in N pixels    Case = Sort is case-sensitive
    Left = Left-justify text     Auto = Adjust col to fit contents
    NoSort = Disables sorting    Desc = Start col in descending order
    Right = Right-justify text   Sort = Sorts column in ascending order
    IconN = Specify Nth Icon     Integer = Mark col has integer
    SortDesc = Descending sort   AutoHdr = Adjust col to fit contents & header
    Float = Mark col has float numbers
    Logical = Digits inside text are sorted like true numbers instead of chars
    CaseLocale = Sorting is case sensitive based on locale
COLTITLE: Header for the column.
EX: LV_InsertCol(2, "Vis", "Col 2") ; Insert col at col 2. Title it "Col 2"

LV_Modify(RowNumber, [Options:="", NewCol1, ..., NewColN]) 
USE: Modifies the text|attributes of a row.
ROWNUMBER: 0 = All rows are modified.
OPTIONS: Zero or more options. Use space or tab for separation.
    Check   = Show check mark if ListView has check boxes
    ColN    = Col followed by number to begin applying Col1 parameters and beyond
    FocusN  = Sets focus to row N
    IconN   = Nth Icon from imagelist. Icon number > number of Icons    = Blank Icon
    Select  = Selects the row
    Vis     = Ensures specified row is completely visible
RETURN: 0 = Failure. 1 = Success.
EX: LV_Modify(1, "Select Check", "1") ; Select+Check first row. Change col1 text to 1.

LV_ModifyCol([ColNum:="", Options:="", ColTitle:=""]) 
USE: Modifies the attributes|text of the specified column|header.
REMARK: Providing no parameters will auto-adjust each row to fit the contents.
OPTIONS: 
    Center = Center text         Text = SORT-Mark col is text
    Uni = One-way sorting        IconRight = Icon goes on right
    N = Col width in N pixels    Case = Sort is case-sensitive
    Left = Left-justify text     Auto = Adjust col to fit contents
    NoSort = Disables sorting    Desc = Start col in descending order
    Right = Right-justify text   Sort = Sorts column in ascending order
    IconN = Specify Nth Icon     Integer = Mark col has integer
    SortDesc = Descending sort   AutoHdr = Adjust col to fit contents & header
    Float = Mark col has float numbers
    Logical = Digits inside text are sorted like true numbers instead of chars
    CaseLocale = Sorting is case sensitive based on locale
EX: LV_ModifyCol(1, "Desc") ; Col 1 is now sorted in descending order

LV_SetImageList(IL_ID, [IconType:=""]) 
USE: Sets or replaces the ListView's ImageList.
ICONTYPE: 0 = Large    1 = Small    2 = State    BLANK = AutoDetect
RETURN: On success, returns previous associated ListView.
EX: LV_SetImageList(IL_ID, 0) ; Set new list and set icon type to large.

Max(Num1, Num2, ..., NumN) 
USE: Math func. Find the highest number in the Numbers provided.
NUM: Any amount of numbers. If a string is used, return is BLANK.
REMARK: Use * to pass an array. Use: Max(arrayName*)
EX: Max(1, -1, 5.1, 5, 0) ; R=> 5.1

MenuGetHandle(MenuName) 
USE: Retrieves Win32 menu handle of a menu.
RETURN: Number. Handle.
EX: MenuGetHandle("File") ; R=> 0524e5

MenuGetName(Handle) 
USE: Retrieves the name of a menu based on a handle.
RETURN: Handle.
EX: MenuGetName(0524e5) ; R=> File

Min(Num1, Num2, ..., NumN) 
USE: Math func. Find the lowest number in the Nums provided.
NUM: Any amount of numbers. If a string is used, return is BLANK.
REMARK: Use * to pass an array. Use: Min(arrayName*)
EX: Min(1, -1, 2, -10, 5) ; R=> -10

Mod(Dividend, Divisor) 
USE: Remaining amount after dividend has been divided by the divisor.
DIVIDEND: The number being divided.
DIVISOR: The number you're dividing by.
EX: Mod(-10, 4) ; R=> -2

NumGet(Var|Address, [Offset:=0, Type:="UPtr"]) 
USE: Get the binary number at the specified address and offset.
VAR: Variable's string buffer address is used.
TYPE: Must be enclosed in quotes.
    UInt|Int|Int64|Short|UShort|Char|UChar|Double|Float|UPtr|Ptr
RETURN: BLANK = Invalid address
REMARk: If Type is put in the second parameter, offset is assumed 0.
EX: NumGet(MyVar, 4, "UInt") ; Gets 4 bytes starting at the 4th byte in MyVar

NumPut(Num, Var|Address, [Offset:=0, Type:="UPtr"]) 
USE: Stores binary data at the specified address and offset.
VAR: If a variable's, the string buffer address is used.
TYPE: Must be enclosed in quotes.
    UInt|Int|Int64|Short|UShort|Char|UChar|Double|Float|UPtr|Ptr
RETURN: BLANK = Invalid address
EX: NumPut(1, MyVar, 4, "UInt") ; Puts a 1 in the 4 to 7 byte section of MyVar.

ObjAddRef(Ptr) 
USE: Increments an object's reference count.
RETURN: Number. New reference count.
REMARK: Should only be used when dealing with unmanaged pointers to objects.

ObjBindMethod(ObjectName, MethodName, [Params]) 
USE: Creates a BoundFunc object with a binded method.
EX: rlRef := ObjBindMethod(fileObj, "ReadLine") ; Get reference to this
                              ; FileObject's built-in ReadLine() method.

Object(Key1, Value1, Key2, Value2, ..., KeyN, ValueN) 
USE: Creates an associative array/key-value pair object.
METHODS: All objects have access to these methods:
    Clone()    MaxIndex()    InsertAt()    GetAddress()
    Count()    MinIndex()    RemoveAt()    GetCapacity()
    Pop()      Delete()      _NewEnum()    SetCapacity()
    Push()     Length()      HasKey()
RETURN: Object.
EX: appleObj := Object(color:"red",stem:true,cal:130)

ObjGetBase(Obj) 
USE: Get base object of Obj.
RETURN: BLANK = No base. Otherwise, base name.
REMARK: No meta-functions are called.
EX: ObjGetBase(newClass) ; R=> MainBaseClass

ObjRawGet(Object, Key) 
USE: Retrieve value associated with Key in Object.
REMARK: No meta-functions or property functions are called.
    Synonymous with: data := Object[Key]
RETURN: BLANK = Key not exist. Otherwise, returns key value.
EX: data := ObjRawGet("MyObj", "Key2") ; Gets data from key2 of MyObj

ObjRawSet(Obj, Key, Data) 
USE: Store/overwrite Data to Obj's Key.
REMARK: No meta-functions or property functions are called.
    Synonymous with: Object[key] := data
EX: ObjRawSet("MyObj", "Key2", "SciTE") ; Puts string SciTE into Key2 of MyObj

ObjRelease(Ptr) 
USE: Decrements an object's reference count.
RETURN: Number. New reference count.
REMARK: Should only be used when dealing with unmanaged pointers to objects.

ObjSetBase(Object, BaseObject) 
USE: Set's an object's base object.
REMARK: No meta-functions are called.
RETURN: BLANK = Object has no base.

OnClipboardChange(Func, [AddRemove:=1]) 
USE: Launches a function|func object when clipboard's contents change.
FUNC: Function name or FuncObj. First parameter pass will mean Clipboard:
    0 = Is empty    1 = Contains text    2 = Contains binary data
ADDREMOVE: Call function:
    1 = After previously registered functions
    -1 = Before previously registered functions
    0 = Do not call function
EX: OnClipboardChange("ClipBackup", -1)

OnError(Func, [AddRemove:=1]) 
USE: Specifies a function to run automatically when an unhandled error occurs.
FUNC: Function|FuncObj. First parameter is an exception object or thrown value.
ADDREMOVE: Call function:
    1 = After previously registered functions
    -1 = Before previously registered functions
    0 = Do not call function
EX: OnError("LogError", -1) ; Immediately run an error logger on error

OnExit(ExitFunc, [AddRemove:=1]) 
USE: Specifies a function to run automatically on script exit.
EXITFUNC: Function|FuncObj. Param1 = ExitReason. Param2 = ExitCode.
    EXITREASON: Logoff|Shutdown|Close|Error|Menu|Exit|Reload|Single
    EXITCODE: Number. -2147483648 .. 2147483647
ADDREMOVE: Call function:
    1 = After previously registered functions
    -1 = Before previously registered functions
    0 = Do not call function
EX: OnExit("LogError", -1) ; Immediately run an error logger on error

OnMessage(MsgNum, [Func:="", MaxThread:=1]) 
USE: Run a function|FuncObj when the program receives the specified message.
MSGNUM: Number. 0 .. 4294967295
FUNC: Function|FuncObj to run.
MAXTHREAD: Max amount of threads. 0 = Unregister function.
    -N = Call function before any others and give N max threads.
RETURN: Completely depends on if a Function or FuncObj is used.
    OnMessage's return values are complex. Please see the docs for return info.
EX: OnMessage(0x201, "LeftClick") ; LeftClick() fires on left mouse down

Ord(String) 
USE: Get ordinal number (numeric character code) of String's first character.
RETURN: 0 = Empty string. Otherwise, returns first character's code.
EX: Ord("test") ; R=> 116 Because t is 116.

RegExMatch(Haystack, [Options]Needle, [OutputVar:="", Pos:=1]) 
USE: Check a string for a specified pattern (Regular Expression).
HAYSTACK: String to search through.     NEEDLE: RegEx Pattern to search for.
OPTIONS: RegEx prefix options. A ) should separate options from needle.
    i = Case-insensitive    U = Default ungreedy     m = Multiline|Per line
    A = Force ^ anchor      D = Force $ anchor       S = Study pattern
    s = Dot matches ALL     X = Enable PCRE_EXTRA    x = Ignore whitespace chars
    P = Position mode       C = Auto-callout mode   `a = Use all newline forms
    `n = Use `n as default new line    J = Allow duplicate named subpatterns
    `r = Use `r as default new line    (*ANYCRLF) = Newlines restricted to `r
OUTPUTVAR: Variable content dependent on:
    Normal Match = Store the full pattern match.
    P Option = Store the length of pattern match. 
    O Option = Stores a Match Object.
POS: Char to start at. 0 starts at end. Negative starts left of end.
    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last
RETURN: Number. N = Position of first occurrence    0 = Not found
ErrorLevel: 0 = No Errors    -Number = RegEx Execution error
    "Compile error N at offset M". N = PCRE error number. M = error position.
EX: RegExMatch(email, "\S+?@\S*\.\w{2,}") ; Basic email verification. R=> 1

RegExReplace(Haystack, [Options]Needle, [Replace:="", Count:="", Limit:=-1, Pos:=1]) 
USE: Searches a string for a specified pattern and replace match.
HAYSTACK: String to search.             NEEDLE: RegEx Pattern to find.
OPTIONS: RegEx prefix options. A ) should separate options from needle.
    i = Case-insensitive    U = Default ungreedy     m = Multiline|Per line
    A = Force ^ anchor      D = Force $ anchor       S = Study pattern
    s = Dot matches ALL     X = Enable PCRE_EXTRA    x = Ignore whitespace chars
    P = Position mode       C = Auto-callout mode   `a = Use all newline forms
    `n = Use `n as default new line    J = Allow duplicate named subpatterns
    `r = Use `r as default new line    (*ANYCRLF) = Newlines restricted to `r
REPLACE: Replacement text.              COUNT: Number of replacements.
LIMIT: Max amount of replacements.
POS: Char to start at. 0 starts at end. Negative starts left of end.
    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last
RETURN: String. Modified haystack.
REMARK: StrReplace() is faster. Use when possible.
ErrorLevel: 0 = No Errors    -Number = RegEx Execution error    M = Error pos
    String = "Compile error N at offset M"     N = PCRE error num
EX: RegExReplace("Appple", "pp", "p") ; R=> Apple

RegisterCallback(Function|FuncObj, [Options:="", PCount:="", EventInfo:=Address]) 
USE: Used to redirects a call to a function|FuncObj via a machine-code address.
OPTIONS: Space separated options:
    Fast|F = Avoid starting a new thread for each function call
    CDecl|C = Conform to "C" address calling convention
PCOUNT: Number of params being passed. If BLANK, defaults to mandatory param number.
REMARK: Due to the complexity of this command, the docs should be read.
EX: RegisterCallback("TheFunc", "F", 3)

Round(Num, [N:=0]) 
USE: Math func. Rounds Number to N places.
N:  0 = Round to nearest integer.
   +N = Rounds Num right N decimal places.
   -N = Rounds Num left N integers.
EX: Round(3.49), Round(350,-2) ; R=> 3, 400

RTrim(String, [Omit:=A_Space A_Tab]) 
USE: Removes all defined characters from the end of String.
OMIT: User defined characters to be trimmed. Default = Spaces Tabs
EX: MsgBox, % RTrim("!!! HI !!!", "!") ; R=> !!! HI

SB_SetIcon(Filename, [IconNum:=1, PartNum:=1]) 
USE: Display a small icon left of the text in status bar PartNum.
FILENAME: Path to an icon resource or an icon handle.
ICONNUM: To use another icon group, specify an icon group number.
RETURN: 0=Failure    1+= HICON address
EX: SB_SetIcon("Shell32.dll", 2) ; Chooses the 2nd icon from shell32

SB_SetParts(Width1, Width2, .. Width255) 
USE: Divides bar into multiple parts.
WIDTH: Specify width in pixels for all parts but last. Last part pixels = leftovers.
RETURN: 0 = Failure. 1+ = Success. Return status bar's HWND.
EX:    SB_SetParts(50,50) ; Creates 3 parts. Two 50-pixel parts. 3rd = remaining pixels

SB_SetText(Text, [PartNum:=1, Style:=0]) 
USE: Change the text in a status bar.
TEXT: Justify text with Tabs: 0 = Left    1 = Center    2 = right
PARTNUM: Section of status bar to change.
STYLE: Status bar border: 0 = Traditional    1 = None    2 = Raised
RETURN: 0 = Failure    1 = Success
EX: SB_SetText("txt", 2, 1]) ; Removed status bar part 2 border and added txt

Sin(Num) 
USE: Math func. Get the trigonometric sine of Num.
NUMBER: Must be in radians.
EX: Sin(1.2) ; R=> 0.932039

Sqrt(Num) 
USE: Get the square root of Num.
RETURN: Number. BLANK = Num was negative.
EX: Sqrt(121) ; R=> 11

StrGet(Address, [Length:="", Encoding:=SameAsEXE]) 
USE: Copy a string from a memory address.
ADDRESS: Memory address to read from.
LENGTH: Number of bytes to retrieve.
ENCODING: Defaults is exe type.
    UTF-8 | UTF-8-RAW | UTF-16 | UTF-16-RAW | CPnnn
RETURN: String. Requested encoded string. BLANK = Invalid param
EX: StrGet(Addy, 8) ; Get 8 bytes from the address Addy

StrLen(Str) 
USE: Get the number of characters in Str.
EX: StrLen("The quick brown fox...") ; R=> 22

StrPut(String, Address, [Length:="", Encoding:=SameAsEXE]) 
USE: Write a string to a memory address.
ADDRESS: Memory address to write to.
LENGTH: Number of bytes to write.
ENCODING: Defaults is exe type.  
    UTF-8 | UTF-8-RAW | UTF-16 | UTF-16-RAW | CPnnn
RETURN: 0 = Failure    BLANK = Invalid param    N+ = Chars written
EX: StrPut("Test", addy) ; Store test to the handle in addy

StrReplace(Data, Search, [Replace:="", OutCount:="", Limit:=-1]) 
USE: Replaces Search matches in data with the Replace string
DATA: String to search through          SEARCH: String you're trying to match
REPLACE: String to replace matches      OUTCOUNT: Stores number of matches
LIMIT: N = Number of replacements    -1 = All
RETURN: String. Data after replacements (if any) have been made.
EX: StrReplace("2 tsp salt", "tsp", "teaspoon") ; R=> 2 teaspoon salt

StrSplit(Data, [Delim:="", Trim:="", MaxParts:=-1]) 
USE: Splits Data up into elements of an array.
DELIM: String or array of characters. Marks where to split each element.
TRIM: String of characters trimmed from the beginning and end of each element.
MAXPARTS: Max array elements. Any remaining data is put in last element.
    -1 = No array size limit
    1+ = Max number of array elements
RETURN: Object. Array.
EX: StrSplit(var,"`n"," `t",6) ; Split var into 6 elements by line

SubStr(Str, Pos, [Length:=StrLen(Str)]) 
USE: Get substring from Str starting at Pos and ending at Length.
POS: Char to start at. 0 starts at end. Negative pos is number left of end.
    1 = 1st    2 = 2nd    0 = Last    -1 = 2nd from last
LENGTH: Length of characters to capture.
    +Num = Capture Num characters after Pos.
    -Num = Capture from Pos to end of string and omits last Num chars.
RETURN: String. Modified Str.
EX: SubStr("CatDogBird",1,6), SubStr("CatDogBird",-6,-4) ; R=> CatDog, Dog

Tan(Num) 
USE: Math func. Get the trigonometric tangent of Number.
NUMBER: In radians.
EX: Tan(1.2) ; R=> 2.572152

Trim(Str, [Omit:=A_Space A_Tab]) 
USE: Removes all defined characters from both sides of Str.
OMIT: User defined characters to be trimmed.
EX: MsgBox, % Trim("!!! HI !!!", "!") ; R=> HI

TV_Add(Name, [ParentID:=0, Options:=""]) 
USE: Add a new item to the TreeView.
NAME: Text of the item.                 PARENTID: ID of new item's parent.
OPTIONS: Tab|Space separated string of options. + to add option. - to remove.
    Bold = Name is bolded               IconN = Use Nth icon from ImageList
    Check = Check left of item          Expand = Show children
    Vis = Scroll to visibly see item    VisFirst = Vis + Scroll to top
    Select = Select this item          
    Sort|First|N = Item is added alphabetically|to first slot|to slot N
RETURN: 0 = Failure.
EX: c1 := TV_Add("Child1", "P1" ,"+Vis") ; Makes a treeview child belonging to P1

TV_Delete([ItemID:=""]) 
USE: Deletes the specified item or all items.
REMARK: If no parameter is passed, all treeview items are deleted.
RETURN: 1 = Success    0 = Failure

TV_Get(ItemID, Attribute) 
USE: Check if an item has the specified attribute(s).
ATTRIBUTE: 
    B|Bold = Item font is bolded
    E|Expand|Expanded = Item is expanded
    C|Check|Checked = Item is checked
RETURN: 0 = Failure or no attribute. Otherwise, return ItemID.

TV_GetChild(ParentID) 
USE: Get the ID number of ParentID's first/top child.
RETURN: 0 = None. 1+ = Child ID.
EX: TV_GetChild(P1) ; R=> C1

TV_GetCount() 
USE: Returns the total number of items in the control.
REMARK: Always instantaneous because controls keep track of count.
EX: TV_GetCount() ; R=> 10

TV_GetNext([ItemID:="", ItemType:=""]) 
USE: Get ID number of the item after ItemID.
ITEMID: Item's ID number or 0 for top item.
ITEMTYPE: F|Full = Retrieves next item regardless of relationship
    C|Check|Checked = Retrieves next checked item regardless of relationship
RETURN: Number.
    No param = Return ID of top item in TreeView
    ItemID Only = Return ID of ItemID's next sibling
    ItemID F|C = Return ID of next item|checked item regardless of relationship
EX: TV_GetNext("Child3", "Full") ; R=> Parent 2

TV_GetParent(ItemID) 
USE: Get the ID of ItemID's parent.
RETURN: 0 = Failure or no parent. Otherwise, return parent ID.
EX: TV_GetParent("c1") ; R=> P1

TV_GetPrev(ItemID) 
USE: Get the ID of the sibling above ItemID.
RETURN: 0 = Failure or none. Otherwise, return sibling ID.
EX: TV_GetPrev("c2") ; R=> c1

TV_GetSelection() 
USE: Get the ID number of the currently selected item.
EX: TV_GetSelection() ; R=> c2

TV_GetText(OutputVar, ItemID) 
USE: Stores the text of ItemID to OutputVar.
REMARK: OutputVar is capped at 8191 characters.
RETURN: 0 = Failure. Otherwise, return ItemID.
EX: TV_GetText(p1c2Name, "c2") ; R=> c2

TV_Modify(ItemID, [Options:="", NewName:=""]) 
USE: Modifies the attributes|name of an item.
OPTIONS: Tab|Space separated string of options. + to add option. - to remove.
    Bold = Name is bolded               IconN = Use Nth icon from ImageList
    Check = Check left of item          Expand = Show children
    Vis = Scroll to visibly see item    VisFirst = Vis + Scroll to top
    Select = Select this item          
    Sort|First|N = Item is added alphabetically|to first slot|to slot N
NEWNAME: If present, renames ItemID.
RETURN: 0 = Failure. Otherwise, return ItemID.
REMARK: When ItemID is the only parameter, the item is selected.
EX: TV_Modify("P1", "Bold", "Main") ; Change P1's name to Main in bold.

TV_SetImageList(ImageListID, [IconType:=0]) 
USE: Creates or replaces a TreeView's ImageList.
ICONTYPE: 2 = State icons (Not yet supported)
RETURN: 0 = Failure. Otherwise, returns previous ImageListID.
EX: TV_SetImageList("UpdatedImgList")

VarSetCapacity(Variable, [Cap, Fill:=0]) 
USE: Adjusts the size of Variable or free its memory.
CAP: Requested size in bytes.
FILL: Number. 0 .. 255. Fills every byte with Fill number.
RETURN: Number of bytes the variable can currently hold.
    BLANK = Variable not found.
    No Params = Return size of Variable.
EX: VarSetCapacity(rectStruct, 16) ; Set a Rectangle Structure var to 16 bytes

WinActive(WinTitle, [WinText, NotTitle, NotText]) 
USE: Check if the current active window matches the WinTitle criteria.
WINTITLE: ahk_exe  ahk_class  ahk_id  ahk_pid  ahk_group  A
REMARK: !WinActive() acts as WinNotActive(). WinTitle A = Use active window.
RETURN: 0 = Failure. 1+ = Active window's Unique ID (HWND)
EX: WinActive("ahk_exe SciTe.exe") ; R=> 054c2d5

WinExist(WinTitle, [WinText, NotTitle, NotText]) 
USE: Check if any current windows match the WinTitle criteria.
WINTITLE: WinTitle and it's matching behaviors. See WinTitle command.
    Types: ahk_exe    ahk_class    ahk_id    ahk_pid    ahk_group
REMARK: !WinExist() acts as WinNotExist()
RETURN: 0 = Failure. 1+ = Matching window's Unique ID (HWND)
EX: WinExist("ahk_exe.exe") ; R=> 054c2d5


### =============== CONTROL_FLOW ===============

Break, [LoopLabel] 
USE: Stop current loop or the loop running under LoopLabel.
LOOPLABEL: A label directly over a loop or a loop level number.
    1 = Current loop    2 = Previous loop    String = Label above a loop
REMARK: LoopLabel cannot be a variable.
EX: Break, LoopLvl2 ; Breaks the loop with a label over it called LoopLvl2

Catch, [OutputVar] 
USE: Executes code when a try statement throws an exception.
OUTPUTVAR: Stores an Exception Object.
REMARK: Catch is used with Try like Else is with If.
EX: Catch, excepObj ; Catches a try error and notifies user about it
        MsgBox, An error occurred. Data is saved to excepObj.

Continue, [LoopLabel] 
USE: End current loop iteration and start the next one.
LOOPLABEL: A label directly over a loop or a loop level number.
    1 = Current loop    2 = Previous loop    String = Label above a loop
REMARK: LoopLabel cannot be a variable.
EX: Continue, 2 ; Stops current iteration. Continues previous loop's next iteration

Else 
USE: Specifies the command(s) to run if the matching if-statement is False.
REMARK: An else must follow|belong to an if-statement.
EX: if (x = True)
        MsgBox, X is true
    Else MsgBox, X is false

Exit, [ExitCode] 
USE: Stops current thread or calls ExitApp if script is not persistent.
EXITCODE: Number -2147483648 .. 2147483647

Finally 
USE: Commands in a Finally block must execute after a Try-statement.
REMARK: Finally must belong a Try-statement.
EX: Try            ; Tries a function and then logs the event.
        ThisFunc()
    Finally LogEvent()

For Key, [Value] in Expression 
USE: Loop through an object. Execute the following commands for each element.
KEY|VALUE: These can be whatever words you want. They are temporary variables.
EX: For fruit, color in Object("Apple","Red","Grape","Purple")
        MsgBox, % "The " color " " fruit "." ; Displays items in new object

GoSub, Label 
USE: Thread continues to specified label and return to GoSub line if a return is reached.
LABEL: Name of a label, hotkey, or hotstring.
REMARK: If a return is encountered, the thread returns to GoSub's original line.
    If a an exit is encountered, code flow is halted.
EX: MyLabel:           ; Creates an infinite loop
        GoSub, MyLabel

GoTo, Label 
USE: Thread continues to specified label.
LABEL: Name of a label, hotkey, or hotstring.
REMARK: Unlike GoSub, the return command stops the thread like Exit.
EX: MyLabel:          ; Creates an infinite loop
        GoTo, MyLabel

If 
USE: Used to make a decision by evaluating something.
REMARK: 0|False|BLANK = False    True|+Number = True.
    !|Not checks for a False statement. Blocking {} allows running multiple commands.
VARIATIONS: 
    If [!](Expression)
        If Expression evaluates to True
    If Var [not] between Lower and Upper
        If Var falls between Lower and Upper bounds (inclusive)
    If Var [not] in MatchList
        If Var matches any element in MatchList
    If Var [not] contains MatchList
        If any element from MatchList is found anywhere inside Var
    If Var is [not] Type
        If var is of the specified type

If [!](Expression) 
USE: If Expression evaluates true, run the next line|block.
REMARK: If ! is present, check for false evaluation instead of true.
    Omitting parenthesis is a traditional-if. They're deprecated.
EX: if (2 > 1) ; => True

IfBetween 
If Var [not] between Lower and Upper 
USE: Run the next line|block if Var is between Lower and Upper bounds.
LOWER|UPPER: Lowest and highest value that Var can fall between (inclusive).
REMARK: If "not" is included, check for false evaluation instead of true.
    Numbers and strings can be evaluated.
EX: If var between papaya and plum ; var := "Pear" => True

IfIn 
If Var [not] in MatchList 
USE: Checks if Var has an exact matches to an element in MatchList.
VAR: Can be a number or string.
MATCHLIST: A comma separated list. Spacing is not ignored.
    To make a literal comma in the match list, use 2 commas.
REMARK: If you need a blank element, start the matchlist with a comma.
EX: If var in peach,pear,plum ; var := "pear" => True

IfContains 
If Var [not] contains MatchList 
USE: Checks if any element from MatchList matches any part of Var.
MATCHLIST: A comma separated list. Spaces are not ignored.
    To make a literal comma in the match list, use 2 commas.
REMARK: If you need a blank element, start the matchlist with a comma.
EX: If var contains word,word2,TE4 ; var := "SciTE4AHK" => True

IfIs 
If Var is [not] Type 
USE: Checks if Var conforms to the the specified type.
TYPE: Name          Define
      Integer       Whole numbers only.
      Float         Integer + decimals allowed.
      Number        Integer + float.
      Digit         Digits 0123456789 are allowed.
      XDigit        Hex digits 0123456789ABCDEF + 0x prefix allowed.
      Alpha         UPPER and lower alphabetic chars. A-Z + a-z
      Upper         ONLY UPPERCASE ALPHA.
      Lower         only lowercase alpha.
      AlNum         Allows alpha or digit chars.
      Space         Only whitespace allowed. Space|Tab|Linefeed|(etc...)
      Time|Date     Only date-time stamps allowed. YYYYMMDDHH24MISS
EX: If var is AlNum ; var := "SciTE4AHK" => True

IfEqual, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if (var = value)
USE: Evaluate if Var and Value are equal

IfExist, FilePattern [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Consider using: if FileExist() 
USE: Check if FilePattern exists.

IfGreater, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if (var > value)
USE: Evaluate if Var is greater than Value.

IfGreaterOrEqual, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if (var >= value)
USE: Evaluate if Var is greater than or equal to Value.

IfInString, Var, SearchString [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Consider using: if InStr()
USE: Check if Var is found in SearchString.

IfLess, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if (var < value)
USE: Evaluate if Var is less than Value.

IfLessOrEqual, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if (var <= value)
USE: Evaluate if Var is less than or equal to Value.

IfMsgBox, ButtonName 
USE: Run the following line|block based on the last MsgBox's pushed button.
BUTTONNAME: Yes|No|OK|Cancel|Abort|Ignore|Retry|Continue|TryAgain
EX: IfMsgBox, Abort
        LogError("User clicked abort") ; Logs that a user aborted something

IfNotEqual, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if (var != value)
USE: Evaluate if Var is not equal to Value.

IfNotExist, FilePattern [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Consider using: if !FileExist()
USE: Check if FilePattern does not exist.

IfNotInString, Var, SearchString [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Consider using: if !InStr()
USE: Check if Var is not found in SearchString.

IfWinActive, [WinTitle, WinText, ExcludeTitle, ExcludeText] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if WinActive()
USE: Check if WinTitle criteria matches the active window.

IfWinExist, [WinTitle, WinText, ExcludeTitle, ExcludeText] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if WinExist()
USE: Check if WinTitle criteria matches any window.

IfWinNotActive, [WinTitle, WinText, ExcludeTitle, ExcludeText] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: if !WinActive()
USE: Check if WinTitle criteria does not match the active window.

IfWinNotExist, [WinTitle, WinText, ExcludeTitle, ExcludeText] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACEMENT: if !WinExist()
USE: Check if WinTitle criteria matches no window.

Loop 
USE: Repeatedly performs the next line|block of code.
VARIATIONS: All loops are stopped by a Break or a Return
    Loop, [Count]
        Repeats indefinitely or until A_Index >= Count
    Loop, Files, FilePattern
        Loop through specified files and/or folders
    Loop, Parse, String
        Loop through a string by character or substring
    Loop, Read, InputFile
        Loop through each line of a file
    Loop, Reg, KeyName
        Loop through keys/subkeys of the registry
    Until (Expression)
        Breaks a loop when expression evaluates true. Used after a loop.
    While (Expression)
        Loop while expression evaluates true

Loop-Count 
Loop, [Count] 
USE: Repeat commands until break is encountered or Count loops have happened.
COUNT: Number of iterations. This number is stored in A_Index.
REMARK: Use Break to stop a loop.
EX: Loop, 3
        MsgBox, % "Iteration #" A_Index ; Shows 3 loop iterations

Loop-Files 
Loop, Files, FilePattern [Mode:=F] 
USE: Loop through the specified files and/or folders.
FILEPATTERN: Name|path to a file|folder. Wildcards are allowed.
MODE: Any combination of the following. Spacing optional.
    D = Directories    F = Files    R = Recurse into subdirectories
REMARK: The following built-in variables can be used inside a Files-Loop
    A_LoopFileName  A_LoopFileSizeKB    A_LoopFileShortName
    A_LoopFileExt   A_LoopFileSizeMB    A_LoopFileShortPath
    A_LoopFileDir   A_LoopFileAttrib    A_LoopFileTimeCreated
    A_LoopFileSize  A_LoopFileLongPath  A_LoopFileTimeModified
    A_LoopFilePath  A_LoopFileFullPath  A_LoopFileTimeAccessed
EX: Loop, Files, % A_ScriptDir "\*.ah?"  ; Show .ah* files in script dir
        MsgBox, A_LoopFileName

Loop-FilePattern [DEPRECATED!] 
Loop, FilePattern, [IncludeFolders, Recurse] 
DEPRECATED:This command is not recommended for use in new scripts.
REPLACEMENT: Consider using: Loop, Files, FilePattern
USE: Retrieves the specified FilePattern, one item at a time.

Loop-Parse 
Loop, Parse, String, [Delim:="", Omit:=""] 
USE: Loops through String one substring at a time.
REMARK: The following built-in variables can be used inside a Parse-Loop
    A_Index = Current loop iteration    A_LoopField = Current substring
DELIM: Determines what characters create a substring.
    BLANK = Parse through each character.
OMIT: User defined string of characters to trim from the end of each substring.
EX: Loop, Parse, var ; var := "SciTE4AHK"
        MsgBox, % A_LoopField

Loop-Read 
Loop, Read, InputFile, [OutputFile] 
USE: Retrieves text from a file, one line at a time.
INPUTFILE: File to read.
OUTPUTFILE: Optional file you can write to.
    Quickly write to OutputFile by using: FileAppend, Text
    Prefix outputfile with an * to us use LF instead of CR+LF.
    Using * for OutputFile's name allows FileAppend to send text to StdOut.
REMARK: The following built-in variables can be used inside a Parse-Loop
    A_LoopReadLine = Current line's text    A_Index = Current loop iteration
EX: Loop, Read, % A_ScriptFullPath ; Loop through current script
        MsgBox, % A_LoopReadLine   ; Show each line

Loop-Reg 
Loop, Reg, KeyName, [Mode] 
USE: Loops through registry keys and subkeys, one at a time. 
KEYNAME: Full key name. Must start with HKLM|HKU|HKCU|HKCR|HKCC
MODE: Any combination of the following. Spacing optional.
    K = Keys    V = Values    R = Recurse into subkeys
REMARK: The following built-in variables can be used inside a Reg-Loop
    A_Index          A_LoopRegType      A_LoopRegKey
    A_LoopRegName    A_LoopRegSubKey    A_LoopRegTimeModified
EX: Loop, Reg, HKCR\AutoHotkeyScript, KVR
        MsgBox, % "Path: " A_LoopRegKey "\" A_LoopRegSubKey

Loop-RootKey [DEPRECATED!] 
Loop, RootKey, [Key, IncludeSubkeys, Recurse]
DEPRECATED:This command is not recommended for use in new scripts. 
REPLACEMENT: Consider using: Loop, Reg, KeyName
USE: Loops through registry keys and subkeys, one at a time.

Return [Expression] 
USE: Return a thread to the line after the GoSub|Function|Label|GroupActivate caller.
EXPRESSION: Only used inside of functions. Expression is returned to caller.
REMARK: If thread can't return to caller (top of call stack), Return acts like Exit.
EX: Return (result)

Throw [Expression] 
USE: Signals when an error has occurred. This signal is used by Try's Catch.
EXPRESSION: The value stored in Catch's OutputVar.
REMARK: If Expression is omitted, an Exception Object is thrown instead.
CHEAT: See Cheat_Object_Excpetion
EX: Throw (ErrorVar) ; Throws a variable called ErrorVar that catch can use

Try 
USE: Guards the next line|block from runtime errors and can throw exceptions.
REMARK: Used with catch.
EX: Try                ; Try some function.
        SomeFunction()

Until (Expression) 
USE: Evaluates Expression each loop iteration. If True, loop breaks.
REMARK: Use an Until-Loop to guarantee the loop code will run once.
    Use a While-Loop if you don't want the loop code to run once.
EX: Loop                    ; Start loop
        MsgBox, % A_Index   ; Show each A_Index iteration
    Until (A_Index >= 10)   ; Break when A_Index >= 10

While (Expression) 
USE: Loops through code while Expression evaluates as False.
REMARK: Use an Until-Loop to guarantee the loop code will run once.
    Use a While-Loop if you don't want the loop code to run once.
EX: While (A_Index <= 5)
        MsgBox, % "Iteration #" A_Index


### =============== OPERATORS ===============

## ======== General ========

, 
USE: Multiple Expressions, Separate Fields/Params
EX: x:=Mod(8,3), y:=2, z:=x+y ; Multiple expressions


## ======== Assignment ========

:= 
USE: Assign to
EX: x:=7 ; x => 7

+= 
USE: Add then assign
EX: x:=5, x+=2 ; x => 7

-= 
USE: Subtract then assign 
EX: x:=9, x-=2 ; x => 7

*= 
USE: Multiply then assign
EX: x:=2, x*=4 ; x => 8

/= 
USE: Divide then assign
EX: x:=5, x//=2 ; x => 2.5

//= 
USE: Floor divide then assign
EX: x:=5, x//=2 ; x => 2

.= 
USE: Append to
EX: x:="A", x.="Z" ; x => AZ

|= 
USE: Bitwise OR then assign
EX: x:=y:=1, x^=y ; x => True

&= 
USE: Bitwise AND then assign
EX: x:=y:=1, x&=y ; x => True

^= 
USE: Bitwise XOR then assign
EX: x:=y:=1, x^=y ; x => False

>>= 
USE: Bit shift right then assign
EX: x:=4, x>>=1 ; x => 2

<<= 
USE: Bit shift left then assign
EX: x:=4, x<<=1 ; x => 8


## ======== Math ========

+ 
USE: Add
EX: x:=2+3 ; x => 5

- 
USE: Subtract, Negative Number
EX: x:=9-2 ; x => 7

* 
USE: Multiply, Variadic Func, Deref
EX: x:=3*4 ; x => 6

** 
USE: Exponential
EX: x:=2**4 ; x => 16

/ 
USE: Divide
EX: x:=5/2 ; x => 2.5

// 
USE: Floor Divide
EX: x:=5/2 ; x => 2

++ 
USE: Increment Number by 1
EX: x:=8, ++x ; x => 9

-- 
USE: Decrement Number by 1
EX: x:=8, --x ; x => 7


## ======== Bitwise ========

& 
USE: Bitwise AND, Address Ref, 
EX: (1 & 1) ;=> 1 (True)
    NumGet(&var,0,"Int") ; Address    

^ 
USE: Bitwise XOR
EX: (0 ^ 1) ;=> 1 (True)

| 
USE: Bitwise OR
EX: x:=1, x:=x|1 ; x => True

~ 
USE: Bitwise NOT
EX: ~0xFFFF0000 ; x => 65535

<< 
USE: Bit shift left
EX: x:=4, y:=x<<1 ; x => 8

>> 
USE: Bit shift right
EX: x:=4, x:=x>>1 ; x => 2


## ======== Variable ========

ByRef 
USE: Access variable by address
EX: Func(ByRef x) ; Changes to var are permanent

New 
USE: New item|object
EX: x := new Class ; Creates a new class object


## ======== Comparison ========

= 
USE: Equal
EX: if (7 = 7) ; True

== 
USE: Case sensitive equal
EX: if ("Dog" == "dog") ; False

!= 
USE: Not equal
EX: if (2 !=0) ; True

<> 
DEPRECATED: Use !=
USE: Not equal

< 
USE: Less than
EX: if (1 < 3) ; True

<= 
USE: Less than or equal
EX: if (2 <= 2) ; True

> 
USE: Greater than
EX: if (2 > 0) ; True

>= 
USE: Greater than or equal
EX: if (2 >= 2) ; True

~= 
USE: RegEx Match
EX: ("a1b" ~= "\d") ; True

AND 
USE: Logical AND
EX: if (7 = 7) AND (1 != 0) ; True

&& 
USE: Logical AND
EX: If (2>1) && (3<8) ;=> True

OR 
USE: Logical OR
EX: if (7 = 7) OR (7 = 8) ; True

|| 
USE: Logical OR
EX: if (7 = 7) || (7 = 8) ; True

NOT 
USE: Logical NOT
EX: if NOT (False) ; True

! 
USE: Not
EX: y:=True, x:=!y ; x => False


## ======== Ternary ========

? 
USE: Ternary if
Ex: (10>1 ? True: False) ; Ternary

: 
USE: Ternary Else, Pair Separator
Ex: (10>1 ? True : False) ; Ternary
    {key : value}         ; Object Pair



### =============== DECLARATIONS ===============

Class 
USE: Declare new class
EX: Class myClass

Extends 
USE: Inherit Base Class
EX: Class myClass Extends baseClass

Global 
USE: Permanent public variable
EX: Global Var := 0

Local 
USE: Temporary private function variable
EX: Local Var := 0

Static 
USE: Permanent private function variable
EX: Static Var := 0


### =============== COMMANDS ===============

AutoTrim, On|Off 
USE: Controls if whitespace is trimmed from the beginning|end of traditional variables.
ONOFF: On|1 = Trim whitespace    Off|0 = Don't trim whitespace
REMARK: A_AutoTrim contains this commands current setting.

BlockInput, Mode 
USE: Enable and disable keyboard, mouse, and|or mouse movement.
MODE1: Keyboard and mouse.    On = Enable    Off = Disable
MODE2: During send and|or mouse events.
    Send  = Disable during Send|SendRaw.
    Mouse = Disable during Click|MouseMove|MouseClick|MouseDrag.
    SendAndMouse = Send mode + mouse mode.
    Default = Disable all other modes.
MODE3: Mouse movement.    MouseMove = Disable    MouseMoveOff = Enable
REMARK: Each mode operates independently of the others.

Click, [Button:=Left, X, Y, Count:=1, State, Relative|Rel] 
USE: Send different mouse button events.
BUTTON: Left|Right|Middle|X1|X2|WU|WD|WR|WL    X|Y: Click coordinates
STATE: Down|D=Held down    Up|U=Released       COUNT: Number of clicks
RELATIVE: Movement is relative to mouse position.
REMARK: Unlike most commands, blank params do not require a comma.
    Click can be used with send: Send, {Click, Left, 2}
EX: Click, Left, 50, -50, 2, Rel ; Double click 50 pixels right and
                                 ; and 50 pixels up from cursor.

ClipWait, [SecToWait:=Indefinitely, DataType:=0] 
USE: Waits until the clipboard contains data.
SECTOWAIT: Seconds to wait for the clipboard.
    0 = .5 seconds    1+ = Seconds
DATATYPE: 0 = Wait for text    1 = Wait for any binary data
ErrorLevel: 0 = Success. 1 = SecToWait expired.

Control 
Control, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Used to manipulate controls.
SUBCOMMANDS: 
    Check = Check radio button|checkbox     Uncheck = Uncheck radio button|checkbox
    Enable = Enable control                 Disable = Disable control
    Show = Make control visible             Hide = Hide control
    Style = Apply style to control          ExStyle = Apply ex style to control
    ShowDropDown = Show ComboBox DDL        HideDropDown = Hide ComboBox DDL
    TabLeft = Go left X tabs                TabRight = Go right X tabs
    Add = Add to bottom of ListBox|ComboBox Delete = Remove Nth ListBox|ComboBox entry
    Choose = Select Nth ListBox|ComboBox    EditPaste = Paste at edit box caret
    ChooseString = Select first ListBox|ComboBox entry to match String
CONTROL: Name or text of control. HWND control is done through WinTitle.
WINTITLE: Standard WinTitle matching. For a handle, use: ahk_id %HWND%
ErrorLevel+EXO: 0 = Success. 1 = Failure.

Control, Check, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Turns on|checks a radio button or checkbox.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Check, , GuiCheck1, ahk_exe MyProg.exe

Control, Uncheck, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Turns off a radio button or checkbox.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Uncheck, , GuiCheck1, ahk_exe MyProg.exe

Control, Enable, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Enables a disabled control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Enable, , GuiBtn1, ahk_exe MyProg.exe

Control, Disable, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Disables|grays out an enabled control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Disable, , GuiBtn1, ahk_exe MyProg.exe

Control, Show, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Shows a previously hidden control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Show, , GuiBtn1, ahk_exe MyProg.exe

Control, Hide, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Hides a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Hide, , GuiBtn1, ahk_exe MyProg.exe

Control, Style, Hex, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Changes the style of a control.
HEX: A style hex Num.
     Num: Set to style Num              -Num: Remove style Num from control
    ^Num: Toggle control's style        +Num: Add style Num to control
REMARK: Some style changes require a redraw. See: WinSet, Redraw
CHEAT: See Cheat_Styles
ErrorLevel+EXO: 0 = Success. 1 = Window not found or style can't be applied.
EX: Control, Style, 0x200, GuiBtn1, ahk_exe MyProg.exe

Control, ExStyle, Hex, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Changes the extended style of a control.
HEX: A extended style hex Num.
    Num: Set to style Num               -Num: Remove style Num from control
    ^Num: Toggle control's style        +Num: Add style Num to control
REMARK: Some style changes require a redraw. See: WinSet, Redraw.
CHEAT: See Cheat_Styles
ErrorLevel+EXO: 0 = Success. 1 = Window not found or style can't be applied.
EX: Control, ExStyle, 0x200, GuiBtn1, ahk_exe MyProg.exe

Control, ShowDropDown, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Shows the drop-down list of a ComboBox control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, ShowDropDown, , Combo1, ahk_exe MyProg.exe

Control, HideDropDown, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Hides the drop-down list of a ComboBox control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, HideDropDown, , Combo1, ahk_exe MyProg.exe

Control, TabLeft, [Count, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Moves a SysTabControl32 tab to the left.
COUNT: Number of tabs to move left.
REMARK: To select a tab by number, see: SendMessage with 0x1330 and 0x130C
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, TabLeft, 3, GuiTabs, ahk_exe MyProg.exe

Control, TabRight, [Count, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Moves a SysTabControl32 tab to the right.
COUNT: Number of tabs to move right.
REMARK: To select a tab by number, see: SendMessage with 0x1330 and 0x130C
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, TabRight, 3, GuiTabs, ahk_exe MyProg.exe

Control, Add, String, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Add a new entry to the bottom of a ListBox|ComboBox
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Add, String, ComboBox2, ahk_exe MyProg.exe

Control, Delete, N, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Deletes the Nth entry from a ListBox|ComboBox
N: Number of control to delete. 1=First    2=Second   etc...
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Delete, 10, ComboBox2, ahk_exe MyProg.exe

Control, Choose, N, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Sets the selection in a ListBox|ComboBox to be the Nth entry.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, Choose, 2, ListBox1, ahk_exe MyProg.exe

Control, ChooseString, String, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Searches a ListBox|ComboBox and selects the first matching entry.
STRING: The string to search for inside the ListBox|ComboBox.
REMARK: This is not case sensitive.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, ChooseString, ListBox1, ahk_exe MyProg.exe

Control, EditPaste, String, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Inserts String into an Edit control at the caret.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Control, EditPaste, String, Edit1, ahk_exe MyProg.exe

ControlClick, [Control|Pos, WinTitle, WinText, Button, Count, Options, NotTitle, NotText] 
USE: Sends a mouse event directly to a control.
CONTROL: Name|Text of control. Uses SetTitleMatchMode.
BUTTON: LEFT|RIGHT|MIDDLE|X1|X2|WU|WD|WL|WR    COUNT: Number of clicks
POS: Use xNum yNum for coord position. Uses: CoordMode, Mouse
OPTIONS: A space separated string of the following:
    D|U = Set button to down|up state       Pos = Prioritize POS over Control
    NA = Can improve reliability
    Xn|Yn = Sets x|y coordinate to click. Relative to control's upper-left corner.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlClick, x10 y10, ahk_exe MyProg.exe, , Left, 2, NA Pos

ControlFocus, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Sets focus to the specified control.
CONTROL: Name|Text of control. Uses SetTitleMatchMode.
REMARK: If Control is blank, the window's top most control is used.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlFocus, Btn1, ahk_exe MyProg.exe

ControlGet 
ControlGet, OutputVar, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Retrieves various types of information about a control.
SUBCOMMAND:
    HWND = Get control handle.                  Checked = 1=Checked    0=Not checked
    Choice = Get selected ListBox|ComboBox      Visible = 1=Visible    0=Not visible
    Tab = Get SysTabControl32 tab number        Enabled = 1=Enabled    0=Not enabled
    Line = Get text of Edit control line        Selected = Get Edit control selected text
    CurrentCol = Get col number of Edit caret   CurrentLine = Get line number of Edit caret
    LineCount = Get number of Edit control lines
    List = Get list from: ListView|ListBox|ComboBox|DropDownList
    Style|ExStyle = Get 8-digit hex number for the control's Style|ExStyle
    FindString = Get number of ListBox|ComboBox that exactly matches string Value
ErrorLevel+EXO: 0 = Success. 1 = Failure.

ControlGet,List 
ControlGet, OutputVar, List, [Options, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Retrieves a list of items from a ListView|ListBox|ComboBox|DropDownList.
OPTIONS: BLANK = All text. Lines are Linefeed separated. Fields are tab separated
    These options only apply to ListView. Space|Tab separated
    Selected = Get selected rows. BLANK = None
    Focused = Get focused row. BLANK = None
    ColN = Get Nth column instead of all
    Count = Get number of rows in control
    Count Selected = Get number of selected rows in control
    Count Focused = Get number of focused row. 0 if none
    Count Col = Get number of columns in control. -1 = Undetermined
ErrorLevel+EXO: 0 = Success. 1 = Failure and OutputVar is BLANK.
EX: ControlGet, LVList, List,, LV1, ahk_exe MyProg.exe

ControlGet,Checked 
ControlGet, OutputVar, Checked, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Check to see if a radio button|checkbox is checked.
OUTPUTVAR: 1 = Checked    0 = Not checked
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, radio2_2, Checked,, Radio22, ahk_exe MyProg.exe

ControlGet,Enabled 
ControlGet, OutputVar, Enabled, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Check if a control is enabled.
OUTPUTVAR: 1 = Enabled    0 = Disabled
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, BtnStatus, Enabled,, Btn1, ahk_exe MyProg.exe

ControlGet,Visible 
ControlGet, OutputVar, Visible , [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Check if a control is visible.
OUTPUTVAR: 1 = Visible    0 = Hidden
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, btnVisState, Visible,, Btn1, ahk_exe MyProg.exe

ControlGet,Tab 
ControlGet, OutputVar, Tab, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the tab number of a control.
OUTPUTVAR: 1 = Tab 1    2 = Tab 2    Etc...
REMARK: To get total tabs, see: SendMessage, 0x1304
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, thisTab, Tab,, Btn1, ahk_exe MyProg.exe

ControlGet,FindString 
ControlGet, OutputVar, FindString, String [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get entry number of ListBox|ComboBox that matches String.
OUTPUTVAR: Number of matching entry.
ErrorLevel+EXO: 0 = Success. 1 = Failure and OutputVar is BLANK.
EX: ControlGet, lbNum, FindString, AutoHotkey, LB1, ahk_exe MyProg.exe

ControlGet,Choice 
ControlGet, OutputVar, Choice, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the name of the selected ListBox|ComboBox entry.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, cbActiveItem, Choice ,, CB1, ahk_exe MyProg.exe

ControlGet,LineCount 
ControlGet, OutputVar, LineCount, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get number of lines in an Edit control.
REMARK: An empty control still has 1 line.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, editLineNum, LineCount, , Edit2, ahk_exe MyProg.exe

ControlGet,CurrentLine 
ControlGet, OutputVar, CurrentLine, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the line number of the caret in an Edit control.
REMARK: If text is highlighted, line of highlight start is used.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, edit1Caret, CurrentLine, , Edit2, ahk_exe MyProg.exe

ControlGet,CurrentCol 
ControlGet, OutputVar, CurrentCol, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the col number of the caret in an Edit control.
REMARK: If text is highlighted, col of highlight start is used.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, edit1Caret, CurrentCol, , Edit2, ahk_exe MyProg.exe

ControlGet,Line 
ControlGet, OutputVar, Line, N [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get Nth line of text from an Edit control.
ErrorLevel+EXO: 0 = Success. 1 = Failure|line not exist. OutputVar = BLANK.
EX: ControlGet, editLineInfo, Line, 5, Edit2, ahk_exe MyProg.exe

ControlGet,Selected 
ControlGet, OutputVar, Selected, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get selected text from an Edit control.
REMARK: If no text is selected, ErrorLevel = 0 and OutputVar = BLANK
ErrorLevel+EXO: 0 = Success. 1 = Failure|no text selected.
EX: ControlGet, editSelected, Selected, , Edit2, ahk_exe MyProg.exe

ControlGet,Style 
ControlGet, OutputVar, Style, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the 8-digit hex number of the control's style.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
CHEAT: See Cheat_Styles
EX: ControlGet, btnStyle, Style, , btn2, ahk_exe MyProg.exe

ControlGet,ExStyle 
ControlGet, OutputVar, ExStyle, [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the 8-digit hex number of the control's extended style.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
CHEAT: See Cheat_Styles
EX: ControlGet, btnExStyle, ExStyle, , btn2, ahk_exe MyProg.exe

ControlGet,HWND 
ControlGet, OutputVar, HWND , [, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the handle (HWND) of the control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGet, gui2Btn2HWND, HWND, , btn2, ahk_exe MyProg.exe

ControlGetFocus, OutputVar [, WinTitle, WinText, NotTitle, NotText] 
USE: Get the identifier of the control that currently has focus. If any.
ErrorLevel+EXO: 0 = Focused control found. 1 = Failure.
EX: ControlGetFocus, conFocusName, ahk_exe MyProg.exe

ControlGetPos, [outX, outY, outW, outH, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get the X|Y coordinates, height, and width of a control.
OUT: Output variables for XY coords and width|height.
REMARK: Output will be BLANK if no window or control is found.
EX: ControlGetPos, x, y, w, h, btn1, ahk_exe MyProg.exe

ControlGetText, OutputVar, [Control, WinTitle, WinText, NotTitle, NotText] 
USE: Get text from a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlGetText, ddlTxt, DDL1, ahk_exe MyProg.exe

ControlMove, Control, X, Y, Width, Height, [WinTitle, WinText, NotTitle, NotText] 
USE: Moves or resizes a control.
X|Y|Width|Height: Set the X|Y coords and the Width|Height of the control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlMove, Btn1, 10, 10, 50, 25, ahk_exe MyProg.exe

ControlSend, [Control, Keys, WinTitle, WinText, NotTitle, NotText] 
USE: Sends simulated keystrokes directly to a window or control.
KEYS: Keys to send. Use same syntax as a Send field.
REMARK: ahk_parent sends keys directly to the window instead of a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlSend,, SciTE, ahk_exe MyProg.exe

ControlSendRaw, [Control, Keys, WinTitle, WinText, NotTitle, NotText] 
USE: Sends simulated keystrokes directly to a window or control.
KEYS: Keys to send. Text is sent as typed. Same as: Send, {Raw}
REMARK: ahk_parent sends keys directly to the window instead of a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlSend, Edit1, Some Text, ahk_exe MyProg.exe

ControlSetText, [Control, NewText, WinTitle, WinText, NotTitle, NotText] 
USE: Update a control's text to NewText.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: ControlSetText, Edit1, SciTE, ahk_exe MyProg.exe

CoordMode, Type, [Area := Screen] 
USE: Sets which corner x0 y0 starts at.
TYPE: What each type affects:
    Tooltip = Tooltip
    Caret   = A_CaretX|A_CaretY
    Menu    = Menu Show command
    Pixel   = PixelGetColor|PixelSearch|ImageSearch
    Mouse   = MouseGetPos|Click|MouseClick|MouseDrag|MouseMove
AREA:
    Screen = Entire screen/desktop.
    Window = Whole window including OS Menu|TitleBar|Borders
    Client = Program area. Does not include OS Menu|TitleBar|Borders
EX: CoordMode, Mouse, Relative

Critical, [State] 
USE: Prevents or enables interruption of the current thread.
STATE:
    ON  = Thread is critical and cannot be interrupted.
    OFF = Thread is not critical and can be interrupted.
    N   = Thread is critical. Check message queue every N milliseconds.

DetectHiddenText, On|Off 
USE: Hidden text in a window can|cannot be seen by the script.
ON|OFF: 1 and 0 can be used.

DetectHiddenWindows, On|Off 
USE: Hidden windows can|cannot be seen by the script.
ON|OFF: 1 and 0 can be used.

Drive 
Drive, SubCommand, [DriveLetter, Value2] 
USE: Optical drive commands.
SUBCOMMANDS:
    Eject = Ejects drive                Label = Rename drive label
    Lock = Disables drive eject         Unlock = Enables drive eject
ErrorLevel+EXO: 0 = Success. 1 = Failure.

Drive, Label, DriveLetter, [NewLabel] 
USE: Changes the Label of DriveLetter.
DRIVELETTER: Drive's letter followed by a colon.
NEWLABEL: If BLANK, drive will have no label.
REMARK: To get current label, use: DriveGet, OutputVar, Label, DriveLetter
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: Drive, Label, C:, GroggyDrive

Drive, Lock, DriveLetter 
USE: Disable a drive's ability to eject.
DRIVELETTER: Drive's letter followed by a colon.
REMARK: Has no effect on drives that do not support locking
ErrorLevel+EXO: 0 = Success. 1 = Failure|Drive not Exist|Drive not lockable

Drive, Unlock, DriveLetter 
USE: Enable a drive's ability to eject.
DRIVELETTER: Drive's letter followed by a colon.
REMARK: Has no effect on drives that do not support locking
    Some drives may need multiple unlocks if multiple locks were issued.
ErrorLevel+EXO: 0 = Success. 1 = Failure.

Drive, Eject, [DriveLetter, Open] 
USE: Eject|retracts the tray of an optical drive.
DRIVELETTER: Drive's letter followed by a colon. If omitted, use default drive.
OPEN: 1 = Retract drive. BLANK = Eject drive.
REMARK: Ejecting other media has to be done through DllCalls. See docs.

DriveGet 
DriveGet, OutputVar, SubCommand, [Value]
USE: Retrieves various types of information about the computer's drives.
SUBCOMMANDS:
    Status = Get path's status          List = Get string of drive letters
    Type = Get path's drive type        Capacity = Get path's capacity in MB
    Label = Get drive's volume label    StatusCD = Get optical drive status
    FileSystem = Get file system type of drive
    Serial = Get drive's volume serial number
ErrorLevel+EXO: 0 = Success. 1 = Failure.

DriveGet, OutputVar, List, [Type] 
USE: Returns a string of system drive letters.
TYPE: If omitted, all drives are retrieved. Otherwise:
    CDROM|REMOVABLE|FIXED|NETWORK|RAMDISK|UNKNOWN
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, driveLetters, List, [Type] ; V=> CDEFXYZ

DriveGet, OutputVar, Cap|Capacity, Path 
USE: Get the total capacity of Path in megabytes.
PATH: Drive path.
REMARK: If you need to get free space, use: DriveSpaceFree
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, driveCap, Cap, C:\ ; V=> 228740

DriveGet, OutputVar, FS|FileSystem, Drive 
USE: Get the type of file system used by Drive.
DRIVE: Drive letter or UNC
    C:      Z:\     \\Server1\Share
OUTPUTVAR: File system types: FAT|FAT32|NTFS|CDFS|UDF
ErrorLevel+EXO: 0 = Success. 1 = Failure. BLANK = Drive has no formatted media.
EX: DriveGet, driveFsType, FS, C: ; V=> NTFS

DriveGet, OutputVar, Label, Drive 
USE: Get volume label of Drive.
DRIVE: Drive letter or UNC
    C:      Z:\     \\Server1\Share
REMARK: To change the drive's label, see: Drive, Label
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, driveLabel, Label, c:\ ; V=> GroggyDrive

DriveGet, OutputVar, Serial, Drive 
USE: Get the volume serial number for Drive.
OUTPUTVAR: Output is a decimal integer.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, driveSerial, Serial, Drive ; V=> 2151283365

DriveGet, OutputVar, Type, Path 
USE: Get the drive type of Path.
OUTPUTVAR: Removable|Fixed|Network|CDROM|RAMDisk|Unknown
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, driveType, Type, C:\ ; V=> Fixed

DriveGet, OutputVar, Status, Path 
USE: Retrieves Path's status.
OUTPUTVAR: Status types: Unknown(Possibly RAW)|Ready|NotReady|Invalid
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, driveStatus, Status, C: ; V=> Ready

DriveGet, OutputVar, StatusCD, [DriveLetter] 
USE: Get the status of an optical drive.
OUTPUTVAR: Not Ready|Open|Playing|Paused|Seeking|Stopped
    BLANK = Status indeterminable
DRIVELETTER: Drive's letter followed by a colon. If omitted, use default drive.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: DriveGet, dvdStatus, StatusCD, E: ; V=> Stopped

DriveSpaceFree, OutputVar, Path 
USE: Get Drive's free disk space in megabytes.
EX: DriveSpaceFree, freeSpace, C: ; V=> 147455

Edit 
USE: Open current script in the associated editor.
REMARK: Edit association is a registry setting.
    See: HKCR\AutoHotkeyScript\Shell\Edit\Command

EnvAdd, Var, Value, [TimeUnit] 
USE: Add Value to Var. Store results in Var.
VAR: Variable to operate on.
VALUE: Number. Integer, float, or expression.
TIMEUNITS: If Var is an empty variable, A_Now is used.
    Types = S|Seconds    M|Minutes    H|Hours    D|Days
    If present, Var is treated as a YYYYMMDDHH24MISS timestamp
REMARK: To subtract a number, use a negative Value. 
    Synonymous with: Var += Value
EX: var := A_Now       ; Set var to time right now and add 50 days
    EnvAdd, Var, 50, D ; V=> 20181007022250

EnvDiv, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACMENET: Use a regular expression: Var := Var / Value OR Var2 /= Value

EnvGet, OutputVar, EnvName 
USE: Get an environment variable.
ENVNAME: Name of environmental variable.
EX: EnvGet, OutputVar, ProgramW6432 ; Gets the x64 program files directory

EnvMult, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts. 
REPLACMENET: Use a regular expression: Var := Var * Value OR Var2 *= Value

EnvSet, EnvVar, Value 
USE: Writes a value to a variable contained in the environment.
REMARK: Windows limits environment variables to 32 KB of text.
ErrorLevel+EXO: 0 = Success. 1 = Failure.

EnvSub, Var, Value, [TimeUnit] 
USE: Subtract Value from Var. Stores result in Var.
TIMEUNIT: When present, Var & Value are both treated as YYYYMMDDHH24MISS
    If either are blank, A_Now is used.
REMARK: If Var returns BLANK, it's because:
    Invalid timestamp.  Year is before 1601.  Value not a number.
EX: utc := A_NowUTC, loc := A_Now ; Set local and UTC times
    EnvSub, loc, % utc, H         ; Get the difference between the two

EnvUpdate 
USE: Notify OS and all running apps an environment variable has changed.
ErrorLevel+EXO: 0 = Success. 1 = Failure.

ExitApp, [ExitCode] 
USE: Shuts down and closes script.
EXITCODE: Number. -2147483648 .. 2147483647
REMARK: Immediately terminates script. Runs OnExit functions if present.

FileAppend, [Text, *|[*]Filename, Encoding] 
USE: Writes text to the end of a file. Creates file if one doesn't exist.
FILENAME: Name of the file to write to.
    * Prefix: Writes CR+LF as LF
    * : Using just * sends text to StdOut
ENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn
REMARK: For continuous writing, consider FileOpen()
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileAppend, % "Hello World!", C:\Text.txt, UTF-16

FileCopy, Source, Destination, [Overwrite:=0] 
USE: Copy one or more files to Destination.
SOURCE: The path of a file or folder. Wildcards are allowed.
DESTINATION: The path of a file or folder to copy to.
OVERWRITE: 1 = Overwrite    0 = Do not overwrite
REMARK: This is for files only. For whole directors, see: FileCopyDir
ErrorLevel+EXO: 0 = Success. 1+ = Number of files that failed to copy.
EX: FileCopy, D:\Scripts\*.ahk, E:\Backup, 1 ; Backup all AHK scripts

FileCopyDir, Source, Destination, [Overwrite:=0] 
USE: Copy folder, and optionally subfolders, to Destination.
SOURCE: Path to source directory. No trailing backslash.
DESTINATION: Path to destination directory. No trailing backslash.
OVERWRITE: 1 = Overwrite. 0 = Do not overwrite.
REMARK: If the folder structure doesn't exist, it will be created.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileCopyDir, D:\Scripts, E:\Backup, 1 ; Backup Scripts folder

FileCreateDir, DirName 
USE: Creates a directory/folder .
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileCreateDir, C:\TestFolder

FileCreateShortcut, Target, Link, [Dir, Args, Desc, Icon, Shortcut, IconNum, State] 
USE: Creates a shortcut (.lnk) file to Target with.
TARGET: File to make shortcut for       LINK: Path and name of shortcut
DIR: Provide an working directory       ARGS: Space separated args for Target
DESC: Shortcut description              SHORTCUT: Single letter hotkey
ICON: Path to shortcut's icon           ICONNUM: Icon number if icon file
STATE: 1 = Normal  3 = Maximized  7 = Minimized
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileCreateShortcut, C:\Windows\Explorer, % A_Desktop "\Explorer.lnk"

FileDelete, FilePattern 
USE: Deletes one or more files.
FILEPATTERN: Path to a file. Wildcards allowed.
ErrorLevel+EXO: 0 = Success. 1+ = Number of files failed to be deleted.
EX: FileDelete, % A_Desktop "\TestFile.txt"

FileEncoding, [Encoding] 
USE: Sets default encoding for the following:
    FileRead    FileReadLine    Loop-Read    FileAppend    FileOpen
ENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn
EX: FileEncoding, UTF-8

FileGetAttrib, OutputVar, [Filename] 
USE: Get attributes of a file.
OUTPUTVAR: String. D|O|N|T|C|R|A|S|H|X|BLANK
    D = Directory     O = Offline     N = Normal     T = Temporary
    C = Compressed    R = ReadOnly    A = Archive    S = System
    H = Hidden        X = No Attr     BLANK = No file found
FILENAME: Path and file to get attributes from.
REMARK: Remember: DONT CRASH X
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileGetAttrib, fileAttribs, % A_ScriptFullPath ; Get current scripts attributes

FileGetShortcut, Link, [OutTarget, OutDir, OutArgs, OutDesc, OutIcon, OutIconNum, OutState] 
USE: Retrieves information about a shortcut (.lnk) file.
LINK: Path to the shortcut
OUT: Variables to store all the data from the shortcut
    OutTarget = Target's path           OutArgs = Shortcut's arguments
    OutDesc = Shortcut's description    OutDir = Target working directory
    OutIcon = Path to shortcut's icon   OutIconNum = Shortcut's 
    OutState = 1 = Normal  3 = Maximized  7 = Minimized
REMARK: Any Out variable can be omitted.
ErrorLevel+EXO: 0 = Success. 1 = Failure and all Out files = BLANK.
EX: FileGetShortcut, C:\test.lnk, outTar, outDir, , , OutIcon

FileGetSize, OutputVar, [Filename, Units] 
USE: Get the size of a file. 
UNITS: BLANK = Bytes. K = Kilobytes. M = Megabytes.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileGetSize, scriptSize, % A_ScriptFullPath, K ; V=> 2

FileGetTime, OutputVar, [Filename, TimeType:=M] 
USE: Get the date timestamp of a file or folder in YYYYMMDDHH24MISS format.
TIMETYPE: Type of timestamp to retrieve:
    M = Modification time    C = Creation time    A = Last access time
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileGetTime, fileModTime, C:\Test.txt, M ; Get modification time of test.txt

FileGetVersion, OutputVar, [Filename] 
USE: Retrieves the version of a file.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
REMARK: If file has no version, OutputVar is BLANK.
EX: FileGetVersion, fileVer, C:\Windows\Explorer.exe ; V=> 6.1.7601.23537

FileInstall, Source, Dest, [Overwrite:=0] 
USE: Includes files inside of a compiled exe.
SOURCE: Path to the file to include.
    Path must not contain double quotes, variable references, or wildcards.
DEST: Destination to put source on file extraction
    Unlike source, this path can use variable references.
OVERWRITE: 1 = Overwrite. 0 = Do not overwrite.
REMARK: Uncompiled files perform a simple copy. This makes testing much easier.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileInstall, icon.ico, % A_AppData "\MyProgFiles\", 1

FileMove, Source, Dest, [Overwrite] 
USE: Move or rename file(s).
SOURCE: The path to a file. Wildcards allowed.
DEST: path to destination.
OVERWRITE: 1 = Overwrite. 0 = Do not overwrite.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileMove, C:\Test.txt, C:\Test.ahk, 1 ; Rename test.txt to test.ahk

FileMoveDir, Source, Dest, [Flag:=0] 
USE: Move|rename a folder and it's sub-folders and files.
SOURCE: Name of the source directory. No trailing spaces.
DEST: New path and name of directory. No trailing spaces.
FLAG: One of the following single characters:
    0 = Do not overwrite existing files.
    1 = Overwrite existing files.
    2 = Same as 1 except prevents a known limitation. See the docs.
    R = Rename directory instead of moving it. 
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileMoveDir, D:\Scripts, D:\Backup, 1 ; Backup scripts dir

FileRead, OutputVar, Filename 
USE: Reads a file's contents into a variable.
FILENAME: Name of file that can include the following prefixed options:
    *c: Load binary data like ClipboardAll
    *mN: Max file size in N bytes
    *t: Replaces CR+LF with LF. 
    *Pnnn: Set FileEncoding identifier where nnn = numeric code page identifier.
REMARK: If file greater than 1 GB, ErrorLevel = 1 and OutputVar = BLANK
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileRead, txtVar, C:\Test.txt

FileReadLine, OutputVar, Filename, LineNum 
USE: Read a line of text from a file into a variable.
REMARK: Used for small files. For large files, see: FileRead() or Loop-Files
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileReadLine, txtVar, C:\Test.txt, 2

FileRecycle, FilePattern 
USE: Sends a file or directory to the recycle bin, if possible.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileRecycle, C:\Test.txt

FileRecycleEmpty, [DriveLetter] 
USE: Empties the recycle bin of all files.
DRIVELETTER: If specified, only recycles files from that drive letter.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileRecycleEmpty, C:

FileRemoveDir, DirName, [Recurse:=0] 
USE: Deletes a folder.
RECURSE: Choose to recursively remove files/folders from subdirectories
    0 = Remove directory if no files or subdirectories exist.
    1 = Recursively removes all files and directories, too.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileRemoveDir, D:\TestFolder, 1

FileSelectFile, OutputVar, [Options:=0, Path, Prompt, Filter] 
USE: Displays an interface for the user to select a file|files.
OPTIONS: Choose one: S = Changes Open to Save    M = Select multiple files  
    Include these with S, M, or by themselves. Add desired values together.
        +1 =  File Must Exist           +2 =  Path Must Exist
        +8 =  Create New File Prompt   +16 =  Prompt to Overwrite File
       +32 =  Shortcuts use their own path and don't resolve to their targets.
PATH: A directory, filename, or CLSID dialog starts at.
PROMPT: Dialog window's title.
FILTER: Filter file extensions. Format: Title(*.ext1; *.ext2; *.ext3; ...)
ErrorLevel+EXO: 0 = Success. 1 = Failure.
CHEAT: Cheat_CLSID_List
EX: FileSelectFile, OutputVar, S27, D:\Scripts,, Text (*.txt; *.ahk)

FileSelectFolder, OutputVar, [Path, Options:=1, Prompt] 
USE: Displays an interface for the user to select a folder from Path.
PATH: A directory or CLSID to start at. An * can be prefixed to the path.
    * indicates user can navigate upward toward root.
    Without this, the user must choose Path or a directory in Path.
OPTIONS: Use sum of desired options
     0 = All options disabled
    +1 = Allowed to create new folder
    +2 = Enable edit bar for user to type/paste folder path 
    +4 = Omit the BIF_NEWDIALOGSTYLE property
PROMPT: Dialog prompt.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
CHEAT: Cheat_CLSID_List
EX: FileSelectFolder, folderPath, c:\, 3, Pick a folder

FileSetAttrib, Attributes, [Path, Operate:=0, Recurse] 
USE: Set attributes of one or more files|folders.
ATTRIBUTES: Operators: +=Add    -=Remove    ^=Toggle
    Attributes: D|O|N|T|C|R|A|S|H|X|BLANK
    D = Directory     O = Offline     N = Normal     T = Temporary
    C = Compressed    R = ReadOnly    A = Archive    S = System
    H = Hidden        X = No Attr     BLANK = No file found
PATH: Path to a file or folder. Wildcards are allowed.
OPERATE: 0 = Only files    1 = Files and folders that match    2 = Only folders 
RECURSE: 0 = No recursion    1 = Recurse into subdirectories
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileSetAttrib, +RC-O, [Path, Operate:=0, Recurse] 

FileSetTime, [DTS, Path, TimeType, Operate, Recurse] 
USE: Change the date timestamp of one or more files|folders.
PATH: Path to a file or folder. Wildcards are allowed.
DTS: Date-timestamp. Format: YYYYMMDDHH24MISS
TIMETYPE: Timestamp type to alter:
    M = Modification time    C = Creation time    A = Last access time
OPERATE: 0 = Only files      1 = Files & folders that match    2 = Only folders 
RECURSE: 0 = No recursion    1 = Recurse into subfolders
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: FileSetTime, 20181007045200, C:\Test.txt, C, 1, 0

FormatTime, OutputVar, [DTS := A_Now, Format := BLANK] 
USE: Transform a YYYYMMDDHH24MISS date-timestamp into a custom Format.
FORMAT: A string of characters, spacing, and any punctuation you want.
    Year:   y = 0-99    yy = 00-99    yyyy = 2018       gg = B.C. A.D. etc.
    Month:  M = 1-12    MM = 01-12    MMM  = Jan-Dec    MMMM = January-December
    Day:    d = 1-31    dd = 01-31    ddd  = Sun-Sat    dddd = Sunday-Saturday
    Hour:   H = 0-24    HH = 00-24    h    = 1-12       hh = 01-12
    Minute: m = 0-59    mm = 00-59
    Second: s = 0-59    ss = 00-59
    Period: t = A-P     tt = AM-PM
    STANDALONE: Alternately, use a preset. Uses locale (Window's format)
    Time  = Hour:Minute [Period]        LongDate  = dddd, MMMM Day, yyyy
    BLANK = Time LongDate               ShortDate = Month/Day/Year
    YearMonth = MMMM, yyyy              
    YDay  = Day of year. 1-366          YDay0     = Day of year. 001-366
    YWeek = Year and week number        WDay  = Day of week. 1-7. 1=Sunday
ErrorLevel+EXO: 0 = Success. 1 = Failure.
CHEAT: There are too many options to list. See: Cheat_FormatTime
EX: FormatTime, timeF, % A_Now, HH:mm dddd, MMMM dd, yyyy ; Same as A_Now

GetKeyState, OutputVar, KeyName [, Mode] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: This is now a function instead of a command. Use: GetKeyState()

GroupActivate, GroupName, [Mode:=""] 
USE: Activates the next window in a window group.
GROUPNAME: A defined list of windows. See: GroupAdd
MODE: R = Activate last active window    BLANK = Activate oldest window
EX: GroupActivate, tabGroup, R

GroupAdd, GroupName, [WinTitle, WinText, Label, NotTitle, NotText] 
USE: Adds matching window to GroupName.
LABEL: A label to run if no window is matched.
REMARK: Groups are used by other commands like GroupActivate.
EX: GroupAdd, browserGroup, ahk_exe chrome.exe,, NoMatchSub

GroupClose, GroupName, [Mode:=""] 
USE: Closes next|all windows. Behavior based on mode.
MODE: BLANK = Close active window. Activate oldest window in group.
    A = All existing group members are closed.
    R = GroupDeactivate last used = Closes active window if not a group member 
        GroupActivate last used = Closes active window if it is a group member 
EX: GroupClose, winGroup, A

GroupDeactivate, GroupName, [Mode] 
USE: Activates next window in the stack if it does not belong to GroupName.
MODE: R = Next non-group window    BLANK = Oldest non-group window
EX: GroupDeactivate, GroupName, R

Gui  
Gui, SubCommand, [Value1, Value2, Value3] 
USE: Used to create, destroy, format, and manipulate Graphical User Interfaces.
SUBCOMMANDS:
    New = New GUI                   Destroy = Deletes GUI
    Show = Make GUI visible         Cancel|Hide = Make GUI Hidden
    Add = Add a control to GUI      Submit = Save all control data to variables
    Margin = Default padding size   Color = Sets background|control color
    Menu = Add|remove menu bar      Flash = Blink window|taskbar button
    Minimize|Maximize|Restore = GUI resizing options
    Default = Set default GUI name for current thread
    Font = Sets default font|color|size|style for future controls
ErrorLevel+EXO: 0 = Success. 1 = Failure.

Gui, [GuiID]New, [Options, Title] 
USE: Create a new GUI and sets new GUI to thread default.
EX: Gui, MyGUI:New, HWNDguiH
OPTIONS: Use +|- to Add|Remove any of these options.
    AlwaysOnTop = Window always on top      Border = Thin-line border
    Delimiter = Set GUI control delimiter   Disabled = Disable window
    DPIScale = Scale GUI with DPI           HWNDvar = Store GUI HWND to var
    Label = Change GUI Label prefix         LastFound = Set GUI to LastFound        
    MaximizeBox = Maximize button           MinimizeBox = Minimize button
    MaxSize = Maximum window size           MinSize = Minimum window size
    Owner = Set windows owner               OwnDialogs = Own popup dialogs
    Parent = Set parent of this window      Resize = Set resizability
    Style = Window Style                    ExStyle = Window Extended Style
    SysMenu = System menu & buttons         Theme = Sets normal|classic theme
    LastFoundExist = Set GUI to LastFound only if GUI exists
    ToolWindow = Narrower title bar & no taskbar button
REMARK: A new GUI destroys an old GUI of the same name.
CHEAT: See: Cheat_GUI_Options and Cheat_Styles
EX: Gui, MyGUI:New, +Resize -Border -SysMenu, Clever GUI Title

Gui, Add, ControlType, [Options, Text] 
USE: Adds a control to a GUI window.
REMARK: If no GUI exists, one is created.
CONTROLTYPE:
    ActiveX     DropDownList    ListView    StatusBar
    Button      Edit            MonthCal    Tab
    Checkbox    GroupBox        Picture     Text
    ComboBox    Hotkey          Progress    TreeView
    Custom      Link            Radio       UpDown
    DateTime    ListBox         Slider

Gui, Add, Text, [Options, Value] 
USE: A control that displays Value's text.
OPTIONS: No unique options. See Cheat_GUI_Options for general options.
EX: Gui, MyGui:Add, Text, x100 y100 w50 h20, Hello World

Gui, Add, Edit, [Options, Text] 
USE: A control that can accept text input from the user.
OPTIONS: See Cheat_GUI_Options for general options.
    Number = Numbers only          -Wrap = Disable word wrapping
    ReadOnly = Fixed text          -WantCtrlA = Disable SelectAll
    Lowercase = force lowercase    Uppercase = FORCE UPPERCASE
    LimitN = Limit to N chars      Limit = Limit input to control width
    tN =  Tabstop in N chars       -WantTab = Tab navigate
    Password = Mask user input     Password* = Change mask. * is any char
    Multi = Multiple lines         -WantReturn = Disable linefeed from enter
TEXT: Default text to appear inside edit box.
EX: Gui, MyGui:Add, Edit, w100 h20 Number Limit, Default text here.

Gui, Add, UpDown, [Options, Start] 
USE: Attach up|down arrows to a control that increase|decrease a value.
OPTIONS: See Cheat_GUI_Options for general options.
    Horz = UpDown become LeftRight      Left = Move UpDown left of control
    Range = Set range N1 to N2          Wrap = Wraps range min and max
    -16 = Prevent control attach        0x80 = Omit thousands separator
START: Starting value. Overrides attached controls value.
EX: Gui, MyGui:Add, Edit,, 1
    Gui, MyGui:Add, UpDown, vGuiEditUD gUDSub Range1-100 Wrap, 5

Gui, Add, Picture, [Options, ImagePath] 
USE: Imports a supported image to the GUI.
OPTIONS: No unique options. See Cheat_GUI_Options for general options.
EX: Gui, Add, Picture, x10 y10 w500 vGuiPic, C:\Images\GuiPic.png

Gui, Add, Button, [Options, Text] 
USE: Creates a clickable, basic button.
OPTIONS: No unique options. See Cheat_GUI_Options for general options.
TEXT: Text that appears on the button.
EX: Gui, Add, Button, x5 y90 w50 h20 vGuiBtn gSubmit, Submit

Gui, Add, Checkbox, [Options, Text] 
USE: A box that can be set to check, unchecked, or filled.
OPTIONS: See Cheat_GUI_Options for general options.
    Check3 = Enables a 3rd checkstate
    Checked|CheckedGray = Start in 3rd check state
    Right|Left = Side to put checkbox on
TEXT: Value that appears next to checkbox.
EX: Gui, Add, Checkbox, x5 y5 vGuiCheck gCBUpdate Check3 Right, Enable

Gui, Add, Radio, [Options, Text] 
USE: A checkable element groups. Only 1 radio button can be active per group.
OPTIONS: See Cheat_GUI_Options for general options.
    Group =  Specifies a new radio group
TEXT: Value that appears next to checkbox.
EX: Gui, Add, Radio, x20 y5 w40 h20 vGuiR1 Group, Yes
    Gui, Add, Radio, x70 y5 w40 h20 vGuiR2, No

Gui, Add, DropDownList, [Options, List] 
USE: An element that expands to reveal a list. Only 1 item can be selected.
OPTIONS: See Cheat_GUI_Options for general options.
    Lowercase = force lowercase
    Uppercase = FORCE UPPERCASE
    ChooseN = Item N starts selected
    Sort = Automatically sorts list alphabetically. Also allows type-to-select
LIST: A pipe separated list of items. Set default item with 2 pipes after it.
EX: Gui, Add, DropDownList, x5 y5 w50 Sort, Bin|Oct|Dec||Hex|

Gui, Add, ComboBox, [Options, List] 
USE: Same as a drop down list except it also has an editable field.
OPTIONS: See Cheat_GUI_Options for general options.
    Limit = Limit input to viewable area
    Simple = Combo box's drop down list is replaced with a ListBox
LIST: A pipe separated list of items. An item with 2 pipes = Default selection
EX: Gui, Add, ComboBox, x5 y5 w100 vGuiCB Simple Limit, Add|Sub||Mult|Div|

Gui, Add, ListBox, [Options, List] 
USE: Displays a list of items where 1 or more items can be selected.
OPTIONS: See Cheat_GUI_Options for general options.
    ChooseN = Item N starts selected
    Multi = Multiple selections
    ReadOnly = Non-interactive
    Sort = Automatically sorts list alphabetically
    0x100 = Prevents row cutoff
LIST: A pipe separated list of items. An item with 2 pipes = Default selection
EX: Gui, Add, ListBox, x5 y5 w50 r5 vGuiLB1 Multi, Red||Green|Blue||Alpha

Gui, Add, ListView, [Options[ViewMode], List] 
USE: An element that can list multiple rows and columns of data.
OPTIONS: See Cheat_GUI_Options for general options.
    R = Rows on creation              C = Text color. Use Hex|Name
    -Hdr = Omit header                NoSortHdr = Header becomes a field
    -Multi = Max select 1 row         LV0x10 = Disable rearranging columns
    Grid = Row|col lines              AltSubmit = Gets more ListView events
    Sort = Auto sort by first col     LV0x20 = Click first col to select row
    -WantF2 = Prevent F2 renaming     Checked = Add checkboxes to left of row
    -ReadOnly = First col editable    NoSort = Disable sorting by header click
    Count = Initial number of rows    SortDesc = Auto sort descending by first col
    LV = Add or remove a ListView Extended Style
    Background = Set background color. Use Hex|Name
VIEWMODE: One view mode can be added to the options field
    Report = Default view               Tile = Alt large icon view
    Icon = Large icon view              IconSmall = Small icon view
    List = Listed small icon view
LIST: A pipe separated list of items. An item with 2 pipes = Default selection
EX: Gui, MyGui:Add, ListView, x5 y5 r10 w400 vGuiLV Grid, Name|Weight(LB)|Height

Gui, Add, TreeView, [Options] 
USE: An element that can show a parent/child hierarchy. Like Explorer's file view
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    R = Rows on creation            AltSubmit = Additional events
    Checked = Enable checkbox       -WantF2 = Prevent F2 renaming
    -Buttons = Disable +/- box      C = Text color. Use Hex|Name
    -ReadOnly = Allow renaming      -Lines = Disable parent-child lines
    ImageList = Add ImageListID     -HScroll = Remove horizontal scroll bar
    Background = Set background color. Use Hex|Name
Gui, Add, TreeView, w200 r20 vGuiTV Background0x959595

Gui, Add, Link, [Options, Text[Tag]] 
USE: Creates text that does something when clicked (hypertext).
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
TEXT: Regular text that can contain HTML HREF tags.
EX: Gui, Add, Link, x5 y5, Click <a href="https://autohotkey.com">here</a>

Gui, Add, Hotkey, [Options, Default] 
USE: A control that detects and stores the keys a user presses.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    LimitN = Restrict hotkey types. N = Sum of options:
        1 = Require a modifier key    16 = No Shift+Control keys 
        2 = No Shift-only keys        32 = No Shift+Alt keys 
        4 = No Control-only keys      64 = Do not use. Not supported
        8 = No Alt-only keys          128 = No Shift+Control+Alt keys
DEFAULT: Set a default hotkey. Accepts mod notation: !^+
EX: Gui, MyGui:Add, Hotkey, x5 y5 w90 vGuiHK1, ^+A

Gui, Add, DateTime, [Options, Format] 
USE: A single line input box that accepts dates or time. Has a calendar drop-down.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    Choose = Preselect a YYYYMMDDHH24MISS date
    Range = Set min/max date to YYYYMMDD-YYYYMMDD
    Right = Set calendar drop-down to right side
    1 = Provide UpDown control    2 = Provide a no date/time checkbox
FORMAT:
    BLANK = Locale short date     LongDate = Use locale long date
    Time = Time only              Custom = Custom date. See: FormatTime
EX: Gui, Add, DateTime, x5 y5 Right 2 vGuiDTS, yyyyMMdd

Gui, Add, MonthCal, [Options, Default] 
USE: An calendar element that allows single or range date selecting.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    rN = N rows of calendars       w-N = Columns of calendars. Negative number.
    4 = Display week numbers       8 = Disable circling todays date
    16 = Disable showing todays date
    Multi = Allows date range selection    
    Range = Set min/max date to YYYYMMDD-YYYYMMDD
DEFAULT: Set the default start date in YYYYMMDDHH24MISS format.
EX: Gui, Add, MonthCal, vGuiCal r2 w-2

Gui, Add, Slider, [Options, Start] 
USE: A button on a track that can change a value by sliding it.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    Center = Blunt thumb                    ToolTip = Tooltip shows position
    ThickN = N thumb thickness in pixels    Vertical = Slider is vertical
    Left = Thumb points to opposite side    Invert = Switch min/max sides
    NoTicks = No tick marks                 PageN = Move N positions on PageUp|Dn
    TickIntervalN = Set tick mark interval  LineN = Move N positions on arrow press
    RangeN1-N2 = Set range from N1 to N2
    Buddy1N|Buddy2N = Attach control N to left|right side of slider
START: Starting position of slider. If omitted, defaults to number closest 0.
EX: Gui, Add, Slider, Thick15 TickInterval25 Range0-200 vGuiSL, 100

Gui, Add, Progress, [Options, Start] 
USE: A dual colored bar that can track forms of progress.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    cN = Bar color. N = Hex|ColorName
    BackgroundN = BG color. N = Hex|ColorName
    RangeN1-N2 = Set range from N1 to N2
    -Smooth = Segmented bar
    Vertical = Fill vertically
START: Starting number. If omitted, defaults to number closest 0.
EX: Gui, Add, Progress, vGuiPr c00FF00 -Smooth BackgroundBlack Range0-10, 5

Gui, Add, GroupBox, [Options, Text] 
USE: An element used to visually group things. This is a visual element only.
OPTIONS: 
    Wrap = Allow more than 1 line of text
EX: Gui, Add, Button, x15 y35 w50 h20, OK
    Gui, Add, GroupBox, x5 y5 w70 h60 Wrap, Group`nBox

Gui, Add, Tab3|Tab2|Tab, [Options, Text] 
USE: Creates a page|tab. Each page can contain its own set of controls.
TAB: TAB=Original tab    TAB2=Fixed some TAB issues    TAB3=Fixed Tab2 issues
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    ChooseN = Preselect a tab N
    -Background = Use default color for tab
    Buttons = Replace tabs with buttons
    Left|Right|Bottom|Top = Tab location
    -Wrap = Force single tab row
EX: Gui, Add, Tab3, x5 y5 w200 h200 Choose2 vGuiTabs, Tab1|Tab2|Tab3

Gui, Add, StatusBar, [Options, Text] 
USE: An element anchored to the bottom of the GUI for displaying info.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.
    No unique commands but this element does utilize 3 built-in functions:
    SB_SetText() = Set text in the status bar
    SB_SetParts() = Split/unite parts of the status bar
    SB_SetIcon() = Insert icons into the status bar
REMARK: Can be split into multiple sections.
EX: Gui, Add, StatusBar, vGuiSB, Status bar text

Gui, Add, ActiveX, [Options, Text] 
USE: Allows the import of ActiveX controls. Like IE.
OPTIONS: See Cheat_GUI_Options for a list of general GUI options.

Gui, Add, Custom, [ControlDefinedParams] 
USE: Allows the import of other controls not provided by AHK.

Gui, Show, [Options, Title] 
USE: Show, hide, position, and title a GUI.
OPTIONS:
    Wn = GUI widh in n pixels        Hn = GUI height in n pixels
    Xn = Set GUI x coord             Yn = Set GUI y coord
    xCenter = Center horizontally    yCenter = Center vertically
    Center = Center on screen        Restore = Regular GUI size
    Minimize = Minimize GUI          Maximize = Maximize GUI
    Hide = Hide GUI                  AutoSize = Minimum size to fits all controls
    NoActivate = Regular view. No activation.
    NA = Show unminimized window. No activation.
EX: Gui, MyGui:Show, x5 y5 w400 h200 Center, My New GUI

GuiClose 
USE: Label that launches when a GUI is closed.
REMARK:If this label does not exist, closing the GUI will hide it.
    Prefixing the GUI name to the label/function limits that code to that GUI.
REPLACEMENT: Consider using: GuiClose()

GuiEscape 
USE: Label that launches when the GUI detects Escape being pressed.
REMARK: Prefixing the GUI name to the label/function limits that code to that GUI.
REPLACEMENT: Consider using: GuiEscape()

GuiSize 
USE: Label that launches when the GUI window is resized.
REMARK: Prefixing the GUI name to the label/function limits that code to that GUI.
REPLACEMENT: Consider using: GuiSize()

GuiContextMenu 
USE: Label that launches whenever the user right-clicks inside the GUI.
REMARK: Prefixing the GUI name to the label/function limits that code to that GUI.
REPLACEMENT: Consider using: GuiContextMenu()

GuiDropFiles 
USE: Label that launches when files/folders are dragged and dropped onto the GUI.
REMARK: Prefixing the GUI name to the label/function limits that code to that Gui.
REPLACEMENT: Consider using: GuiDropFiles()

GuiControl  
GuiControl, SubCommand, ControlID, [Value]
USE: Makes a variety of changes to a control in a GUI window.
SUBCOMMANDS:
    Move = Move|resize control      Disable = Disable control use
    Show = make control visible     Hide = Make control invisible
    Enable = Enable control use     (Blank) = Put new content into control
    Focus = Set focus to control    Text = Change text|caption of control
    Delete = Not implemented yet    MoveDraw = Same as move. Forces repaint
    Choose = Sets the selection in a ListBox|DropDownList|ComboBox|Tab control
    ChooseString = Same as choose but selection to the defined string
    Font = Change control font, size, color, or style
    Options = Add|remove options from a control
REMARK: To operate on a specific GUI, prefix SubCommand with GUI's name.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.

GuiControl, , ControlID, [Value] 
USE: Puts new contents into the control.
VALUE: Depends on control type
    Text|Button|GroupBox|StatusBar|Link|Edit = New text
    Picture = Image path|handle to new picture
    Hotkey = BLANK removes current hotkey
    Checkbox|Radio = 0|1|-1 then uncheck|check|graycheck. Otherwise, new text.
    DateTime|MonthCal = Set date. Use YYYYMMDDHH24MISS format.
    UpDown|Slider|Progress = Set position
    Tab|DropDownList|ComboList|ListBox = New delimited list
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.

GuiControl, Text, ControlID, [Value] 
USE: Changes the text|caption of a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Text, guiBtn1, Close Button

GuiControl, Move, ControlID, Options 
USE: Move|resize a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Move, guiBtn1, x50 y10 

GuiControl, MoveDraw, ControlID, [Options] 
USE: Move|resize a control and repaint control area.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:MoveDraw, guiBtn1, x50 y10

GuiControl, Focus, ControlID 
USE: Sets keyboard focus to the control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Focus, guiBtn1

GuiControl, Disable, ControlID 
USE: Disable|gray out a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Disable, guiLoadBtn

GuiControl, Enable, ControlID 
USE: Enable a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Enable, guiLoadBtn

GuiControl, Hide, ControlID 
USE: Hides a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Hide, guiBtn1

GuiControl, Show, ControlID 
USE: Shows a control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Show, guiBtn1

GuiControl, Choose, ControlID, N 
USE: Set a ListBox|DropDownList|ComboBox|Tab control selection to Nth item.
N: Number = select item. All = Select all items. 0 = Deselect current item
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:Choose, guiLB, All

GuiControl, ChooseString, ControlID, String 
USE: Set a ListBox|DropDownList|ComboBox|Tab control selection to matching String.
STRING: Selection string to search for.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGui:ChooseString, guiTabs, Tab2

GuiControl, Font, ControlID 
USE: Updates control the current Font setting.
REMARK: Set the desired font with 'Gui, Font' first.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: Gui, MyGUI:Font, s20 Bold, Consolas
    GuiControl, MyGUI:Font, gText

GuiControl, Options, ControlID, Value 
USE: Add|remove various options and styles to a control.
OPTIONS: +|- an option to add|remove it.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControl, MyGUI:+gFire +Center +c00FF00

GuiControlGet  
GuiControlGet, OutputVar, [SubCommand, ControlID, Value] 
USE: Get various information about a GUI control.
SUBCOMMAND:
    BLANK = Get control contents. dependent on control type.
    Pos = Get control size|position.
    Focus = Get control identifier (ClassNN) for focused control.
    FocusV = Get variable name of focused control.
    Enabled = Get control enable state.
    Visible = Get control visibility state.
    HWND = Get handle of control.
    Name = Get variable name of control.

GuiControlGet, OutputVar, , [ControlID, Text] 
USE: Get the contents of the control. Usually text but dependent on type.
TYPE: Depends on control
    Picture = Get file name used at creation.
    Edit = Get contents of edit box.
    Hotkey = Get hotkey. BLANK if none.
    Checkbox|Radio = Get check status. 1=Checked. 0=Unchecked. -1=Gray.
    UpDown|Slider|Progress = Get current position.
    Tab|DropDownList|ComboBox|ListBox = Get text of selected item.
    StatusBar = Get text of first part.
    ActiveX = Get new wrapper.
TEXT: If this param is Text, it will always get the text/caption of a control.
EX: GuiControlGet, guiCheckState, , guiCB2

GuiControlGet, OutputWHXY, Pos, [ControlID] 
USE: Get the position|size of the control relative to client area.
OUTPUT: Creates 4 variables for Width|Height|XCoord|YCoord
    Output name is affixed with W|H|X|Y respectively.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, gEdit, Pos, guiEdit2
    MsgBox, W=%gEditW% `nH=%gEditH% `nX=%gEdit% `nY=%gEditY%

GuiControlGet, OutputVar, Focus 
USE: Get control identifier (ClassNN) for currently focused control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, focusCI, Focus

GuiControlGet, OutputVar, FocusV 
USE: Get variable name for currently focused control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, focusVar, FocusV

GuiControlGet, OutputVar, Enabled, [ControlID] 
USE: Get enabled state of control. 
OUTPUTVAR: 0 = Disabled. 1 = Enabled.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, conEn, Enabled, submitBtn

GuiControlGet, OutputVar, Visible, [ControlID] 
USE: Get visibility state of control. 
OUTPUTVAR: 0 = Hidden. 1 = Visible.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, conVis, Visible, submitBtn

GuiControlGet, OutputVar, HWND, [ControlID] 
USE: Get handle of control.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, conHWND, HWND, submitBtn

GuiControlGet, OutputVar, Name, [ControlID] 
USE: Get name of control variable.
OUTPUTVAR: BLANK if no name.
ErrorLevel+EXO: 0 = Success. 1 = Failure or window|control not exist.
EX: GuiControlGet, conVarName, Name, submitBtn

Hotkey 
Hotkey, [Modifier]KeyName, [Label, Options] 
USE: Create, modify, enable, or disable a hotkey.
MODIFIER: Hotkey modifiers and modifier symbols.
    # = Win key     & = Combo keys      * = Fire 
    ! = Alt         < = Left mod key    ~ = Always send hotkey
    ^ = Control     > = Right mod key   $ = Hook prevents key loops
    + = Shift       <^>! = AltGr        UP = Key release
KEYNAME: The key that will fire the hotkey.
LABEL: A Label or FuncObject. It can alternately be one of these:
    On = Enable hotkey      Toggle = Set hotkey to opposite of current
    Off = Disable hotkey    AltTab = Allows for AltTab hotkeys. See docs.
OPTIONS: 
    On = Enable hotkey              Off = Disable hotkey
    iN = N level for input          tN = N number of threads
    pN = Priority. N = 1...5        B|B0 = Buffer|Buffer disable
    UseErrorLevel = Skip warning dialogs and set ErrorLevel. See docs.
ErrorLevel+EXO: Set if UseErrorLevel is used.
EX: Hotkey, $+Backspace::Delete, On

Hotkey, If, % [FunctionObject|(Expression)] 
Hotkey, IfWin[Not]Active|Exist, [WinTitle, WinText]
USE: Makes subsequent hotkeys context sensitive.
REMARK: Leave optional areas blank to turn context sensitivity off.
EX: Hotkey, IfWinNotExist, ahk_exe winamp.exe ; Applies IfWin check to next hotkey
    Hotkey, *#x, LaunchWinamp, On ; Win+X launches winamp if it does not exist

ImageSearch, OutputX, OutputY, X1, Y1, X2, Y2, [Options]ImgFile 
USE: Searches an area of screen for an image.
X1|Y1: Coordinates of upper left search area.
X2|Y2: Coordinates of lower right search area.
IMGFILE: Path to image file.
OPTIONS:
    *IconN = Nth image file icon number
    *N = Allowed color variation. 0 .. 255
    *TransN = Transparent color. N = Hex|ColorName
    *wn = Width in N pixels
    *hn = Height in N pixels
ErrorLevel+EXO: 0 = Image found. 1 = Not found. 2 = Error.
EX: ImageSearch, findX, findY, 0, 0, 300, 200, *32 C:\Icon.ico

IniDelete, Filename, Section, [Key] 
USE: Delete a value from a standard format .ini file.
KEY: Key name to delete. If omitted, entire section is deleted.
ErrorLevel+EXO: 0 = Image found. 1 = Not found. 2 = Error.
EX: IniDelete, C:\ahksettings.ini, SaveData, LastGuiPos

IniRead, OutputVar, Filename, [Section, Key, Default] 
USE: Get a key value, a section, or a list of sections from a .ini file.
OUTPUTVAR: Depends on supplied params
    List of sections = Only Filename
    List of keys     = Filename and Section
    Key's value      = Filename, Section, and Key
DEFAULT: Value to use if a key can't be found.
EX: IniRead, keyVal, C:\test.ini, sec1, testKey1, Error. Not found.

IniWrite, Value|Pairs, Filename, Section, [KeyName] 
USE: Write a value or an entire section to a .ini file.
VALUE: The Value to set if KeyName is present
PAIRS: Any number of Key:Value Pairs if KeyName is omitted.
    Pairs must not contain any blank lines.
REMARK: Longer text can be broken up using Continuation Sections.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: IniWrite, % "key1=val1`nkey2=val2`nkey3=val3", C:\Test.ini, CustomSection

Input, [OutputVar, Options, EndKeys, MatchList] 
USE: Waits for the user to type something.
OUTPUTVAR: Stores visible keys. Non-visible keys can be detected with EndKeys.
OPTIONS: Optional space separation is allowed.
    V = Visible input text      * = Entire input is checked for match
    C = Case sensitive          Ln = Limit input to n chars
    B = Ignore backspace        I = Ignore AHK generated input
    tN = Time in N seconds      M = Capture modified keystrokes
    e = Use char code instead of key code for singular end characters
ENDKEYS: List of keys that will end this input. Use Send key format. {Enter}
MATCHLIST: Comma separated list of words. Input ends if a word is matched.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
    0 = If no params, prior input successfully terminated
    1 = If no params, no input in progress
    Timeout = Input timed out            EndKey:Name = Name of end key pressed
    Match = Matched item in MatchList    Max = Max length reached and no matches
    NewInput = Input interrupted by another Input
EX: Input, SingleKey, I * V, {Enter}{Space}{Tab}, ball,dog,cat

InputBox, OutputVar, [Title, Prompt, HIDE, W, H, X, Y, Font, Timeout, Default] 
USE: Display an input box to get user input.
TITLE: Window title                  PROMPT: Notify user of expected input
HIDE: Use HIDE to mask user input    FONT: Not implemented yet
DEFAULT: Default input field text    TIMEOUT: Time in seconds before closing
W|H|X|Y: Width, height, x|y coords of input box
ErrorLevel+EXO: 0 = OK pressed. 1 = Cancel pressed. 2 = Timeout. 
REMARK: OutputVar is always set to the edit field, even if canceled.
EX: InputBox, userName, Name, Enter your name:,, 300, 150,,,,, Name here

KeyHistory 
USE: Opens a window that shows info, recent keystrokes, mouse clicks, etc.

KeyWait, KeyName, [Options] 
USE: Wait for a key|mouse|joy button to be pressed|released.
KEYNAME: Any key from the key list.
OPTIONS: List of options. Space separation allowed.
     D = Wait for key to be pressed down
     L = Check logical state instead of physical
    tN = Timeout in N seconds.
ErrorLevel+EXO: 0 = Success. 1 = Timeout.
EX: KeyWait, LButton, D T1

ListHotkeys 
USE: Displays information about script hotkeys.

ListLines 
USE: Displays the script lines most recently executed.

ListVars 
USE: Displays information about script variables. Names, contents, etc.

Menu  
Menu, MenuName, SubCommand, [Value1, Value2, Value3, Value4] 
USE: Create, delete, modify and show menus and tray icons. 
SUBCOMMANDS:
    Show = Show menu                    Check = Add check left of item
    Color = Set menu color              Uncheck = Remove check from item
    Add = Add a menu|submenu            ToggleCheck = Check|Uncheck an item
    Rename = Rename an item             Enable = Enable a disabled item
    Icon = Set tray|menu icon           Disable = Disable an enabled item
    Insert = Insert menu item           ToggleEnable = Disable|Enable item
    NoIcon = Remove tray|menu icon      Default = Set default menu item
    Tip = Set tray icon tooltip         NoDefault = Unset custom default
    Delete = Delete menu item           DeleteAll = Delete all custom items
    Standard = Insert standard menu items
    NoStandard = Remove standard menu items
    UseErrorLevel = Skip warning/error dialogs
    Click = Set tray icon clicks to activate default menu
    MainWindow = Enable main window access for compiled scripts
    NoMainWindow = Prevent main window access for compiled scripts

Menu, MenuName, Add, [MenuItem, LabelSubmenu, Options] 
USE: Add|update|convert a menu or submenu item.
MENUITEM: The name or position of a menu item
LABELSUBMENU: The name of a submenu, subroutine, function, or FuncObj.
OPTIONS: Space or tab separated
    +Right = Right align text       +Break = Item starts new column
    pN = Set priority to N level    +BarBreak = +Break with a dividing line
    +Radio = Use bullet instead of a check mark
REMARK: To add a separator, omit all 3 parameters.

Menu, MenuName, Insert, [MenuItem, InsertItem, LabelSubmenu, Options] 
USE: Insert a new item before the specified menu item.
LABELSUBMENU: The name of a submenu, subroutine, function, or FuncObj.
OPTIONS: Space or tab separated
    +Right = Right align text       +Break = Item starts new column
    pN = Set priority to N level    +BarBreak = +Break with a dividing line
    +Radio = Use bullet instead of a check mark

Menu, MenuName, Delete, [MenuItem] 
USE: Deletes the specified menu item from the menu.
MENUITEM: Name or position of a menu item.
MenuItemName is the name or position of a menu item (see MenuItemName for details).

Menu, MenuName, DeleteAll 
USE: Deletes all custom menu items from the menu.

Menu, MenuName, Rename, MenuItem, [NewName] 
USE: Rename specified menu item to NewName.
MENUITEM: Name or position of a menu item.
NEWNAME: If NewName is omitted, item becomes a line separator.

Menu, MenuName, Check, MenuItem 
MENUITEM: Name or position of a menu item.
USE: Add a visible check mark next to the menu item.

Menu, MenuName, Uncheck, MenuItem 
USE: Remove check mark from specified menu item.
MENUITEM: Name or position of a menu item.

Menu, MenuName, ToggleCheck, MenuItem 
USE: Toggle's the menu item's check mark on or off.
MENUITEM: Name or position of a menu item.

Menu, MenuName, Enable, MenuItem 
USE: Enabled a previously disabled menu item.
MENUITEM: Name or position of a menu item.

Menu, MenuName, Disable, MenuItem 
USE: Disable a previously enabled menu item.
MENUITEM: Name or position of a menu item.

Menu, MenuName, ToggleEnable, MenuItem 
USE: Toggles the enabled|disabled state of the menu item.
MENUITEM: Name or position of a menu item.

Menu, MenuName, Default, [MenuItem] 
USE: Changes the default menu item to MenuItem.
MENUITEM: Name or position of a menu item.

Menu, MenuName, NoDefault 
USE: Change menu default back to original default. 

Menu, MenuName, Standard 
USE: If not present, insert standard menu items.

Menu, MenuName, NoStandard 
USE: Remove all standard menu items if present.

Menu, Tray, Icon, [FileName, IconNum, Freeze] 
USE: Change script tray icon to one from FileName.
ICONNUM: Icon number if FileName has multiple icons.
FREEZE: 1 = Freeze icon    0 = Unfreeze icon
EX: Menu, Tray, Icon, C:\TestIcon.ico,, 0

Menu, MenuName, Icon, MenuItem, FileName, [IconNum, IconWidth] 
USE: Sets a icon for the specified menu item.
MENUITEM: Name or position of a menu item.
ICONNUM: Icon number if FileName has multiple icons.

Menu, Tray, NoIcon 
USE: Removes the tray icon if it exists.

Menu, MenuName, NoIcon, MenuItem 
USE: Removes the icon from the specified menu item, if any.
MENUITEM: Name or position of a menu item.

Menu, Tray, Tip, [Text] 
USE: Changes the tray icon's tooltip.
TEXT: Text to display. If omitted, uses default text.

Menu, MenuName, Show, [X, Y] 
USE: Displays MenuName.
X|Y: If X and Y are omitted, display at mouse location.

Menu, MenuName, Color, ColorValue, [Single] 
USE: Changes the background color of the menu to Hex|ColorName.
SINGLE: If this parameter isn't single, submenus will not be changed.

Menu, Tray, Click, ClickCount 
USE: Set number of clicks to activate the default item of the tray menu.
CLICKCOUNT: 1 = Single click    2 = Double click

Menu, Tray, MainWindow 
USE: Allow a compiled script's main window to be shown via tray icon.

Menu, Tray, NoMainWindow 
USE: Prevent a compiled script's main window from being shown via tray icon.

Menu, MenuName, UseErrorLevel, [Off] 
USE: Skips warning dialogs and thread terminations on Menu error.
ErrorLevel: 1 = Problem. 0 = Success.

MouseClick, [Button, X, Y, Count, Speed, State, Relative] 
USE: Clicks or holds down a mouse button
BUTTON: Left|Right|Middle|X1|X2|WU|WD|WR|WL
COUNT: Number of clicks to send.
SPEED: Mouse movement speed. 0 (Fast) .. 100 (Slow).
STATE: D = Down    U = Up    BLANK = Full click
RELATIVE: If R is present, click is relative to mouse position.
REMARK: Click is generally more flexible and easier to use.
EX: MouseClick, Left, 200, 100, 2, 3

MouseClickDrag, Button, X1, Y1, X2, Y2, [Speed, Relative] 
USE: Click, drag, or release a mouse button.
BUTTON: Left|Right|Middle|X1|X2
SPEED: Mouse movement speed. 0 (Fast) .. 100 (Slow).
RELATIVE: If R is present, click is relative to mouse position.
EX: MouseClickDrag, Left, 0, 0, 100, 100, 3

MouseGetPos, [OutputX, OutputY, OutputWin, OutputControl, Flag:=0] 
USE: Get current position, window name, and control name under mouse.
FLAG: 
    0 = Default method
    1 = Simple method
    2 = Store HWND in OutputControl rather than ClassNN.
    3 = Simple method with HWND to OutputControl
EX: MouseGetPos, mouseX, mouseY, mouseWin

MouseMove, X, Y, [Speed, Relative] 
USE: Moves the mouse cursor to XY coordinate
SPEED: Mouse movement speed. 0 (Fast) .. 100 (Slow).
RELATIVE: If R is present, click relative to current mouse position.
EX: MouseMove, 100, 50, 1

MsgBox, [Options, Title, Text, Timeout] 
MsgBox, Text 
USE: Premade popup GUI for displaying text and getting user responses.
OPTIONS: A hex or dec number that sets various options of the message box.
CHEAT: See Cheat_MsgBox for options or use MagicBox.
REMARK: MsgBox can use just the text field.
EX: MsgBox, 0x14, Error, Click yes to retry and no to close.

OnExit, [Label] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: OnExit()

OutputDebug, Text 
USE: Sends a string to the debugger for display.
REMARK: If script lacks a debugger, system debugger displays the string.
    If system debugger inactive, command has no effect.
EX: OutputDebug, %A_Now%: Error: File:%A_LineFile% Line:%A_LineNumber%

Pause, [State:="", Thread:=0] 
USE: Pauses the script's current thread.
STATE: On = Turn pause on
    Off = Disable pause
    Toggle = Toggles On|Off state
THREAD: 0 = The command pauses the current thread
        1 = Pause the previous thread
EX: Pause, On

PixelGetColor, OutputVar, X, Y, [Mode] 
USE: Gets the BGR color of pixel at X|Y coordinate.
MODE: Space separated
    RGB = Get color in RGB format
    Alt = Alternate, slower method to get color
    Slow = Slower method that may work in some full-screen apps
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: PixelGetColor, col, 100, 200, RGB Alt

PixelSearch, OutputX, OutputY, X1, Y1, X2, Y2, Color, [Variation, Mode] 
USE: Searches a region of the screen for a pixel of the specified color.
X1|Y1: Start coords      X2|Y2: End coords      COLOR: BGR color ID
VARIATION: 0 .. 255. The +|- amount each color can be off by.
MODE: Space separated options
    FAST = Faster searching method. Searches by row instead of by column.
    RGB = Use RGB instead of BGR for Color.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: PixelSearch, foundX, foundY, 0, 0, 90, 90, 0xccff00, 16, Fast RGB

PostMessage, Msg, [wParam, lParam, Control, WinTitle, WinText, NotTitle, NotText] 
USE: Sends a message to a window or control.
MSG: Message number to send. See: Cheat_Window_Messages
WPARAM|LPARAM: Used to send message parameters.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: PostMessage, 0x50, 0, 0x4090409,, A

Process  
Process, SubCommand, [ID, Value] 
USE: Get information about a process or take action based on a process.
ID: A program's PID or EXE name.
    Exist = Check if process is running
    Close = Force close first matching process
    Priority = Set priority level of first matching process
    Wait = Wait for process to exist
    WaitClose = Wait for all matching processes to close
    List = Not yet implemented
ErrorLevel: 0 = Error, timeout, or problem. Otherwise, set to PID.

Process, Exist, [ID] 
USE: Check whether the specified process is running.
ID: A program's PID or EXE name.
ErrorLevel: 0 = No matching process. Otherwise, set to matching process PID.
EX: Process, Exist, AutoHotkey.exe ; R=> 532e3a

Process, Close, [ID] 
USE: Force close the first matching process.
ID: A program's PID or EXE name.
ErrorLevel: 0 = No matching process or error. Otherwise, set to closed PID
EX: Process, Close, AutoHotkey.exe

Process, Priority, [ID], Level 
USE: Set priority level of the first matching process.
ID: A program's PID or EXE name. BLANK = Sets script priority.
LEVEL: Use whole word or first letter:
    Low    BelowNormal    Normal    AboveNormal    High    RealTime
ErrorLevel: 0 = No matching process or error. Otherwise, set to PID.
EX: Process, Priority, , A

Process, Wait, ID, [Seconds] 
USE: Wait until the specified process is running.
ID: A program's PID or EXE name.
SECONDS: Seconds to wait before timing out. BLANK = Indefinitely.
ErrorLevel: 0 = Error, timeout, or problem. Otherwise, set to PID.
EX: Process, Wait, notepad.exe, 5

Process, WaitClose, ID, [Seconds] 
USE: Wait for all matching processes to close.
SECONDS: Seconds to wait before timing out. BLANK = Indefinitely.
ErrorLevel: 0 = Error, timeout, or problem. Otherwise, set to PID.
EX: Process, WaitClose, chrome.exe, 5

Progress, Param1, [SubText, MainText, WinTitle, FontName] 
USE: Create or update a progress bar window.
PARAM1: Options = Create new bar
    Show = Show if hidden       Off = Destroy window
    BLANK = Update text         Number Only = Update progress bar
OPTIONS:
    xN = X coord        zhN = Bar height    fmN = Font size MainText   
    yN = Y coord        zwN = Bar width     fsN = Font size SubText
    zxN = Bar X coord   hN = N height       wmN = Font weight MainText
    zyN = Bar Y coord   Wn = N width        wsN = Font weight SubText
    cbN = Bar color     ctN = Text color    cwN = Window color
    B = Borderless      B1 = Thin border    B2 = Dialog-style border
    M = Moveable        M1 = +Resizeable    M2 = +MenuBtns   
    T = Task Button     pN = starting pos   A = Disable always-on-top
    rN1-N2 = Range N1 to N2                 Hide = Hide initially
    cSM = Set S (SubText) or M (MainText) text align. 0 = Left. 1 = center.
EX: Progress, p50 r1-100 c10 cwBlack ctFF8800 M T, SubText, MainText

Random, OutputVar, [Min:=0, Max:=2147483647 ] 
Random, , Seed
USE: Generates a pseudo-random number between Min and Max (inclusive).
MIN: Minimum number                     MAX: Maximum number
SEED: Reseeds generator. 0 .. 4294967295. Must omit max field.
EX: Random, rand, 1, 50

RegDelete, KeyName, [Value] 
USE: Delete a subkey or value from the registry.
KEYNAME: Registry key. Must start with a root key. Long or short allowed.
    HKCU = HKEY_CURRENT_USER    HKLM = HKEY_LOCAL_MACHINE    HKU = HKEY_USERS
    HKCR = HKEY_CLASSES_ROOT    HKCC = HKEY_CURRENT_CONFIG
VALUE: Value name. Use ahk_default to delete key (default).
    Omitting value will delete everything in KeyName.
REMARK: Remote registry format: \\workstation01:HKLM
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: RegDelete, HKLM\Software\SomeApplication, TestValue

RegRead, OutputVar, KeyName, [ValueName] 
USE: Reads a value from the registry.
KEYNAME: Registry key. Must start with a root key. Long or short allowed.
    HKCU = HKEY_CURRENT_USER    HKLM = HKEY_LOCAL_MACHINE    HKU = HKEY_USERS
    HKCR = HKEY_CLASSES_ROOT    HKCC = HKEY_CURRENT_CONFIG
REMARK: Remote registry format: \\workstation01:HKLM
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: RegRead, defKey, HKLM\SomeSoftware\Key, ahk_default

RegWrite, DataType, KeyName, [ValueName, Value] 
USE: Writes a Value to the entry ValueName in the registry.
DATATYPE: 
    REG_SZ = String    REG_MULTI_SZ = Array of strings    REG_BINARY = Binary
    REG_DWORD = 32-bit num    REG_EXPAND_SZ = String using environment variables
KEYNAME: Registry key. Must start with a root key. Long or short allowed.
    HKCU = HKEY_CURRENT_USER    HKLM = HKEY_LOCAL_MACHINE    HKU = HKEY_USERS
    HKCR = HKEY_CLASSES_ROOT    HKCC = HKEY_CURRENT_CONFIG
VALUENAME: Name of entry. If omitted, the (Default) key is used.
REMARK: Remote registry format: \\workstation01:HKLM
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: RegWrite, REG_SZ, HKLM\SOFTWARE\Test, Name, Test Name

Reload 
USE: Exit current script and start a new instance.

Run, Target, [WorkingDir, Options, PID] 
USE: Run an external program.
TARGET: Name and path of file to run.
OPTIONS: Max|Min|Hide = Start window Maximized|Minimized|Hidden
    UseErrorLevel = Skip warning dialog on error & ErrorLevel = ERROR
PID: The PID of the running program. BLANK = Indeterminable.
ErrorLevel+EXO: UseErrorLevel option. 0 = Success. ERROR = Failure.
EX: Run, C:\Windows\notepad.exe, UseErrorLevel

RunAs, [UserName, Password, Domain] 
USE: Specify user credentials for all subsequent Run and RunWait commands.
REMARK: If all parameters are omitted, RunAs is turned off.
EX: RunAs, Guest, Password123

RunWait, Target, [WorkingDir, Options, PID] 
USE: Run a program and wait until it finishes.
TARGET: Name and path of file to run.
OPTIONS: Max|Min|Hide = Start window Maximized|Minimized|Hidden
    UseErrorLevel = Skip warning dialog on error & ErrorLevel = ERROR
ErrorLevel+EXO: ERROR = Failure. Number = Exit code of finished program.
EX: RunWait, C:\Startup.bat,, Hide

Send, [Options]Keys 
USE: Sends simulated keystrokes and mouse clicks to the active window.
MODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey
KEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.
    Braces are optional for single keys with no up|down state.
OPTIONS: {Raw} = Sends all text after this as literal text
    {Text} = Send characters instead of keystrokes
    {Blind} = Keys are sent along with any held modifiers
REMARK: Send acts like an alias for SendInput|SendEvent|SendPlay.
    Send's type is determined by SendMode. Default is SendEvent.
EX: Send, {Text}Normally, {Enter} will make a new line.

SendInput, [Options]Keys 
USE: The faster, more reliable method of sending simulated keystrokes.
MODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey
KEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.
    Braces are optional for single keys with no up|down state.
OPTIONS: {Raw} = Sends all text after this as literal text
    {Text} = Send characters instead of keystrokes
    {Blind} = Keys are sent along with any held modifiers
EX: SendInput, {Text}Normally, {Enter} will make a new line.

SendEvent, [Options]Keys 
USE: Slower method of sending simulated keystrokes. Adjustable key delays.
MODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey
KEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.
    Braces are optional for single keys with no up|down state.
OPTIONS: {Raw} = Sends all text after this as literal text
    {Text} = Send characters instead of keystrokes
    {Blind} = Keys are sent along with any held modifiers
EX: SendEvent, {Text}Normally, {Enter} will make a new line.

SendPlay, [Options]Keys 
USE: Method of sending simulated keystrokes that works in more programs.
MODIFIER: ! = Alt    + = Shift    ^ = Control    # = WinKey
KEYS: Format: {Key Up|Down}    Omit Up|Down for a normal key stroke.
    Braces are optional for single keys with no up|down state.
OPTIONS: {Raw} = Sends all text after this as literal text
    {Text} = Send characters instead of keystrokes
    {Blind} = Keys are sent along with any held modifiers
EX: SendPlay, {Text}Normally, {Enter} will make a new line.

SendLevel, Num 
USE: Set interruption level of hotkeys and hotstrings.
NUM: 0 .. 100

SendMessage, Msg, [wParam, lParam, Control, WinTitle, WinText, NotTitle, NotText, Timeout] 
USE: Sends a message to a window or control and waits for acknowledgment.
MSG: Message number to send. See: Cheat_Window_Messages
WPARAM|LPARAM: Parameters to send.
TIMEOUT: Time to wait for message to be processed. In ms.
ErrorLevel+EXO: Fail = Problem or command timed out. Otherwise set to numeric message.
EX: SendMessage, 0x50, 0, 0x4090409,, A

SendMode, Mode 
USE: Sets the Send command to a different send method.
REMARK: Initially set to SendEvent.
MODE: Event = Uses SendEvent
      Input = Uses SendInput. Falls back on SendEvent.
      Play  = Uses SendPlay
      InputThenPlay = Uses SendInput. Falls back on SendPlay.

SetBatchLines, Setting 
USE: Determines how often a script initiates a 10ms sleep.
SETTING: -1 = Never sleep
          N = Sleeps after N lines execute
        Nms = Sleep after N milliseconds have passed

SetCapsLockState, [State] 
USE: Turn CapsLock On|Off or Enable|Disable it.
STATE: On = Set CapsLock to on         AlwaysOn = Force CapsLock to stay on
      Off = Set CapsLock to off       AlwaysOff = Force CapsLock to stay off

SetControlDelay, Delay 
USE: Set delay after each control-modifying command.
DELAY: -1 .. N. In ms. Default is 20.
    -1 = No delay    0  = Shortest delay    N = Delay in ms

SetDefaultMouseSpeed, Speed 
USE: Sets the mouse speed for commands that move the mouse.
SPEED: 0 (Fast) .. 100 (Slow)

SetEnv, Var, Value [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use expression assignments: varStr := "String", varNum := 123
USE: Set's value to var.

SetFormat, NumberType, Format [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use function: Format()
USE: Sets format of integer|floating numbers generated by math operations.

SetKeyDelay, [Delay, Duration, Play] 
USE: Set the delay, in milliseconds, after each Send|ControlSend keystroke.
DELAY: Time between each keystroke. -1 .. N. In ms.
    -1 = No delay    0  = Shortest delay    N = Delay in ms
DURATION: Time key is held down. -1 .. N. In ms.
    -1 = No delay    0  = Shortest delay    N = Delay in ms
PLAY: Use PLAY to apply these settings to SendPlay mode.

SetMouseDelay, Delay, [Play] 
USE: Set the delay after each mouse movement or click.
DELAY: -1 = No delay    0  = Shortest delay    N = Delay in ms
PLAY: Use PLAY to apply these settings to SendPlay mode.

SetNumLockState, [State] 
USE: Turn NumLock On|Off or Enable|Disable it.
STATE: 
    On = Set NumLock to on          AlwaysOn = Force NumLock to stay on
    Off = Set NumLock to off        AlwaysOff = Force NumLock to stay off

SetRegView, RegView 
USE: Set registry view to 32-bit or 64-bit.
REGVIEW: 32 = 32-bit    64 = 64-bit     Default = Restore to original

SetScrollLockState, [State] 
USE: Turn ScrollLock on or off. Can also set to always on|always off.
STATE: 
    On = Set ScrollLock to on       AlwaysOn = Force ScrollLock to stay on
    Off = Set ScrollLock to off     AlwaysOff = Force ScrollLock to stay off

SetStoreCapsLockMode, State 
USE: Sets the default behavior for how Send controls CapsLock.
STATE: On = CapsLock is restored to former value if Send altered it.
      Off = CapsLock is never changed.

SetTimer, [Label, State, Priority] 
USE: Set a timer to run a subroutine|function once or repeatedly.
LABEL: Label, function, or FuncObj. 
STATE: Off = Disables a running timer
       On = Re-enables a disabled timer or start a new timer at 250 ms
       Delete = Disables and deletes existing timer
       N = Set timer to repeat every N ms
       -N = Set timer to run once in N ms
EX: SetTimer, UpdateCheck, % 5 * 60 * 1000 ;Run function every 5 minutes

SetTitleMatchMode, Mode|Speed 
USE: Set the text matching behavior for titles in WinTitle.
MODE:
    1 = Title must start with.
    2 = Title must contain.
    3 = Title must exactly match.
    RegEx = Title must match a RegEx pattern.
SPEED:
    Fast = Fast but certain controls might not be detected.
    Slow = Much slower but more thorough.
REMARK: Mode and speed must be set separately.
EX: SetTitleMatchMode, 

SetWinDelay, Delay 
USE: Set the delay that occurs after commands that operate on windows.
DELAY: Number. In ms. Default is 100.
    -1 = No delay    0  = Shortest delay    N = Delay in ms

SetWorkingDir, Dir 
USE: Changes the script's current working directory to Dir.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: SetWorkingDir, D:\Scripts

Shutdown 
USE: Shut down, restart, or logoff system.
CODE: The sum of any of the following:
    0 = Logoff    1 = Shutdown      2 = Reboot
    4 = Force     8 = Power down
EX: Shutdown, 5 ; Forces a shutdown

Sleep, Delay 
USE: Wait a specified amount of time before continuing.
DELAY: Time in milliseconds
    Min = 0
    Max = 2147483647
    -1  = No sleep but message queue is checked
EX: Sleep, % (1000 * 60 * 5) ; Sleeping for 5 minutes using an expression

Sort, Var, [Options] 
USE: Arranges the content of Var in Alphabetical, numerical, or random order.
OPTIONS:
    N  = Numeric sort           CL = Case insensitive locale
    R  = Reverse order          dX = Set delimiter to X value
    C  = Case sensitive          F = Custom Function. See docs
    U  = Remove duplicates      pN = Sort by N character position
    Random = Randomizes list     \ = Sort after last backslash in Var
    Z  = Delimiters at end of var infer a blank final entry
EX: Sort, myList, d| U ; Sort through a pipe delimited list. Remove duplicates.

SoundBeep, [Frequency, Duration] 
USE: Emits a tone from the PC speaker.
FREQUENCY: Number. 37 .. 32767. Default = 523
DURATION: Time in milliseconds. Default = 150
EX: SoundBeep, 750, 500

SoundGet, OutputVar, [Component, Control, Device] 
USE: Get various settings from a sound device.
COMPONENT: Default = MASTER
    CD     WAVE     ANALOG       TELEPHONE     MASTER|SPEAKERS
    N/A    LINE     DIGITAL      HEADPHONES
    AUX    SYNTH    PCSPEAKER    MICROPHONE
CONTROL: Default = VOLUME
    PAN     MONO    ONOFF     LOUDNESS     VOLUME|VOL   BASSBOOST
    BASS    MUTE    TREBLE    STEREOENH    QSOUNDPAN
DEVICE: Device number. Default = 1
ErrorLevel+EXO: 0 = Success. Failure will result in a string.
EX: SoundGet, sysVol, MASTER, VOLUME, 2

SoundGetWaveVolume, OutputVar, [Device] 
USE: Get the wave output volume percentage for a sound device.
DEVICE: Device number. Defaults to 1.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: SoundGetWaveVolume, vol, 2

SoundPlay, Filename, [Wait] 
USE: Plays a sound, video, or other supported file type.
FILENAME: Name of file to be played. For a standard system sound, use:
    *-1 = Simple beep    *16 = Hand/stop/error    *32 = Question
    *48 = Exclamation    *64 = Asterisk/info
WAIT: Omit = Immediately go to next line
    1|WAIT = Wait for file to finish before going to next line
ErrorLevel: 0 = Success. 1 = Failure.
EX: SoundPlay, C:\SoundFile.mp3, 1

SoundSet, Value, [Component, Control, Device] 
USE: Changes various settings of a sound device.
VALUE: N = Set to N percent
      +N = Increase by N percent
      -N = Decrease by N percent
COMPONENT: Default = MASTER
    CD     WAVE     ANALOG       TELEPHONE     MASTER|SPEAKERS
    N/A    LINE     DIGITAL      HEADPHONES
    AUX    SYNTH    PCSPEAKER    MICROPHONE
CONTROL: Default = VOLUME
    PAN     MONO    ONOFF     LOUDNESS     VOLUME|VOL   BASSBOOST
    BASS    MUTE    TREBLE    STEREOENH    QSOUNDPAN
DEVICE: Device number. Default = 1
ErrorLevel+EXO: 0 = Success. Failure will result in a string.
EX: SoundSet, +50, HEADPHONES, VOLUME, 1

SoundSetWaveVolume, Value, [Device] 
USE: Change the wave output volume for a sound device.
VALUE: N = Set to N percent
      +N = Increase by N percent
      -N = Decrease by N percent
DEVICE: Device number. Default = 1
ErrorLevel: 0 = success. 1 = failure.
EX: SoundSetWaveVolume, 100, 2

SplashImage, [Param1, Options, SubText, MainText, WinTitle, FontName] 
USE: Create, destroy, or update a splash image window.
PARAM1: File and path = Create new image
    Show = Show if hidden       Off = Destroy window
OPTIONS:
    xN = X coord           hN = N height         fmN = Font size MainText   
    yN = Y coord           Wn = N width          fsN = Font size SubText
    zxN = Image X coord    zhN = Image height    wmN = Font weight MainText
    zyN = Image Y coord    zwN = Image width     wsN = Font weight SubText
    cbN = Image color      ctN = Text color      cwN = Window color
    B = Borderless         B1 = Thin border      B2 = Dialog-style border
    M = Moveable           M1 = +Resizeable      M2 = +MenuBtns   
    T = Task Button        pN = starting pos     A = Disable always-on-top
    rN1-N2 = Range N1 to N2                      Hide = Hide initially
    cSM = Set S (SubText) or M (MainText) text align. 0 = Left. 1 = center.
EX: SplashImage, C:\Test.jpg, zh60 zw70 h120 w90, Sub, Main, Title

SplashTextOff 
USE: Destroy an existing splash window.

SplashTextOn, [Width, Height, Title, Text] 
USE: Creates a customizable Text popup window.
EX: SplashTextOn, 100, 40, Splash Title, Splash Text

SplitPath, InputVar, [OutName, OutDir, OutExt, OutNameNoExt, OutDrive] 
USE: Splits a file path or URL into name, directory, extension, and drive.
OUTNAME: File name with ext             EXT: File's extension type
NAMENOEXT: File name without ext        OUTDIR: Full directory
DRIVE: Drive file resides in
REMARK: Unneeded parts can be left blank.
EX: SplitPath, % A_ScriptFullPath, name, dir, ext, nameX, drive
    MsgBox, % name "`n" dir "`n" ext "`n" nameX "`n" drive

StatusBarGetText, OutputVar, [Part, WinTitle, WinText, NotTitle, NotText] 
USE: Get text from a standard status bar control.
PART: Status bar part to get text from.
ErrorLevel+EXO: 0 = Success. 1 = Failure + OutputVar = BLANK.
EX: StatusBarGetText, var, 1, A

StatusBarWait, [Text, SEC, Part, WinTitle, WinText, Check, NotTitle, NotText] 
USE: Wait until a window's status bar contains the specified Text.
BARTEXT: Text to look for. Blank by default.
SEC: Number of seconds to wait before timing out.
PART: Bar section number to monitor.
CHECK: How often the bar should be checked. In milliseconds.
ErrorLevel+EXO: 0 = Match found    1 = Command timed out
    2 = Status bar not accessible.
EX: StatusBarWait, Line: 1,, 1, a,, 100
    MsgBox, Found it!

StringCaseSense, State 
USE: Set string comparison case sensitivity. Default is off.
STATE: ON = String comparisons are case sensitive. A = a ; false
      Off = Case sensitivity is irrelevant. A = a ; true
   Locale = Case sensitivity is based on user locale.

StringGetPos, OutputVar, Input, SearchText, [Occurrence, Offset] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: InStr()
USE: Retrieves the position of the specified substring within a string.

StringLeft, OutputVar, Input, Count [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: SubStr()
USE: Retrieves characters from the left side of a string.

StringLen, OutputVar, Input [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: StrLen()
USE: Retrieves the number of characters in a string.

StringLower, OutputVar, Input, [TitleCase] 
USE: Converts a string to lowercase.
TITLECASE: If set to T, Title Case is used.
EX: StringLower, varLower, var

StringMid, OutputVar, Input, StartChar, [Count, L] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: SubStr()
USE: Retrieves characters from the middle of a string.

StringReplace, OutputVar, Input, Search, [Replace, All] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: StrReplace()
USE: Searches for Search with a new string.

StringRight, OutputVar, Input, Count [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: SubStr()
USE: Retrieves characters from the right side of a string.

StringSplit, OutputArray, Input, [Delimiters, OmitChars] [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: StrSplit()
USE: Split a string up into array elements.

StringTrimLeft, OutputVar, Input, Count [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: SubStr()
USE: Removes characters from the left side of a string.

StringTrimRight, OutputVar, Input, Count [DEPRECATED!] 
DEPRECATED: This command is not recommended for use in new scripts.
REPLACEMENT: Use the function: SubStr()
USE: Removes characters from the right side of a string.

StringUpper, OutputVar, Input, [TitleCase] 
USE: Converts a string to uppercase.
TITLECASE: If set to T, Title Case is used.
EX: StringUpper, varUpper, var

Suspend, Mode 
USE: Disables or enables all or selected hotkeys and hotstrings.
MODE: On  = Suspends all non-exempt hotkeys and hotstrings
      Off = Re-enable hotkeys and hotstrings
      Toggle = Toggles suspends current state
      Permit = Marks current subroutine exempt from suspend
REMARK: Hotkeys|Hotstrings that start with Suspend are exempt.

SysGet, OutputVar, SubCommand, [Value] 
USE: Get various system metrics. 
SUBCOMMAND:
    MonitorCount = Get total number of monitors.
    MonitorPrimary = Get primary monitor number.
    Monitor = Get coordinates of specified monitor.
    MonitorWorkArea = Get non-registered coordinates of specified monitor.
    MonitorName = Get the name of specified monitor.
    Number = See docs for list of numbers and what they get.

SysGet, OutputVar, MonitorCount 
USE: Get total number of monitors.

SysGet, OutputVar, MonitorPrimary 
USE: Get primary monitor number.

SysGet, OutputVar, Monitor, [N] 
USE: Get coordinates of specified monitor.
OUTPUTVAR: 4 variables are created ending in Left|Right|Top|Bottom
    OutputVarLeft|OutputVarRight|OutputVarTop|OutputVarBottom
N: Monitor number. Default = Primary monitor

SysGet, OutputVar, MonitorWorkArea, [N] 
USE: Get non-registered coordinates of specified monitor.
N: Monitor number. Default = Primary monitor
REMARK: The taskbar is a registered area.

SysGet, OutputVar, MonitorName, [N] 
USE: Get the name of specified monitor.
N: Monitor number. Default = Primary monitor

SysGet, OutputVar, Number 
USE: Get information from one of the many numbers.
REMARK: Far too many to list. See the docs.

Thread, SubCommand, [Value1, Value2] 
USE: Sets the priority or interruptibility of threads.
SUBCOMMAND:
    NoTimers  = Prevents timer interruptions.
    Priority  = Change current thread's priority level.
    Interrupt = Change newly launched thread's duration of interruptibility.

Thread, NoTimers, True|False 
USE: Prevents interruptions from any timers.

Thread, Priority, Level 
USE: Change the priority level of the current thread.
LEVEL: -2147483648 .. 2147483647
REMARK: Consider using the Critical command as it can buffer events.

Thread, Interrupt, [Duration, LineCount] 
USE: Change uninterpretable status for new threads.
DURATION: Time in milliseconds before interruptible.
LINECOUNT: Amount of lines to execute before interruptible.

ToolTip, [Text, X, Y, ID:=1] 
USE: Creates an always-on-top window anywhere on the screen.
TEXT: Text to display    BLANK = Hide ToolTip
X|Y: Coordinates to display ToolTip. If omitted, ToolTip stays near cursor.
ID: 1-20. Identifies which tooltip to operate on.
EX: ToolTip, Hello World,,,2 ; Sets second tooltip to Hello World

Transform, OutputVar, SubCommand, Value1, [Value2] 
USE: Performs miscellaneous tasks such as ASCII/Unicode conversion.
SUBCOMMAND:
    Unicode = Get or set Unicode text on clipboard.
    Deref = Expands variable references and escape sequences contained inside other variables.
    HTML = Convert ASCII characters above 127 to their HTML names.

Transform, OutputVar, Unicode, [String] 
USE: Get or set Unicode text on clipboard.
REMARK: This is for ANSI builds.
EX: Transform, Clipboard, Unicode, % Str ; Convert Str to Unicode an save to clipboard

Transform, OutputVar, Deref, String 
USE: Expand variable references and escape sequences inside other variables.
EX: Transform, 

Transform, OutputVar, HTML, String, [Flags] 
USE: Convert the ASCII characters in a String above 127 to their HTML names.
FLAGS: Sum of the following values. 
    1 = Convert to named expressions. € converts to &euro;
    2 = Convert to numbered expressions. € converts to &#8364;
EX: Transform, varHTML, HTML, varStr, 1 

TrayTip, [Title, Text, Seconds, Options] 
USE: Create a balloon message near the tray icon.
SECONDS: Time before closing. No effect on Vista or later.
Options: Default = 0. Otherwise, sum of the following:
    Function:               Dec:    Hex:
    Info icon               1       0x1
    Warning icon            2       0x2
    Error icon              3       0x3
    No sound notification   16      0x10
    Large icon              32      0x20
REMARK: Title must be included for Text to show up.
    Windows 10 may show a toast notification instead.
EX: TrayTip, Time:, %A_Hour%:%A_Min%,,0x1

UrlDownloadToFile, URL, Filename 
USE: Download a file from the Internet.
URL: Address to download from.
FILENAME: Path to save file to.
ErrorLevel+EXO: 0 = Success. 1 = Failure.
EX: UrlDownloadToFile, www.reddit.com, c:\reddit.html 

WinActivate, [WinTitle, WinText, NotTitle, NotText] 
USE: Activate a specified window.
EX: WinActivate, ahk_exe explorer.exe

WinActivateBottom, [WinTitle, WinText, NotTitle, NotText] 
USE: Activates the bottommost matching window.

WinClose, [WinTitle, WinText, Wait, NotTitle, NotText] 
USE: Closes the specified window.
WAIT: BLANK = No wait    0 = 500ms    N+ = Number in seconds
EX: WinClose, ahk_exe notepad.exe

WinGet  
WinGet, OutputVar, [SubCommand, WinTitle, WinText, NotTitle, NotText] 
USE: Get information about specified window(s) and their controls.
SUBCOMMAND:
    ID = Unique ID               ExStyle = Hex extended style
    PID = Process ID             Count = Total matching windows
    Style = Hex style            TransColor = Transparency color
    MinMax = Min/Max state       ProcessPath = Path and EXE name
    ProcessName = EXE name       Transparent = Transparency level
    IDLast = Bottom window ID    List = List of IDs for all matching windows
    ControlList = List of window controls
    ControlListHWND = List of window control handles

WinGet, OutputVar, ID, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the unique ID|HWND number of the first matching window.

WinGet, OutputVar, IDLast, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the unique ID|HWND number of the bottommost matching window.

WinGet, OutputVar, PID, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the process ID of the first matching window.

WinGet, OutputVar, ProcessName, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the name of the process|EXE that owns a window.

WinGet, OutputVar, ProcessPath, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the full path and name of the process|EXE that owns a window.

WinGet, OutputVar, Count, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the total number of existing windows that match.

WinGet, OutputVar, List, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the unique ID|HWND of all matching windows.
REMARK: Omitting all 4 WinTitle parameters will get all windows.

WinGet, OutputVar, MinMax, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the min|max state of a window.
OUTPUTVAR: 
    BLANK = No matching window exists      1 = Maximized
        0 = Not minimized or maximized    -1 = Minimized

WinGet, OutputVar, ControlList, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the control name of all window controls.
OUTPUTVAR: A linefeed delimited list of each control's ClassNN.
REMARK: BLANK = No controls found

WinGet, OutputVar, ControlListHWND, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the unique ID|HWND for each control in a window.
OUTPUTVAR: A linefeed delimited list of each unique ID|HWND.
REMARK: BLANK = No controls found

WinGet, OutputVar, Transparent, [WinTitle, WinText, NotTitle, NotText] 
USE: Get a window's degree of transparency.
OUTPUTVAR: Transparency level. 0 .. 255.    BLANK = Not found

WinGet, OutputVar, TransColor, [WinTitle, WinText, NotTitle, NotText] 
USE: Get a window's marked transparency color.
OUTPUTVAR: 6 digit hex color    BLANK = Not found

WinGet, OutputVar, Style, [WinTitle, WinText, NotTitle, NotText] 
USE: Get window's 8 digit hexadecimal style number.
OUTPUTVAR: BLANK = No matching windows

WinGet, OutputVar, ExStyle, [WinTitle, WinText, NotTitle, NotText] 
USE: Get window's 8 digit hexadecimal extended style number.
OUTPUTVAR: BLANK = No matching windows

WinGetActiveStats, Title, Width, Height, X, Y 
USE: Get title, size, and coords of active window.

WinGetActiveTitle, OutputVar 
USE: Get title of active window.
REMARK: Same as using WinGetTitle

WinGetClass, OutputVar, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the class name of the specified window.

WinGetPos, [X, Y, Width, Height, WinTitle, WinText, NotTitle, NotText] 
USE: Get the position and size of a specified window.
WINTITLE: To get desktop size, use: Program Manager

WinGetText, OutputVar, [WinTitle, WinText, NotTitle, NotText] 
USE: Get text from the specified window.
ErrorLevel+EXO: 0 = Success. 1 = Failure.

WinGetTitle, OutputVar, [WinTitle, WinText, NotTitle, NotText] 
USE: Get the title of the specified window.

WinHide, [WinTitle, WinText, NotTitle, NotText] 
USE: Hide the specified window.

WinKill, [WinTitle, WinText, Wait, NotTitle, NotText] 
USE: Forces the specified window to close.
WAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds

WinMaximize, [WinTitle, WinText, NotTitle, NotText] 
USE: Resizes specified window to maximum size.

WinMenuSelectItem, WinTitle, WinText, Menu, [SubMenu1, ..., SubMenu6, NotTitle, NotText] 
USE: Select a menu item from the specified window's menu bar.
MENU: Top-level menu item name. Ex: File
    Or Top-level menu item position. Ex: 1&
MENU: Item|submenu item name. Ex: Recent
    Or item|submenu item position. Ex: 4&
REMARK: Use 0& to access window's system menu.
ErrorLevel: 0 = Success. 1 = Failure.
EX: WinMenuSelectItem, Untitled - Notepad, , File, Open

WinMinimize, [WinTitle, WinText, NotTitle, NotText] 
USE: Collapses specified window to task bar|SysTray.

WinMinimizeAll 
USE: Collapse all windows to task bar|SysTray.

WinMinimizeAllUndo 
USE: Restores all previously minimized windows.

WinMove, WinTitle, [WinText], X, Y, [Width, Height, NotTitle, NotText] 
WinMove, X, Y
USE: Changes the position|size of the specified window.
REMARK: If X and Y are the only params, LastFoundWindow is used.
X|Y: Position window X|Y pixels from the screen's upper left corner.
WIDTH|HEIGHT: Set Width|Height of window in pixels.
EX: WinMove, A,, 0, 0, % A_ScreenWidth/2, % A_ScreenHeight/2

WinRestore, [WinTitle, WinText, NotTitle, NotText] 
USE: Returns window to it's original position and size.
REMARK: If WinTitle is omitted, LastFoundWindow is used.

WinSet, SubCommand, Value, [WinTitle, WinText, NotTitle, NotText] 
USE: Makes a variety of changes to the specified window.
SUBCOMMAND:
    AlwaysOnTop = Window stays above all other windows.
    Bottom|Top = Send window to bottom|top of stack. No activation.
    Disable|Enable|Redraw = Disables|Enables|Redraws the window.
    Style|ExStyle = Changes window's style|extended style.
    Region = Change the shape and amount of a window that is shown.
    Transparent = Set window transparency level.
    TransColor = Set color that will be invisible inside target window.

WinSet, AlwaysOnTop|Topmost, [State, WinTitle, WinText, NotTitle, NotText] 
USE: Forces a window to stay on top of all other windows.
STATE: On|Off|Toggle

WinSet, Bottom, [, WinTitle, WinText, NotTitle, NotText] 
USE: Send a window to the bottom of the window stack.

WinSet, Top, [, WinTitle, WinText, NotTitle, NotText] 
USE: Bring a window to the top of the window stack without activating it.

WinSet, Disable, [, WinTitle, WinText, NotTitle, NotText] 
USE: Disable a window.

WinSet, Enable, [, WinTitle, WinText, NotTitle, NotText] 
USE: Enables a window.

WinSet, Redraw, [, WinTitle, WinText, NotTitle, NotText] 
USE: Redraws a window.

WinSet, Style, N, [WinTitle, WinText, NotTitle, NotText] 
USE: Change the style of a window.
N: A hex style.
    +|- prefix will add|remove N from current style.
    ^ prefix will toggle N from current style.
    Not specifying a prefix will set style equal to N
ErrorLevel: 0 = Success. 1 = Failure.

WinSet, ExStyle, N, [WinTitle, WinText, NotTitle, NotText] 
USE: Change the extended style of a window.
N: A hex style.
    +|- prefix will add|remove N from current style.
    ^ prefix will toggle N from current style.
    Not specifying a prefix will set style equal to N

WinSet, Region, [Options, WinTitle, WinText, NotTitle, NotText] 
USE: Change the shape of a window to be the specified rectangle, ellipse, or polygon.
OPTIONS: Separate options with a space.
    wN = Width     e = Ellipse              BLANK = Restore to original
    hN = Height    X-Y = Coordinate pair
    rN1-N2 = Rectangle corners rounded using ellipses
        N1 = Ellipse width. N2 = Ellipse height. 
    Polygon = Omit W and H. Use multiple X-Y pairs.
    Wind = Force polygon to us winding method.
ErrorLevel: 0 = Success. 1 = Failure.

WinSet, Transparent, [N, WinTitle, WinText, NotTitle, NotText] 
USE: Set the transparency of a window.
N: Transparency. 0 .. 255.    OFF = Disable transparency

WinSet, TransColor, Color [Alpha], [WinTitle, WinText, NotTitle, NotText] 
USE: Set transparency level for chosen Color.
COLOR: RGB hex color or color name. Off = Disable transparency.
ALPHA: Set the alpha for a color. 0 .. 255.
REMARK: There must be a space between Color and Alpha.
CHEAT: See Cheat_HTML_Color_Names

WinSetTitle, WinTitle, [WinText], NewTitle, [NotTitle, NotText] 
WinSetTitle, NewTitle
USE: Changes the title of the specified window.
REMARK: If NewTitle is the only parameter, LastFoundWindow is used.

WinShow, [WinTitle, WinText, NotTitle, NotText] 
USE: Unhide the specified window.

WinWait, [WinTitle, WinText, Wait, NotTitle, NotText] 
USE: Waits until the specified window exists.
WAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds
ErrorLevel: 0 = Success. 1 = Timed out.

WinWaitActive, [WinTitle, WinText, Wait, NotTitle, NotText] 
USE: Waits until the specified window is active.
WAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds
ErrorLevel: 0 = Success. 1 = Timed out.

WinWaitClose, [WinTitle, WinText, Wait, NotTitle, NotText] 
USE: Wait until the specified window does not exist.
WAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds
ErrorLevel: 0 = Success. 1 = Timed out.

WinWaitNotActive, [WinTitle, WinText, Wait, NotTitle, NotText] 
USE: Waits until the specified window is not active.
WAIT: BLANK = No wait    0 = 500ms    N+ = Number of seconds
ErrorLevel: 0 = Success. 1 = Timed out.



### =============== ESCAPE_SEQUENCES ===============

## ======== General ========

`n 
USE: Linefeed (LF)

`r 
USE: Carriage Return (CR)

`b 
USE: Backspace

`t 
USE: Tab

`v 
USE: Vertical Tab

`a 
USE: Alert (Bell)

`f 
USE: Form Feed



### =============== OBJECT_METHODS_AND_PROPERTIES ===============

## ======== AHK_OBJECT ========
# ==== METHOD ====
Clone
Count
Delete
GetAddress
GetCapacity
HasKey
InsertAt
Length
MaxIndex
MinIndex
_NewEnum
Pop
Push
RemoveAt
SetCapacity

# ==== PROPERTY ====
Base

## ======== FILE_OBJECT ========
# ==== METHOD ====

Read
Write
ReadLine
WriteLine
RawRead
RawWrite
Seek
Tell
Close

# ==== PROPERTY ====

Pos
Length
AtEOF
Encoding
__Handle

## ======== FUNC_OBJECT ========
# ==== METHOD ====

Call
Bind
IsByRef
IsOptional

# ==== PROPERTY ====

PROPERTY
Name
IsBuiltIn
IsVariadic
MinParams
MaxParams

## ======== RegEx_MATCH_OBJECT ========
# ==== PROPERTY ====

Pos
Len
Value
Name
Count
Mark

## ======== CLASS ========
# ==== METHOD ====

__Call
__Class
__Delete
__New

# ==== PROPERTY ====

__Set
__Get


### =============== KEYS_AND_BUTTONS ===============

## ======== Keys_General ========
Space
Tab
Enter
Return
Escape
Esc
Backspace
BS

## ======== Keys_Nav ========
End
Home
PgDn
PgUp
Ins
Insert
Del
Delete
Up
Down
Left
Right

## ======== Keys_Numpad ========
Numpad0
Numpad1
Numpad2
Numpad3
Numpad4
Numpad5
Numpad6
Numpad7
Numpad8
Numpad9
NumpadIns
NumpadEnd
NumpadDown
NumpadPgDn
NumpadLeft
NumpadClear
NumpadRight
NumpadHome
NumpadPgUp
NumpadDot
NumpadDel
NumpadDiv
NumpadMult
NumpadAdd
NumpadSub
NumpadEnter

## ======== Keys_Lock ========
CapsLock
ScrollLock
NumLock

## ======== Keys_Function ========
F1
F2
F3
F4
F5
F6
F7
F8
F9
F10
F11
F12
F13
F14
F15
F16
F17
F18
F19
F20
F21
F22
F23
F24

## ======== Keys_Modifier ========
LWin
RWin
Control
LControl
RControl
Ctrl
LCtrl
RCtrl
Alt
LAlt
RAlt
Shift
LShift
RShift

## ======== Keys_Browser ========
Browser_Back
Browser_Forward
Browser_Refresh
Browser_Stop
Browser_Search
Browser_Favorites
Browser_Home

## ======== Keys_Volume ========
Volume_Mute
Volume_Down
Volume_Up

## ======== Keys_Other ========
AppsKey
PrintScreen
CtrlBreak
Pause
Break
Help
Sleep
SC
VK

## ======== Keys_Media ========
Media_Next
Media_Prev
Media_Stop
Media_Play_Pause

## ======== Keys_Launch ========
Launch_Mail
Launch_Media
Launch_App1
Launch_App2

## ======== Buttons_Mouse ========
LButton
MButton
RButton
XButton1
XButton2

## ======== Mouse_Wheel ========
WheelDown
WheelUp
WheelLeft
WheelRight

## ======== Joy_Buttons ========
Joy1
Joy2
Joy3
Joy4
Joy5
Joy6
Joy7
Joy8
Joy9
Joy10
Joy11
Joy12
Joy13
Joy14
Joy15
Joy16
Joy17
Joy18
Joy19
Joy20
Joy21
Joy22
Joy23
Joy24
Joy25
Joy26
Joy27
Joy28
Joy29
Joy30
Joy31
Joy32

## ======== Joy_Other ========
JoyX
JoyY
JoyZ
JoyR
JoyU
JoyV
JoyAxes
JoyButtons
JoyInfo
JoyName
JoyPOV



### =============== SUBCOMMANDS ===============

## ======== Control ========
Check
Uncheck
Enable
Disable
Show
Hide
Style
ExStyle
ShowDropDown
HideDropDown
TabLeft
TabRight
Add
Delete
Choose
EditPaste
ChooseString

## ======== ControlGet ========
List
Checked
Enabled
Visible
Tab
FindString
Choice
LineCount
CurrentLine
CurrentCol
Line
Selected
Style
ExStyle
HWND

## ======== Drive ========
Label
Lock
Unlock
Eject

## ======== DriveGet ========
List
Capacity
FileSystem
Label
Serial
Type
Status
StatusCD

## ======== GUI ========
New
Add
Show
Submit
Cancel
Hide
Destroy
Font
Color
Margin
Menu
Minimize
Maximize
Restore
Flash
Default
Bold
Italic
Strike
Underline
Norm

## ======== GuiControl ========
Text
Move
MoveDraw
Focus
Disable
Enable
Hide
Show
Delete
Choose
ChooseString
Font
Options

## ======== GuiControlGet ========
Pos
Focus
FocusV
Enabled
Visible
HWND
Name

## ======== Menu ========
Tray
Add
Insert
Delete
DeleteAll
Rename
Check
Uncheck
ToggleCheck
Enable
Disable
ToggleEnable
Default
NoDefault
Standard
NoStandard
Icon
NoIcon
Tip
Show
Color
Click
MainWindow
NoMainWindow
UseErrorLevel

## ======== Process ========
Exist
Close
List
Priority
Wait
WaitClose
AboveNormal
BelowNormal
High
Low
RealTime

## ======== SysGet ========
MonitorCount
MonitorPrimary
Monitor
MonitorWorkArea
MonitorName

## ======== Thread ========
NoTimers
Priority
Interrupt

## ======== Transform ========
Unicode
Deref
HTML

## ======== WinGet ========
ID
IDLast
PID
ProcessName
ProcessPath
Count
List
MinMax
ControlList
ControlListHWND
Transparent
TransColor
Style
ExStyle

## ======== WinSet ========
AlwaysOnTop
Bottom
Top
Disable
Enable
Redraw
Style
ExStyle
Region
Transparent
TransColor



### =============== KEYWORDS_TYPES ===============

## ======== Control Types ========
Text
Edit
UpDown
Picture
Pic
Button
Checkbox
Radio
DropDownList
DDL
ComboBox
ListBox
ListView
TreeView
Link
Hotkey
DateTime
MonthCal
Slider
Progress
GroupBox
Tab3
Tab2
Tab
StatusBar
ActiveX

## ======== Data Types ========
AStr
Char
Double
Float
Int
Int64
Ptr
Short
Str
UChar
UInt
UPtr
UShort
WStr

## ======== Encoding Types ========
UTF-8
UTF-8-RAW
UTF-16
UTF-16-RAW
CP

## ======== Variant Type Constants ========
VT_ARRAY
VT_BOOL
VT_BSTR
VT_BYREF
VT_CY
VT_DATE
VT_DECIMAL
VT_DISPATCH
VT_EMPTY
VT_ERROR
VT_I1
VT_I2
VT_I4
VT_I8
VT_INT
VT_NULL
VT_R4
VT_R8
VT_RECORD
VT_UI1
VT_UI2
VT_UI4
VT_UI8
VT_UINT
VT_UNKNOWN
VT_VARIANT

## ======== Base HTML Colors ========
Aqua
Black
Blue
Fuchsia
Gray
Green
Lime
Maroon
Navy
Olive
Purple
Red
Silver
Teal
White
Yellow

## ======== WinTitle Types ========
ahk_class
ahk_exe
ahk_group
ahk_id
ahk_pid

## ======== Command Line Parameters ========
Force
Restart
ErrorStdOut
Debug
CP
iLib



### =============== KEYWORDS_OTHER ===============

## ======== #Hotstring ========
NoMouse
EndChars

## ======== #SingleInstance ========
Force
Ignore
Off

## ======== #Warn ========
UseUnsetLocal
UseUnsetGlobal
UseEnv
LocalSameAsGlobal
ClassOverwrite
All
MsgBox
StdOut
OutputDebug
Off

## ======== ComObjValue() ========
Name
IID
Class
CLSID

## ======== DllCall() ========
CDecl

## ======== Exception() ========
Message
What
Extra
File
Line

## ======== Hotstring() ========
On
Off
Toggle

## ======== LoadPicture() ========
Icon
GDI+

## ======== LV_Add() ========
Check
Col
Focus
Icon
Select
Vis

## ======== LV_GetCount() ========
Selected
Column

## ======== LV_GetNext() ========
Checked
Focused

## ======== LV_Insert() ========
Check
Col
Focus
Icon
Select
Vis

## ======== LV_InsertCol() ========
Auto
AutoHdr
Icon
IconRight
Float
Integer
Text
Center
Left
Right
Case
CaseLocale
Desc
Logical
NoSort
Sort
SortDesc
Uni

## ======== LV_ModifyCol() ========
Center
Text
Uni
IconRight
Case
Left
Auto
NoSort
Desc
Right
Sort
IconN
Integer
SortDesc
AutoHdr
Float
Logical
CaseLocale

## ======== RegisterCallback() ========
Fast
CDecl

## ======== TV_Add() ========
Bold
First
Icon
Check
Expand
Select
Sort
Vis
VisFirst

## ======== TV_Get() ========
Expand
Expanded
Check
Checked
Bold

## ======== TV_GetNext() ========
Full
Check
Checked

## ======== TV_Modify() ========
Bold
Icon
Check
Expand
Vis
VisFirst
Select
Sort
First

## ======== If ========
Between
In
Contains
Is
Integer
Float
Number
Digit
XDigit
Alpha
Upper
Lower
AlNum
Space
Time

## ======== IfMsgBox ========
Yes
No
OK
Cancel
Abort
Ignore
Retry
Continue
TryAgain
Timeout

## ======== Loop ========
Files
Parse
Read
Reg
CSV

## ======== BlockInput ========
On
Off
Send
Mouse
SendAndMouse
Default
MouseMove
MouseMoveOff

## ======== Click ========
Left
Right
Middle
X1
X2
WheelUp
WU
WheelDown
WD
WheelLeft
WL
WheelRight
WR
Down
Up
Relative
Rel

## ======== ControlClick ========
Left
Right
Middle
X1
X2
WheelUp
WU
WheelDown
WD
WheelLeft
WL
WheelRight
WR
Down
Up
Relative
Rel
Pos
NA

## ======== ControlGet ========
Selected
Focused
Col
Count

## ======== ControlSend ========
ahk_parent

## ======== CoordMode ========
ToolTip
Pixel
Mouse
Caret
Menu
Screen
Relative
Window
Client

## ======== EnvSub ========
Days
Hours
Minutes
Seconds

## ======== FormatTime ========
dd
ddd
dddd
MM
MMM
MMMM
yy
yyyy
gg

## ======== GUI ========
Center
xCenter
yCenter
AutoSize
Minimize
Maximize
Restore
NoActivate
NA
Hide
NoHide
AlwaysOnTop
Border
Caption
Delimiter
Disabled
DPIScale
HWND
Label
LastFound
LastFoundExist
MaximizeBox
MinimizeBox
MinSize
MaxSize
OwnDialogs
Owner
Parent
Resize
SysMenu
Theme
ToolWindow
x+
y+
xp
xp+
yp
yp+
xm
xm+
ym
ym+
xs
xs+
ys
ys+
AltSubmit
Disabled
Hidden
Left
Right
Center
Section
TabStop
Wrap
VScroll
HScroll
BackgroundTrans
Background
Border
DoubleClick
ColClick


## ======== GuiControl-Checkbox ========
Check3
Checked
CheckedGray

## ======== GuiControl-DateTime ========
LongDate
Time
Choose
Range
Right

## ======== GuiControl-DropDownList ========
DDL
Choose
Uppercase
Lowercase
Sort

## ======== GuiControl-Edit ========
Limit
Lowercase
Multi
Number
Password
ReadOnly
Uppercase
WantCtrlA
WantReturn
WantTab
Wrap

## ======== GuiControl-Hotkey ========
Limit

## ======== GuiControl-ListBox ========
Choose
Multi
ReadOnly
Sort
SortDesc
WantF2
Icon
Tile
IconSmall
List
Report

## ======== GuiControl-ListView ========
AltSubmit
Background
Checked
Count
Grid
Hdr
LV
Multi
NoSortHdr
NoSort
ReadOnly

## ======== GuiControl-MonthCal ========
Multi
Range

## ======== GuiControl-Progress ========
Background
Range
Smooth
Vertical

## ======== GuiControl-Radio ========
Group
Checked

## ======== GuiControl-Slider ========
Buddy
Center
Invert
Left
Line
NoTicks
Page
Range
Thick
ThickInterval
ToolTip
Vertical

## ======== GuiControl-Tab ========
Choose
Background
Buttons
Left
Right
Bottom
Wrap

## ======== GuiControl-TreeView ========
AltSubmit
Background
Buttons
Checked
HScroll
ImageList
Lines
ReadOnly
WantF2

## ======== GuiControl-UpDown ========
Horz
Left
Range
Wrap

## ======== Hotkey ========
On
Off
Toggle
AltTab
UseErrorLevel
AltTab
ShiftAltTab
AltTabAndMenu
AltTabMenuDismiss

## ======== ImageSearch ========
Icon
Trans

## ======== Menu ========
Radio
Right
Break
BarBreak

## ======== MouseClick ========
Left
Right
Middle
X1
X2
WheelUp
WU
WheelDown
WD
WheelLeft
WL
WheelRight
WR
Relative
Rel

## ======== MouseClickDrag ========
Left
Right
Middle
X1
X2
WheelUp
WU
WheelDown
WD
WheelLeft
WL
WheelRight
WR

## ======== PixelGetColor ========
Alt
Slow
RGB

## ======== PixelSearch ========
Fast
RGB

## ======== Progress ========
Hide
ZH
ZW
ZX
ZY
FM
FS
WM
WS
CB
CW

## ======== RegRead ========
## ======== RegWrite ========
ahk_default
REG_BINARY
REG_DWORD
REG_EXPAND_SZ
REG_MULTI_SZ
REG_SZ
HKEY_CLASSES_ROOT
HKCR
HKEY_CURRENT_USER
HKCU
HKEY_LOCAL_MACHINE
HKLM
HKEY_USERS
HKU
HKEY_CURRENT_CONFIG
HKCC

## ======== Run ========
RunAs*
Max
Min
Hide
UseErrorLevel

## ======== RunWait ========
RunAs*
Max
Min
Hide
UseErrorLevel

## ======== Send ========
{Raw}
{Text}
{Blind}
DownR
DownTemp


## ======== SendMode ========
Event
Input
InputThenPlay
Play

## ======== SetCapsLockState ========
## ======== SetNumLockState ========
## ======== SetScrollLockState ========
On
Off
AlwaysOn
AlwaysOnOff

## ======== SetTitleMatchMode ========
RegEx
Fast
Slow

## ======== SoundGet ========
MASTER
SPEAKERS
DIGITAL
LINE
MICROPHONE
SYNTH
CD
TELEPHONE
PCSPEAKER
WAVE
AUX
ANALOG
HEADPHONES
VOLUME
VOL
ONOFF
MUTE
MONO
LOUDNESS
STEREOENH
BASSBOOST
PAN
QSOUNDPAN
BASS
TREBLE
EQUALIZER

## ======== SoundSet ========
MASTER
SPEAKERS
DIGITAL
LINE
MICROPHONE
SYNTH
CD
TELEPHONE
PCSPEAKER
WAVE
AUX
ANALOG
HEADPHONES
VOLUME
VOL
ONOFF
MUTE
MONO
LOUDNESS
STEREOENH
BASSBOOST
PAN
QSOUNDPAN
BASS
TREBLE
EQUALIZER

## ======== SplashImage ========
Hide
ZH
ZW
ZX
ZY
FM
FS
WM
WS
CB
CW

## ======== StringCaseSense ========
On
Off
Locale

## ======== Suspend ========
On
Off
ToggleCheck
Permit

## ======== Continuation Section ========
Join
LTrim
RTrim
Comments
Comment
Com

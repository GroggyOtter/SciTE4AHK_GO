/* DIRECTIVES */
#AllowSameLineComments \nDEPRECATED: This directive was removed. AutoIt scripts are no longer supported.
#ClipboardTimeout Num\nUSE: Amount of time to wait for clipboard access after first attempt fails.\nNUM:\n    -1 = Try indefinitely.\n    0  = Try once.\n    1+ = Time in milliseconds to wait.
#CommentFlag Str \nDEPRECATED: This directive is not recommended for use in \n    new scripts because it does more harm than good.\nREMARK: Removed in v2.
#Delimiter Str\nDEPRECATED: This directive is not recommended for use in \n    new scripts because it does more harm than good.\nREMARK: Removed in v2.
#DerefChar Str\nDEPRECATED: This directive is not recommended for use in \n    new scripts because it does more harm than good.\nREMARK: Removed in v2.
#ErrorStdOut \nUSE: Syntax errors that prevent a script from launching are sent to stderr\n    rather than displaying a dialog.
#EscapeChar Str\nDEPRECATED: This directive is not recommended for use in \n    new scripts because it does more harm than good.\nREMARK: Removed in v2.
#HotkeyInterval Num \nUSE: Used to detect hotkey spam and generate a warning dialog.\nNUM: Time in milliseconds. Default = 2000.\nREMARK: This setting provides the "Interval" for #MaxHotkeysPerInterval.
#HotkeyModifierTimeout, Num \nUSE: Affects behavior of the Ctrl | Alt | Shift | Win modifiers.\nNUM: -1 ... N\n    -1 = Try indefinitely.\n    0  = Try once.\n    N  = Any time in milliseconds to wait.
#Hotstring  \n#Hotstring NoMouse\n#Hotstring EndChars Str\n#Hotstring Options\nUSE: Sets default options | end characters for all following hotstrings.\n    NoMouse = Mouse clicks will not reset the hotstring recognizer.\n    EndChars = Str of characters that will activate end of hotstring.\n    Options = Alter the default options of subsequent hotstrings.\nREMARK: Each of these has its own card.
#Hotstring NoMouse \nUSE: Mouse clicks will not reset the hotstring recognizer.\nREMARK: This is a script wide command.
#Hotstring EndChars Str\nUSE: String of characters that will activate end of hotstring.
#Hotstring Options \nUSE: Alter the default options of subsequent hotstrings.\nOPTIONS: All options but Kn, Pn, and X can be disabled by adding a 0. *0 T0\n    * = Trigger on match    ? = Treat each keystroke as a possible new hotstring\n    C = Case sensitive      B = Backspaces hotstring text before sending\n    R = {Raw} Send mode     O = End character is not sent\n    T = {Text} Send mode    C1 = Hotstring does not confrom to typed case\n    Pn = Priority P1 to P5  SI | SP | SE = Send method Input | Play | Event\n    Kn = SE:Key delay in ms SP:Key duration in ms\n    X = Text after inline hotstring is treated as a command\n    Z = Reset hotstring recognizer after hotstring fires
#If [Expression] \nUSE: Creates context-sensitive hotkeys and hotstrings based on an expression.\nREMARK: Use a BLANK #If to disable the prior #If directive.\nEX: #If GetKeyState("Shift", "P")
#IfTimeout Num\nUSE: Set the maximum time an #If directive can evaluate an expression.\nNUM: Time in milliseconds.
#IfWinActive [WinTitle, WinText]\nUSE: Hotkeys following this directive are enabled if active window matches.\nEX: #IfWinActive, ahk_exe notepad.exe\nALT: Consider using #If WinActive()\nCHEAT: See Cheat_Sheat_WinTitle
#IfWinExist, [WinTitle, WinText]\nUSE: Hotkeys following this directive are enabled if window match exists.\nEX: #IfWinExist, ahk_exe calc.exe\nALT: Consider using #If WinExist()\nCHEAT: See Cheat_Sheat_WinTitle
#IfWinNotActive, [WinTitle, WinText]\nUSE: Hotkeys after this directive are enabled if active window doesn't match.\nEX: #IfWinActive, ahk_exe notepad.exe\nALT: Consider using #If !WinActive()\nCHEAT: See Cheat_Sheat_WinTitle
#IfWinNotExist, [WinTitle, WinText]\nUSE: Hotkeys following this directive are enabled if window match doesn't exists.\nEX: #IfWinExist, ahk_exe calc.exe\nALT: Consider using #If !WinExist()\nCHEAT: See Cheat_Sheat_WinTitle
#Include[Again] Path\nUSE: Import a file or set working directory for #Include/FileInstall\nPATH: \n    Path\File.ahk = Import File.ahk. Looks in working dir if only a file name.\n    Directory = Change the working dir for #Include/#IncludeAgain/FileInstall.\n    LibraryName = A library file or function name.\nREMARK: Path cannot contain double quotes, wildcards, or non-built-in variables.\nALT: #IncludeAgain, unlike #Include, allows multiple loads of the same file.
#InputLevel [Num]\nUSE: Set artificial keyboard and mouse event interrupt levels.\nNUM: 0 ... 100\nREMARK: See SendLevel docs for more info.
#InstallKeybdHook \nUSE: Forces the unconditional installation of the keyboard hook.
#InstallMouseHook \nUSE: Forces the unconditional installation of the mouse hook.
#KeyHistory, Num\nUSE: Set maximum number of keyboard & mouse events in KeyHistory window.\nNUM: 0 ... 500\n    0   = Disable all key history\n    40  = Default\n    500 = Max
#LTrim [Value] \nUSE: Trims tabs and spaces from the beginning and end of traditional strings.\n    Primarily used to allow the continuation section to be indented.\nVALUE: Off = Disabled #LTrim    BLANK = Enables #LTrim\nEX: #LTrim \n    var =     Hello World.    ; V=> Hello World.
#MaxHotkeysPerInterval Num \nUSE: Define number of times a hotkey must fire per interval.\nNUM: Number of times a hotkey can fire.\nREMARK: The interval time is determined by #HotkeyInterval
#MaxMem Num\nUSE: Sets the maximum capacity of each variable to Num in megabytes.\nNUM: Megabytes. 1 ... 4095\n    A number under 1 defaults to 1 and over 4095 defaults to 4095.
#MaxThreads Num \nUSE: Sets the maximum number of simultaneous threads.\nNUM: Between 1 and 255. A number over 255 defaults to 255.\nREMARK: This is a global setting.
#MaxThreadsBuffer Value\nUSE: Set hotkey behavior when the #MaxThreadsPerHotkey limit is reached.\nVALUE: One of the following words: \n    On = Hotkeys are buffered    Off = Hotkeys are ignored
#MaxThreadsPerHotkey Num \nUSE: Set the maximum number of simultaneous threads per hotkey | hotstring.\nNUM: 1 ... 255
#MenuMaskKey Str \nUSE: Changes which key is used to mask Win or Alt keyup events.\nSTR: A keyname, virtual key, or scan code.
#NoEnv \nUSE: Avoids checking empty variables to see if they are environment variables.\nREMARK: Recommended for all new scripts as increases performance.\n    This is a default in v2.
#NoTrayIcon \nUSE: Disables showing of the tray icon.\nREMARK: Reenable tray icon with:\n    Menu, Tray, Icon
#Persistent \nUSE: Keeps a script running until ExitApp is reached.\nREMARK: Automatically enabled if the script contains any of the following:\n    Hotkey    Hotstring    OnMessage()    GUI
#SingleInstance Value\nUSE: Controls whether multiple instances of a script can run simultaneously.\nVALUE: One of the following words:\n    Force = Automatically replace any running instances of this script.\n    Ignore = Script will not run if another instance of it is already running.\n    Off = Deafult. Allows multiple instances of a script to run.
#UseHook Value \nUSE: Forces the use of the hook to implement all | some keyboard hotkeys.\nVALUE: On = Forces hook use    Off = Hook is not used
#Warn [Type, Mode]\nUSE: Enables | disables warnings for specific conditions which may\n    indicate an error. Like typos, missing "global" declaration, etc.\nTYPE: Enable | disable specific warnings. If BLANK, default is All.\n    UseUnsetLocal = Warn when a local variable read before being declared.\n    UseUnsetGlobal = Warn when a global variable read before being declared.\n    UseEnv = Warn when a non-declared variable is called and an environmental\n        variable's data is loaded isntead. See #NoEnv\n    LocalSameAsGlobal = Display a warning at runtime if any undeclared local\n        variables share the same name as a global variable.\n    ClassOverwrite = At runtime, warn if any variables replace a class.\n    All = Use all supported warning types.\nMODE: How warnings should be delivered. If BLANK, default is MsgBox.\n    MsgBox = Use a MsgBox to display the warning.\n    StdOut = Send warning, filename and line number to StdOut.\n    OutputDebug = Send warning to the debugger for display.\n    Off = Disable warnings of the given Type.
#WinActivateForce \nUSE: Window activation uses a more forceful method.\nREMARK: Affects: WinActivate|WinActivateBottom|GroupActivate

/* BUILT_IN_VARIABLES */
A_AhkPath \nUSE: Contains the path and name of the exe running the current script.\nRETURN: String. Format: Path\n    Uncompiled Script = Path is gotten from current running process.\n    Compiled Script = Path is gotten from the following registry key:\n        HKLM\SOFTWARE\AutoHotkey\InstallDir\nREMARK: If script is compiled and registry key does not exist, return BLANK.\nEX: MsgBox, % A_AhkPath ; D=> C:\Program Files\AutoHotkey\AutoHotkey.exe
A_AhkVersion \nUSE: Contains version number of the current running script's AHK interpreter.\nRETURN: Number. Fomat: #.#.#.#\nREMARK: Versions below v1.0.22 will return BLANK\n    The #.#.#.# format is recognized by AHK. See EX:\nEX: MsgBox, % A_AhkVersion         ; V=> 1.30.0.0\n    if (A_AhkVersion >= 1.0.22.00) ; R=> True
A_AppData \nUSE: Contains full path and name of current user's AppData folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_AppData ; V=> C:\Users\GroggyOtter\AppData\Roaming
A_AppDataCommon \nUSE: Contains full path and name of the common AppData folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_AppData ; V=> C:\ProgramData
A_Args \nUSE: Contains an array of parameters (if any) passed to the script at launch.\nRETURN: Object. Numbered array.\nREMARK: Use a for-loop to enumerate array.\nEX: for key, data in A_Args\n        MsgBox, % "key: " key "`ndata: " data
A_AutoTrim \nUSE: Contains the current setting for AutoTrim.\nRETURN: String. On|Off\nEX: MsgBox, % A_AutoTrim ; V=> On
A_BatchLines \nUSE: Contains the number of Lines|Time in milliseconds for SetBatchLines.\nRETURN: Mix. String if time. Number if lines.\nREMARK: If A_BatchLines ends in ms, it's time. Otherwise it's Lines.\n    Synonymous with A_NumBatchLines.\nEX: MsgBox, % A_BatchLines ; V=> 10ms
A_CaretX \nUSE: Contains the current X coord of the caret.\nRETURN: Number.\nREMARK: Coordinate is based on A_CoordModeCaret.\nEX: MsgBox, % A_CaretX ; V=> 100
A_CaretY \nUSE: Contains the current Y coord of the caret.\nRETURN: Number.\nREMARK: Coordinate is based on A_CoordModeCaret.\nEX: MsgBox, % A_CaretY ; V=> 100
A_ComputerName \nUSE: This computer's name as seen on the network.\nRETURN: String.\nEX: MsgBox, % A_ComputerName ; V=> GROGGYPC
A_ComSpec \nUSE: Contains the path to the system's Command Prompt.\nRETURN: String. Format: Path\nREMARK: Synonymous with the variable ComSpec\nEX: MsgBox, % A_ComSpec ; V=> C:\Windows\system32\cmd.exe
A_ControlDelay \nUSE: Contains the current delay setting for SetControlDelay.\nRETURN: Number. In milliseconds. -1 ... N\nEX: MsgBox, % A_ControlDelay ; V=> 20
A_CoordModeCaret \nUSE: Contains the current CoordMode setting for caret.\nRETURN: String. Screen|Window|Client\nEX: MsgBox, % A_CoordModeCaret ; V=> Screen
A_CoordModeMenu \nUSE: Contains the current CoordMode setting for menu.\nRETURN: String. Screen|Window|Client\nEX: MsgBox, % A_CoordModeMenu ; V=> Screen
A_CoordModeMouse \nUSE: Contains the current CoordMode setting for mouse.\nRETURN: String. Screen|Window|Client\nEX: MsgBox, % A_CoordModeMouse ; V=> Screen
A_CoordModePixel \nUSE: Contains the current CoordMode setting for pixel.\nRETURN: String. Screen|Window|Client\nEX: MsgBox, % A_CoordModePixel ; V=> Screen
A_CoordModeToolTip \nUSE: Contains the current CoordMode setting for ToolTip.\nRETURN: String. Screen|Window|Client\nEX: MsgBox, % A_CoordModeToolTip ; V=> Screen
A_Cursor \nUSE: Contains the current type of mouse cursor being displayed.\nRETURN: String. Note: NWSE = NorthWest to SouthEast.\n    AppStarting    IBeam    SizeAll     SizeWE\n    Arrow          Icon     SizeNESW    UpArrow\n    Cross          No       SizeNS      Wait\n    Help           Size     SizeNWSE    Unknown\nREMARK: Hand-shaped pointing & grabbing cursors are classified as Unknown.\nEX: MsgBox, % A_Cursor ; V=> IBeam
A_DD \nUSE: Contains the current 2-digit day.\nRETURN: Number. 01 ... 31\nREMARK: Synonymous with A_MDay.\nEX: MsgBox, % A_DD ; V=> 30
A_DDD \nUSE: Contains the abbreviated current day of the week in current user's language.\nRETURN: String. Sun|Mon|Tue|Wed|Thu|Fri|Sat\nEX: MsgBox, % A_DDD ; V=> Sun
A_DDDD \nUSE: Contains the current day of the week in current user's language.\nRETURN: String. Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday\nEX: MsgBox, % A_DDDD ; V=> Sunday
A_DefaultGui \nUSE: Contains the name|number of the current thread's default GUI.\nRETURN: String.\nEX: MsgBox, % A_DefaultGui ; V=> MyGui
A_DefaultListView \nUSE: Contains the variable name or HWND of the current default ListView control. \nRETURN: String.\nREMARK: If the default GUI lacks a ListView, this variable is BLANK.\nEX: MsgBox, % A_DefaultListView ; V=> 0x152014e
A_DefaultMouseSpeed \nUSE: Contains the current speed for SetDefaultMouseSpeed.\nRETURN: Number. 0 ... 100\nREMARK: This number is always decimal. 2 is the default speed.\nEX: MsgBox, % A_DefaultMouseSpeed ; V=> 2
A_DefaultTreeView \nUSE: Contains the variable name or HWND of the current default TreeView control. \nRETURN: String.\nREMARK: If the default GUI lacks a TreeView, this variable is BLANK.\nEX: MsgBox, % A_DefaultTreeView ; V=> 0x152014e
A_Desktop \nUSE: Contains the full path to current user's desktop folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_Desktop ; V=> C:\Users\GroggyOtter\Desktop
A_DesktopCommon \nUSE: Contains the full path to the common desktop folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_DesktopCommon ; V=> C:\Users\Public\Desktop
A_DetectHiddenText \nUSE: Contains the current setting for DetectHiddenText.\nRETURN: String. On|Off\nEX: MsgBox, % A_DetectHiddenText ; V=> On
A_DetectHiddenWindows \nUSE: Contains the current setting for DetectHiddenWindows.\nRETURN: String. On|Off\nEX: MsgBox, % A_DetectHiddenWindows ; V=> Off
A_EndChar \nUSE: Contains the triggering character for the most recent non-auto-replace hotstring.\nRETURN: String.\nREMARK: I the wildcard option * is in use, this variable will be BLANK.\nEX: MsgBox, % A_DetectHiddenWindows ; V=> -()[]{}':;"/\,.?!`n `t
A_EventInfo \nUSE: Contains additional information about different events.\nRETURN: \n    OnClipboardChange: = Deprecated. Use OnClipboardChange().\n    OnMessage() = Number. Depends on message type received.\n        0 = Message was sent by SendMessage\n        >0 = A number over 0 is the TickCount time PostMessage sent the message. \n    RegisterCallback() = Pass an integer to a function via A_EventInfo.\n        Defaults to RegisterCallback's Address.\n    Regular Expression Callouts = Returns pcre_callout_block structure.\n    GUI Events = Various information for the following gui subcommands: \n        GuiContextMenu GuiDropFiles ListBox ListView TreeView StatusBar\nREMARK: Contains a 0 by default.
A_ExitReason \nDEPRECATED: The OnExit: label is not recommended for use in new scripts.\nREPLACEMENT: Use OnExit() function.\nUSE: Contains the most recent script termination reason.\nRETURN: String. BLANK|Logoff|Shutdown|Close|Error|Menu|Exit|Reload|Single\nREMARK: This variable is BLANK unless the OnExit subroutine is running or has \n    ran from a prior exit attempt.
A_FileEncoding \nUSE: Contains the default encoding for the following:\n    FileRead, FileReadLine, Loop-Read, FileAppend and FileOpen\nRETURN: String. UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nREMARK: Unless the file is opened with write-only access, default encoding \n    is not used if the file contains a UTF-8/16 BOM (Byte Order Marker).\nEX: MsgBox, % A_FileEncoding ; V=> UTF-8
A_Gui \nUSE: Contains the name or number of the gui that launched the current thread. \nRETURN: String.\nREMARK: BLANK unless thread is launched by a Gui control|event or menu bar item.\nEX: MsgBox, % A_Gui ; V=> MyGui
A_GuiControl \nUSE: Contains info about the gui control that launched the current thread.\nRETURN: String. The return value is based on the control having a variable.\n    Has Variable = Returns variable's name.\n    No Variable  = Returns the first 63 characters of the control's text.\nREMARK: Variable is BLANK if:\n    1) A_Gui is BLANK              2) Gui Menu bar|even lanuched the thread\n    3) Control no longer exists    4) Control has no variable or text\nEX: MsgBox % A_GuiControl ; V=> GuiBtnName
A_GuiControlEvent \nUSE: Contains the type of gui control event that launched the current thread.\nRETURN: String. Normal|DoubleClick|RightClick|Context-sensitive|BLANK\nEX: MsgBox % A_GuiControlEvent ; V=> Normal
A_GuiEvent \nUSE: Contains the type of gui event that launched the current thread.\nRETURN: String. Normal|DoubleClick|RightClick|Context-sensitive|BLANK\nEX: MsgBox % A_GuiEvent ; V=> Normal
A_GuiHeight \nUSE: Contains the height of a GUI. Only active inside a GuiSize subroutine.\nRETURN: Number. 0 ... N\nREMARK: Height is for client size. Use WinGetPos to get window height.\nEX: GuiSize:\n        MsgBox % A_GuiHeight ; V=> 100\n    return\nALT: Consider using a GuiSize() function instead of a GuiSize: label.
A_GuiWidth \nUSE: Contains the width of a GUI. Only active inside a GuiSize subroutine.\nRETURN: Number. 0 ... N\nREMARK: Width is for client size. Use WinGetPos to get window width.\nEX: GuiSize:\n        MsgBox % A_GuiWidth ; V=> 100\n    return\nALT: Consider using a GuiSize() function instead of a GuiSize: label.
A_GuiX \nUSE: Contains X coordinates for GuiContextMenu: and GuiDropFiles: labels.\nRETURN: Number.\nREMARK: Coordinates are relative to the upper-left corner of the window.\nALT: Consider using a GuiSize() function instead of a GuiSize: label.
A_GuiY \nUSE: Contains Y coordinates for GuiContextMenu: and GuiDropFiles: labels.\nRETURN: Number.\nREMARK: Coordinates are relative to the upper-left corner of the window.\nALT: Consider using a GuiSize() function instead of a GuiSize: label.
A_Hour \nUSE: Current 2-digit hour in 24-hour format.\nRETURN: Number. 00 ... 23\nREMARK: For a 12 hour AM|PM variant, use this expression:\n    (A_Hour>12?A_Hour-12 " PM":A_Hour " AM")\nEX: MsgBox, % A_Hour ; V=> 18
A_IconFile \nUSE: Contains the path to the current custom tray icon file.\nRETURN: String.\nREMARK: Variable is BLANK if no custom tray icon is set.\nEx: MsgBox, % A_IconFile ; V=> D:\Scripts\otter.ico
A_IconHidden \nUSE: Contains the visibility state for the current scripts tray icon.\nRETURN: Number. 1 = Tray icon hidden. 0 = Tray icon shown.\nREMARK: Tray icon can be hidden via #NoTrayIcon or the Menu command.\nEx: MsgBox, % A_IconHidden ; V=> 0
A_IconNumber \nUSE: Contains the icon number being used by A_IconFile. Typically 1.\nRETURN: Number.\nREMARK: If A_IconFile is BLANK, this variable is BLANK.\nEx: MsgBox, % A_IconNumber ; V=> 1
A_IconTip \nUSE: Contains the text of the current custom tray's tooltip text.\nRETURN: String.\nREMARK: If no custom tooltip is set, this variable is BLANK.\nEx: MsgBox, % A_IconTip ; V=> Groggy's Main Script
A_Index \nUSE: Contains a variable that tells you the current running loop's iteration.\nRETURN: Number. 1 ... N\nREMARK: To track previous indexes, store them to a variable. See EX:\nEX: Loop, 3 { ; Demonstrates A_Index usage and tracking multiple loops.\n        index1 := A_Index\n        Loop, 3\n            MsgBox, % "First Index: " index1 "`nThis index: " A_Index\n    }
A_IPAddress1 \nUSE: Contains IP Adress of 1st network adapter.\nRETURN: Number. Format: #.#.#.#\nEX: MsgBox, % A_IPAddress1 ; R=> 192.168.0.0
A_IPAddress2 \nUSE: Contains IP Adress of 2nd network adapter.\nRETURN: Number. Format: #.#.#.#\nEX: MsgBox, % A_IPAddress2 ; R=> 169.254.0.0
A_IPAddress3 \nUSE: Contains IP Adress of 3rd network adapter.\nRETURN: Number. Format: #.#.#.#\nEX: MsgBox, % A_IPAddress3 ; R=> 198.18.0.0
A_IPAddress4 \nUSE: Contains IP Adress of 4th network adapter.\nRETURN: Number. Format: #.#.#.#\nEX: MsgBox, % A_IPAddress4 ; R=> 127.0.0.0
A_Is64bitOS \nUSE: Contains number indicating 32 or 64 bit system architecture.\nRETURN: Number. 1 = 64-bit. 0 = 32-bit.\nEX: MsgBox, % A_Is64bitOS ; R=> 1
A_IsAdmin \nUSE: Contains privilege level for current user.\nRETURN: Number. 1 = Admin rights. 0 = No admin rights.\nREMARK: To run a script with admin rights, use: Run *RunAs\nEX: MsgBox, % A_IsAdmin ; R=> 1
A_IsCompiled \nUSE: Contains variable indicating if script is running as an exe.\nRETURN: Number. 1 = Compiled(.exe). BLANK = Not compiled(.ahk)\nEX: MsgBox, % A_IsCompiled ; R=> 1
A_IsCritical \nUSE: Contains frequency Time that critical checks the message queue.\nRETURN: Number. 0 ... N\n    0 = Critical is off for current thread. Default.\n    1+ = Time in milliseconds message queue is checked.\nEX: MsgBox, % A_IsCritical ; R=> 16
A_IsPaused \nUSE: Contains pause state of thread immediately underneath the current one.\nRETURN: Number. 1 = Thread is paused. 0 = Thread is not paused.\nEX: MsgBox, % A_IsPaused ; R=> 0
A_IsSuspended \nUSE: Contains suspend status of the current script.\nRETURN: Number. 1 = Suspended. 0 = Not suspended.\nEX: MsgBox, % A_IsSuspended ; R=> 0
A_IsUnicode \nUSE: Contains current string type.\nRETURN: Number. 1 = Unicode/16-bit. BLANK = ANSI/8-bit.\nREMARK: .ahk = String type determined by the AutoHotkey.exe running the script.\n        .exe = String type determined by the bin file used to compile the exe.\nEX: MsgBox, % A_IsUnicode ; R=> 1
A_KeyDelay \nUSE: Contains the current delay setting for SetKeyDelay.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_KeyDelay ; R=> -1
A_KeyDelayPlay \nUSE: Contains the current delay setting for SetKeyDelay's Play mode.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_KeyDelayPlay ; R=> -1
A_KeyDuration \nUSE: Contains the current duration setting for SetKeyDelay.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_KeyDuration ; R=> -1
A_KeyDurationPlay \nUSE: Contains the current duration setting for SetKeyDelay's Play mode.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_KeyDurationPlay ; R=> -1
A_Language \nUSE: Contains the system's current language.\nRETURN: Number. Format: 0000 ... 9999\nCHEAT: See Cheat_Language_Codes\nEX: MsgBox, % A_Language ; R=> 0409
A_LastError \nUSE: Contains the last result of the operating system's GetLastError() function.\nRETURN: Number. 1 ... 4294967295.\n    0 = Success.\n    1+ = Failure.\nREMARK: Can also be the last COM object invocation. Read the docs.\nEX: MsgBox, % A_LastError ; R=> 0
A_LineFile \nUSE: Contains the path and file name of the current executing line.\nRETURN: String. Format: Path\nREMARK: Useful in identifying lines that are running in #Include files.\n    Use with A_LineNumber.\nEX: MsgBox, % A_LineFile ; R=> D:\Scripts\SciTE_GOTestInclude.ahk
A_LineNumber \nUSE: Contains the line number of the current executing line.\nRETURN: Number. 1 ... N\nREMARK: Line number can vary in compiled files with #Include files.\n    Use with A_LineFile.\nEX: MsgBox, % A_LineNumber ; R=> 42
A_ListLines \nUSE: Contains the current state of ListLines.\nRETURN: Number. 1 = Enabled. 0 = Disabled.\nEX: MsgBox, % A_ListLines ; R=> 0
A_LoopField \nUSE: Contains the data from the parsing loop's current item.\nRETURN: String.\nEX: Loop, Parse, % "ABC"      ; Parse through each letter\n        MsgBox, % A_LoopField ; Show letters one at a time
A_LoopFileAttrib \nUSE: Used by Loop-Files. Contains the attributes of the current item.\nRETURN: String. D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory    O = Offline       N = Normal\n    T = Temporary    C = Compressed    R = ReadOnly\n    A = Archive      S = System        H = Hidden\n    X = No Attr      BLANK = No file found\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileAttrib in use\n        MsgBox, % "Name:`t" A_LoopFileName "`nAttr:`t" A_LoopFileAttrib
A_LoopFileDir \nUSE: Used by Loop-Files. Contains the directory of the current item.\nRETURN: String. Format: Path\nREMARK: If a relative path is used, the path here will also be relative.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileDir in use\n        MsgBox, % "File name & dir`n" A_LoopFileDir "\" A_LoopFileName
A_LoopFileExt\nUSE: Used by Loop-Files. Contains the extenstion of the current item.\nRETURN: String. ahk|exe|txt|doc|...\nREMARK: Extension's dot is not included.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileExt in use\n        MsgBox, % "Name:`tA_LoopFileName "`nExtension:`t" A_LoopFileExt
A_LoopFileFullPath \nUSE: Used by Loop-Files. Contains the full path of the current item.\nRETURN: String. Format: Path\nREMARK: If the loop uses a relative path is used, this path will be relative.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileFullPath in use\n        MsgBox, % "File full path: " A_LoopFileFullPath\nALT: Consider using A_LoopFilePath as it's the same but named more accurately name.
A_LoopFileLongPath \nUSE: Used by Loop-Files. Contains the absolute path of the current item.\nRETURN: String. Format: Path\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileLongPath in use\n        MsgBox, % "File long path: " A_LoopFileLongPath
A_LoopFileName \nUSE: Used by Loop-Files. Contains the name of the current item.\nRETURN: String.\nREMARK: Path is exclude. Extension is included.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileName in use\n        MsgBox, % "File name: " A_LoopFileName
A_LoopFilePath \nUSE: Used by Loop-Files. Contains the path of the current item.\nRETURN: String. Format: Path\nREMARK: If the files loop uses a relative path, this variable will be relative.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFilePath in use\n        MsgBox, % "File path: " A_LoopFilePath
A_LoopFileShortName \nUSE: Used by Loop-Files. Contains the short file name of the current item.\nRETURN: String. Format: 8.3 Ex: GroggyTest.ahk => GROGGY~1.AHK\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileShortName in use\n        MsgBox, % "Shrot file name: " A_LoopFileShortName
A_LoopFileShortPath \nUSE: Used by Loop-Files. Contains the short folder path of the current item.\nRETURN: String. Path. Format: 8.3. Ex: C:\GroggyFolder => C:\GROGGY~1\nREMARK: If the files loop uses a relative path, this variable will be relative.\nEX: Loop, Files, % A_ProgramFiles "\*.*" ; Show A_LoopFileShortPath in use\n        MsgBox, % "Short file path: " A_LoopFileShortPath
A_LoopFileSize \nUSE: Used by Loop-Files. Contains the file size of the current item.\nRETURN: Number. In bytes.\nREMARK: Files larger than 4 gigabytes are supported.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileSize in use\n        MsgBox, % "File: " A_LoopFileName " is " A_LoopFileSizeKB "bytes."
A_LoopFileSizeKB \nUSE: Used by Loop-Files. Contains the file size of the current item.\nRETURN: Number. In kilobytes.\nREMARK: Files larger than 4 gigabytes are supported.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileSizeKB in use\n        MsgBox, % "File: " A_LoopFileName " is " A_LoopFileSizeKB "KB."
A_LoopFileSizeMB \nUSE: Used by Loop-Files. Contains the file size of the current item.\nRETURN: Number. In megabytes.\nREMARK: Files larger than 4 gigabytes are supported.\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileSizeMB in use\n        MsgBox, % "File: " A_LoopFileName " is " A_LoopFileSizeMB "MB."
A_LoopFileTimeAccessed \nUSE: Used by Loop-Files. Contains the last access time of the current item.\nRETURN: Number. Formatl: YYYYMMDDHH24MISS\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileTimeAccessed in use\n        MsgBox, % A_LoopFileName "`nLast Accessed: " A_LoopFileTimeAccessed
A_LoopFileTimeCreated \nUSE: Used by Loop-Files. Contains the creation time of the current item.\nRETURN: Number. Format: YYYYMMDDHH24MISS\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileTimeCreated in use\n        MsgBox, % A_LoopFileName "`nLast Accessed: " A_LoopFileTimeCreated
A_LoopFileTimeModified \nUSE: Used by Loop-Files. Contains the last modified time of the current item.\nRETURN: Number. Format: YYYYMMDDHH24MISS\nEX: Loop, Files, % A_ScriptDir "\*.*" ; Show A_LoopFileTimeModified in use\n        MsgBox, % A_LoopFileName "`nLast Accessed: " A_LoopFileTimeModified
A_LoopReadLine \nUSE: Used by Loop-Read. Contains the data of the current line iteration.\nRETURN: String.\nEX: Loop, Read, % A_ScriptFullPath ; Displays each line of the\n        MsgBox, % A_LoopReadLine   ; current running script
A_LoopRegKey \nUSE: Used by Loop-Reg. Contains the root key of the current registry item.\nRETURN: String.\n    HKEY_CLASSES_ROOT   HKEY_CURRENT_USER      HKEY_LOCAL_MACHINE\n    HKEY_USERS          HKEY_CURRENT_CONFIG\nREMARK: For remote registry access, the computer name is not returned.\nEX: Loop, Reg, HKLM, KR ; Loop through HKLM\n        MsgBox, % "Key Name:`t" A_LoopRegName "`nRoot Key:`t" A_LoopRegKey
A_LoopRegName \nUSE: Used by Loop-Reg. Contains the name of the current registry item.\nRETURN: String.\nREMARK: This can be a value or a key.\nEX: Loop, Reg, HKLM, KR ; Loop through HKLM\n        MsgBox, % "Key Name:`t" A_LoopRegName
A_LoopRegSubKey \nUSE: Used by Loop-Reg. Contains the subkey of the current registry item.\nRETURN: String.\nREMARK: If recurse is being used return the full path except the root key.\nEX: Loop, Reg, HKLM, VKR ; Loop through HKLM\n        MsgBox, % "Current Subkey:`t" A_LoopRegSubKey
A_LoopRegTimeModified \nUSE: Used by Loop-Reg. Contains last modification time of the current registry item.\nRETURN: Number. Format YYYYMMDDHH24MISS.\nEX: Loop, Reg, HKLM, VKR ; Loop through HKLM\n        MsgBox, % "File:`t " A_LoopRegName "`nModified:`t" A_LoopRegTimeModified
A_LoopRegType \nUSE: Used by Loop-Reg. Contains the type of the current registry item.\nRETURN: String.\n    REG_SZ       REG_MULTI_SZ         REG_EXPAND_SZ\n    REG_LINK     REG_RESOURCE_LIST    REG_DWORD_BIG_ENDIAN\n    REG_DWORD    REG_QWORD            REG_BINARY\n    REG_FULL_RESOURCE_DESCRIPTOR      REG_RESOURCE_REQUIREMENTS_LIST\nEX: Loop, Reg, HKLM, VKR ; Loop through HKLM\n        MsgBox, % "File:`t " A_LoopRegName "`nModified:`t" A_LoopRegTimeModified\nREMARK: This variable is BLANK if the retrieved type is unknown.
A_MDay \nUSE: Contains the current 2-digit day.\nRETURN: Number. 01 ... 31\nREMARK: Synonymous with A_DD.\nEX: MsgBox, % A_MDay ; V=> 30
A_Min \nUSE: Contains the current 2-digit minute.\nRETURN: Number. 00 ... 59\nEX: MsgBox, % A_Min ; V=> 33
A_MM \nUSE: Contains the current 2-digit month.\nRETURN: Number. 01 ... 12\nREMARK: Synonymous with A_Mon.\nEX: MsgBox, % A_MM ; V=> 10
A_MMM \nUSE: Contains the current abbreviated month.\nRETURN: String. Jan|Feb|Mar|Apr|May|Jun|Jul|Aut|Sep|Oct|Nov|Dec\nREMARK: Based on locale.\nEX: MsgBox, % A_MMM ; V=> Oct
A_MMMM \nUSE: Contains the current month.\nRETURN: String.\n    January|February|March|April|May|June|July|\n    August|September|October|November|December\nREMARK: Based on locale.\nEX: MsgBox, % A_MMMM ; V=> October
A_Mon \nUSE: Contains the current 2-digit month.\nRETURN: Number. 01 ... 12\nREMARK: Synonymous with A_MM.\nEX: MsgBox, % A_Mon ; V=> 10
A_MouseDelay \nUSE: Contains the current delay for SetMouseDelay.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_MouseDelay ; V=> 10
A_MouseDelayPlay \nUSE: Contains the current delay for SetMouseDelay Play mode.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_MouseDelayPlay ; V=> -1
A_MSec \nUSE: Contains the current 3 digit millisecond.\nRETURN: Number.  000 ... 999\nREMARK: To remove leading zeros, use: (A_MSec+0)\nEX: MsgBox, % A_MSec ; V=> 094
A_MyDocuments \nUSE: Contains the path and name of current user's "My Documents" folder.\nRETURN: String. Format: Path\nREMARK: A folder that's also a root drive still returns with no backslash.\nEX: MsgBox, % A_MyDocuments ; V=> C:\Users\GroggyOtter\Documents
A_Now \nUSE: Contains the current local time.\nRETURN: Number. Format: YYYYMMDDHH24MISS\nREMARK: For UTC (universal time coordinated), use A_NowUTC.\nEX: MsgBox, % A_Now ; V=> 19490608123000
A_NowUTC \nUSE: Contains the current UTC (universal time coordinated) time.\nRETURN: Number. YYYYMMDDHH24MISS format.\nREMARK: For local time, use A_Now.\nEX: MsgBox, % A_Now ; V=> 19851018000000
A_NumBatchLines  \nUSE: Contains the Number of Lines|Time in milliseconds for SetBatchLines.\nRETURN: Mix. String if time. Number if lines.\nREMARK: If A_NumBatchLines ends in ms, it's time. Otherwise it's Lines.\n    Synonymous with A_BatchLines.\nEX: MsgBox, % A_NumBatchLines ; V=> 10ms
A_OSType \nUSE: Contains the current operating system type.\nRETURN: String. WIN32_NT|WIN32_WINDOWS\nREMARK: Win 95/98/ME are no longer supported but would return WIN32_WINDOWS.\nEX: MsgBox, % A_OSType ; V=> WIN32_NT
A_OSVersion \nUSE: Contains the current operating system version.\nRETURN: String. WIN_7|WIN_8|WIN_8.1|WIN_VISTA|WIN_2003|WIN_XP|WIN_2000\nREMARK: If OS version unknown, return versionMajor.versionMinor.build string.\nEX: MsgBox, % A_OSVersion ; V=> 10.0.14393
A_PriorHotkey \nUSE: Contains the name of the last activated hotkey or hotstring.\nRETURN: String. Includes modifiers.\nREMARK: This variable is BLANK until two hotkeys have fired.\nEX: MsgBox, % A_PriorHotkey ; V=> $*^s
A_PriorKey \nUSE: Contains the last pressed key.\nRETURN: String. BLANK = No applicable key-presses are found in key history.\nREMARK: A hook must be used for this to work.\n    If used in a hotkey|hotstring, consider saving this to a variable immediately.\n    This prevents A_PriorHotkey from being overwritten by the current key.\nEX: MsgBox, % A_PriorKey ; V=> Enter
A_ProgramFiles \nUSE: Contains the path to the systems Program Files folder.\nRETURN: String. Format: Path\nREMARK: On 64-bit systems, a 32-bit AHK returns Program Files(x86)\n    To get the 64 bit path, check the ProgramW6432 environmental variable.\nEX: MsgBox, % A_ProgramFiles ; V=> C:\Program Files
A_Programs \nUSE: Contains the path to the current user's start menu "Programs" folder.\nRETURN: String. Format: Path\nREMARK: Synonymous with the ProgramFiles variable.\nEX: MsgBox, % A_Programs ; V=> C:\Users\GroggyOtter\AppData\...\Start Menu\Programs
A_ProgramsCommon \nUSE: Contains the path to the common start menu "Programs" folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_ProgramsCommon ; V=> C:\ProgramData\...\Start Menu\Programs
A_PtrSize \nUSE: Contains the exe's pointer size\nRETURN: Number in bytes. 4 = 32-bit. 8 = 64-bit.\nREMARK: This variable is dependant on the exe running the current script.\nEX: MsgBox, % A_PtrSize ; V=> 8
A_RegView \nUSE: Contains the current setting of SetRegView.\nRETURN: String. Default|32|64\nREMARK: This is inapplicable to 32-bit systems.\nEX: MsgBox, % A_RegView ; V=> 32
A_ScreenDPI \nUSE: Contains the number of pixels per logical inch of screen width.\nRETURN: Number. \nREMARK: Default value is 96.\nEX: MsgBox, % A_ScreenDPI ; V=> 96
A_ScreenHeight \nUSE: Contains the height of the primary monitor.\nRETURN: Number. In pixels.\nREMARK: Use SysGet for non-primary monitors or to get full desktop height.\nEX: MsgBox, % A_ScreenHeight ; V=> 1080
A_ScreenWidth \nUSE: Contains the width of the primary monitor.\nRETURN: Number. In pixels.\nREMARK: Use SysGet for non-primary monitors or to get full desktop width.\nEX: MsgBox, % A_ScreenWidth ; V=> 1920
A_ScriptDir \nUSE: Contains the path of the current running script's directory.\nRETURN: String. Format: Path\nREMARK: The final backslash is omitted even if it's a root directory.\nEX: MsgBox, % A_ScriptDir ; V=> D:\Scripts
A_ScriptFullPath \nUSE: Contains the full path and name of the current running script.\nRETURN: String. Format: Path\nEX: MsgBox, % A_ScriptDir ; V=> D:\Scripts\SciTE_GOTest.ahk
A_ScriptHwnd \nUSE: Contains the unique ID/HWND of the current script's main hidden window.\nRETURN: Number. Handle.\nEX: MsgBox, % A_ScriptHwnd ; V=> 0x110646
A_ScriptName \nUSE: Contains the name and extension of the current running script.\nRETURN: String.\nEX: MsgBox, % A_ScriptName ; V=> SciTE_GOTest.ahk
A_Sec \nUSE: Contains the current 2-digit second.\nRETURN: Number. 00 ... 59\nEX: MsgBox, % A_Sec ; V=> 07
A_SendLevel \nUSE: Contains the current level set by SendLevel.\nRETURN: Number. 0 ... 100\nEX: MsgBox, % A_SendLevel ; V=> 0
A_SendMode \nUSE: Contains the current mode set by SendMode.\nRETURN: String. Event|Input|Play|InputThenPlay\nEX: MsgBox, % A_SendMode ; V=> InputThenPlay
A_Space \nUSE: Contains the space character.\nREMARK: Same as hitting spacebar or using Chr(32).\nEX: MsgBox, % "SP" A_Space "C" A_Space "E" ; V=> SP A CE
A_StartMenu \nUSE: Contains the path to the current user's start menu folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_StartMenu ; V=> C:\Users\GroggyOtter\AppData\...\Windows\Start Menu
A_StartMenuCommon \nUSE: Contains the path to the common start menu folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_StartMenuCommon ; V=> C:\ProgramData\Microsoft\Windows\Start Menu
A_Startup \nUSE: Contains the path to the current user's start menu "Startup" folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_Startup ; V=> C:\Users\GroggyOtter\AppData\...\Programs\Startup
A_StartupCommon \nUSE: Contains the path to the common start menu "Startup" folder.\nRETURN: String. Format: Path\nEX: MsgBox, % A_StartMenuCommon ; V=> C:\ProgramData\Microsoft\...\Programs\Startup
A_StoreCapsLockMode \nUSE: Contains the current mode set by SetStoreCapsLockMode.\nRETURN: String. On|Off\nEX: MsgBox, % A_StoreCapsLockMode ; V=> On
A_StringCaseSense \nUSE: Contains the current mode set by StringCaseSense.\nRETURN: String. On|Off|Locale\nEX: MsgBox, % A_StringCaseSense ; V=> Off
A_Tab \nUSE: Contains the tab character.\nREMARK: Same as hitting tab or using Chr(9).\nEX: MsgBox, % "T" A_Tab "A" A_Tab "B" ; V=> T    A    B
A_Temp \nUSE: Contains the path to the designated temporary folder.\nREMARK: Path is retrieved from one of the following locations.\n    Listed in order: TMP > TEMP > USERPROFILE > Windows directory\nEX: MsgBox, % A_Temp ; V=> C:\Users\User\AppData\Local\Temp
A_ThisFunc \nUSE: Contains the name of the currently executing function.\nRETURN: String. BLANK = Call was not made inside a function.\nEX: GroggyFunc(){\n        MsgBox, % A_ThisFunc ; V=> GroggyFunc\n    }
A_ThisHotkey \nUSE: Contains the name of the current activated hotkey or hotstring.\nREMARK: This variable is BLANK until 2 hotkeys have been launched.\nRETURN: String. Includes modifiers.\nEX: MsgBox, % A_PriorHotkey ; V=> $*^s
A_ThisLabel \nUSE: Contains the name of currently executing label|subroutine.\nRETURN: String. BLANK = A label is not executing.\nREMARK: Updated when the script executes a GoSub|Return|Goto.\nEX: GroggyLabel:\n        MsgBox, % A_ThisLabel ; V=> GroggyLabel\n    Return
A_ThisMenu \nUSE: Contains the menu name of the most recently selected custom menu item.\nRETURN: String. BLANK if none.\nEX: MsgBox, % A_ThisMenu ; V=> MyMenu
A_ThisMenuItem \nUSE: Contains the name of the most recently selected custom menu item.\nRETURN: String. BLANK if none.\nREMARK: This is the named version of A_ThisMenuItemPos.\nEX: MsgBox, % A_ThisMenuItem ; V=> MenuItem1
A_ThisMenuItemPos \nUSE: Contains the number of the most recently selected custom menu item.\nRETURN: Number. 1 ... N. BLANK = none.\nREMARK: The numbered position version of A_ThisMenuItem.\nEX: MsgBox, % A_ThisMenuItem ; V=> 1
A_TickCount \nUSE: Contains the amount of time in milliseconds since the computer was started.\nRETURN: Number. In milliseconds. 1 ... N\nREMARK: If precision is an issue, consider using QueryPerformanceCounter()\nEX: MsgBox, % A_TickCount ; V=> 876531740
A_TimeIdle \nUSE: Contains the time since the system last detected physical|artifical input.\nRETURN: Number. In milliseconds. 0 ... N\nREMARK: Includes mouse, keyboard, and other input types.\nEX: If (A_TimeIdle > 60000) ; If true, no user input in over 60 sec.\n        MsgBox, User has been gone more than a minute!
A_TimeIdleKeyboard \nUSE: Contains the time since the computer last detected keyboard input.\nRETURN: Number. In milliseconds. 0 ... N\nREMARK: This defaults to A_TimeIdle if a keyboard hook is not installed.\nEX: If (A_TimeIdleKeyboard > 60000) ; If true, no keyboard input in over 60 sec.\n        MsgBox, User has not typed anyting in over a minute!
A_TimeIdleMouse \nUSE: Contains the time since the computer last detected mouse input.\nRETURN: Number. In milliseconds. 0 ... N\nREMARK: This defaults to A_TimeIdle if a mouse hook is not installed.\nEX: If (A_TimeIdleMouse > 60000) ; If true, no mouse input in over 60 sec.\n        MsgBox, User has not typed anyting in over a minute!
A_TimeIdlePhysical \nUSE: Contains the time since the system last detected physical input.\nRETURN: Number. In milliseconds. 0 ... N\nREMARK: Variable will track mouse and|or keyboard input if their hook is installed. \n    No hook = This varaible defaults to A_TimeIdle.\nEX: If (A_TimeIdlePhysical > 60000) ; If true, no physical input in over 60 sec.\n        MsgBox, User has not typed anyting in over a minute!
A_TimeSincePriorHotkey \nUSE: Contains time since A_PriorHotkey was pressed.\nRETURN: Number. -1 ... N. -1 = A_PriorHotkey is BLANK.\nEX: MsgBox, % A_TimeSincePriorHotkey ; V=> 999983
A_TimeSinceThisHotkey \nUSE: Contains time since A_ThisHotkey was pressed.\nRETURN: Number. -1 ... N. -1 = A_ThisHotkey is BLANK.\nEX: MsgBox, % A_TimeSinceThisHotkey ; V=> 3333360
A_TitleMatchMode \nUSE: Contains the current MatchMode set by SetTitleMatchMode.\nRETURN: Mix. 1|2|3|RegEx\n    1 = Title must start with WinTitle.\n    2 = Title must contain WinTitle. \n    3 = Title must exactly match WinTitle.\n    RegEx = Same as RegExMatch(Title, WinTitle)\nEX: MsgBox, % A_TitleMatchMode ; V=> Fast
A_TitleMatchModeSpeed \nUSE: Contains the current speed set by SetTitleMatchMode.\nRETURN: String. Fast|slow\nEX: MsgBox, % A_TitleMatchModeSpeed ; V=> Fast
A_UserName \nUSE: Contains the name of the current user who launched the script.\nRETURN: String.\nEX: MsgBox, % A_UserName ; V=> GroggyOtter
A_WDay \nUSE: Contains the current 1-digit day of the week.\nRETURN: Number. 1 ... 7\nREMARK: 1 is always Sunday.\nEX: MsgBox, % A_WDay ; V=> 2
A_WinDelay \nUSE: Contains the current delay set by SetWinDelay.\nRETURN: Number. -1 ... N\n    -1 = No delay.\n    0  = Smallest possible delay.\n    1+ = Dealy in milliseconds.\nREMARK: Always decimal. Never hex.\nEX: MsgBox, % A_WinDelay ; V=> -1
A_WinDir \nUSE: Contains the path to the current machines Window's directory.\nRETURN: String. Format: Path\nEX: MsgBox, % A_WinDir ; V=> C:\Windows
A_WorkingDir \nUSE: Contains the path to the current working directory.\nRETURN: String. Format: Path\nREMARK: The working dir is the assumed path for files without specified paths.\n    Default Working dir is the scripts directory. Change with SetWorkingDir.\nEX: MsgBox, % A_WinDelay ; V=> -1
A_YDay \nUSE: Contains the current 3-digit day of the year.\nRETURN: Number. 1 ... 366\nREMARK: If the number needs to be padded, use: Format("{:03}",A_YDay)\nEX: MsgBox, % A_YDay ; V=> 274
A_Year \nUSE: Contains the current 4-digit year.\nRETURN: Number. Format: 0000 ... 9999\nREMARK: Synonymous with A_YYYY\nEX: MsgBox, % A_Year ; V=> 2018
A_YWeek \nUSE: Contains the current 4-digit year and 2 digit week of the year.\nRETURN: Number. Format: YYYYWW\nREMARK: If you want just the weeks, use: SubStr(A_YWeek,5) \n    If January's 1st week has more than 3 days, it counts as week 1.\nEX: MsgBox, % A_YWeek ; V=> 201840
A_YYYY \nUSE: Contains the current 4-digit year.\nRETURN: Number. Format: 0000 ... 9999\nREMARK: Synonymous with A_Year\nEX: MsgBox, % A_YYYY ; V=> 2018
Clipboard \nUSE: Contains the text data of the clipboard.\nREMARK: You can read/write text to and write binary data to Clipboard like any other variable.\n    To paste text from the clipboard, press ctrl+v or use: Send, ^v\nEX: MsgBox, % A_Clipboard
ClipboardAll \nUSE: Contains all binary data on the clipboard.\nREMARK: ClipboardAll can be saved directly to a file using FileAppend.\n    To paste text from the clipboard, press ctrl+v or use: Send, ^v\nEX: MsgBox, % ClipboardAll
ComSpec \nUSE: Contains the path to the system's Command Prompt.\nRETURN: String. Format: Path\nREMARK: Synonymous with the variable A_ComSpec.\nEX: MsgBox, % ComSpec ; V=> C:\Windows\system32\cmd.exe
ErrorLevel \nUSE: Used by multiple commands to indicate success|failure|other info. \nRETURN: There is no set return values. 0 is generally used for success.\nREMARK: Users can write to this like any other variable.\nEX: If (Errorlevel > 0)\n        MsgBox, An error occurred! ; Detects when an error occurs
False \nUSE: Contains the 0 character and can be used wherever 0 is used.\nRETURN: Number. 0\nREMARK: Same as the 0 button or using Chr(48).\nEX: MsgBox, % "True: " True " False: " False ; V=> True: 1 False: 0
ProgramFiles \nUSE: Contains the path to the current user's start menu "Programs" folder.\nRETURN: String. Format: Path\nREMARK: Synonymous with the A_Programs variable.\nEX: MsgBox, % A_Programs ; V=> C:\Users\GroggyOtter\AppData\...\Start Menu\Programs
True \nUSE: Contains the 1 character and can be used wherever 1 is used.\nRETURN: Number. 1\nREMARK: Same as the 1 button or using Chr(49).\nEX: MsgBox, % "True: " True " False: " False ; V=> True: 1 False: 0

/* BUILT_IN_FUNCTIONS */
Abs(Number) \nUSE: Math func. Returns the absolute value of Number.\nRETURN: Number. Integer|Float is dependant on input Number.\nEX: Abs(-12.0) ; R=> 12.0\n    Abs(500) ; R=> 500
ACos(Number) \nUSE: Math func. Returns the arccosine of Number.\nRETURN: Number. In radians. -1 ... 1\n    BLANK = Number is out of range.\nEX: ACos(0.2) ; R=> 1.369438
Array(Item1, Item2, ..., ItemN) \n[Item1, Item2, ..., ItemN]\nUSE: An object that stores data in sequentially numbered indexes.\nRETURN: Array Object.\nMETHODS: All objects have access to these methods:\n    Clone()    MaxIndex()    InsertAt()    GetAddress()\n    Count()    MinIndex()    RemoveAt()    GetCapacity()\n    Pop()      Delete()      _NewEnum()    SetCapacity()\n    Push()     Length()      HasKey()\nEX: arr := Array("A","B","C") ; Create an array\n    For i, d in arr ; Loop through the array\n        MsgBox, % "index: " i "`ndata: " d ; Show each index and data
Asc(String) \nUSE: Returns the ANSI/Unicode number of the String character.\nRETURN: Number. 0 = String is BLANK.\nREMARK: Only returns the number for the first character in String.\nEX: Asc("t") ; R=> 116\n    Asc("test") ; R=> 116
ASin(Number) \nUSE: Math func. Returns the arcsine of Number.\nRETURN: Number. In radians. -1 ... 1\n    BLANK = Number is out of range.\nEX: ASin(0.2) ; R=> 0.201358
ATan(Number) \nUSE: Math func. Returns the arctangent of Number.\nRETURN: Number. In radians.\nEX: ATan(1.2) ; R=> 0.876058
Ceil(Number) \nUSE: Math func. Returns Number rounded up to the next integer.\nEX: \n    Ceil(1.01) ; R=> 2\n    Ceil(-1.99) ; R=> -1
Chr(Number) \nUSE: Get the character for the provided Number code.\nRETURN: String. Range depends on ANSI or Unicode:\n    ANSI = 0 ... 255    Unicode = 0x0 ... 0x10FFFF\nREMARK: Codes over 127|0x7F depend on encoding|AHK exe type.\nEX: Chr(65) ; R=> A\n    Chr(0x2B) ; R=> +
ComObjActive(CLSID) \nUSE: Retrieves a running object that has been registered with OLE.\nRETURN: COM Object.\nEX: ComObject := ComObjActive("21ec2020-3aea-1069-a2dd-08002b30309d")
ComObjArray(VariantType, Count1 , Count2, ..., Count8)\nUSE: Creates a SafeArray for use with COM.\nVARIANTTYPE: Any COM variant type except: VT_ARRAY|VT_BYREF|VT_EMPTY|VT_NULL\nCOUNT: Size of each dimension. 1 ... 8\nRETURN: SafeArray Object.\nCHEAT: For a full list of Types: Cheat_Variant_Type\nMETHODS: Methods available to this array:\n    Array.MaxIndex(dimensionN)    Array.Clone()\n    Array.MinIndex(dimensionN)    Array._NewEnum()\nEX: ComObjArray(VT_VARIANT:=12, 3)
ComObjConnect(ComObject, [Prefix])\nUSE: Connects the object's event sources to functions with a given prefix.\nPREFIX: Name to prefix event handlers with. If omitted, ComObject is disconnected.\nREMARK: Event-handlers should be named: PrefixnameEventname()\nEX: ComObjConnect(comObj, "EH_") ; comObj's events are connected to event-handlers\n                                 ; named: EH_EventName()
ComObjCreate(CLSID, [IID])\nUSE: Creates a COM object.\nRETURN: COM Object.\nEX: ie := ComObjCreate("InternetExplorer.Application") ; Create an IE COM
ComObject(Type, Int|Pointer, [Flag]) \nUSE: Creates an object to be used as a parameter or return value.\n    This object represents a COM variant type.\nTYPE: Com Object varation type. CHEAT: Cheat_Variant_Type\nFLAGS: Affects interface reference counting. See docs.\n    0 = AddRef is called automatically    1 = AddRef is not called\nRETURN: Object.\nEX: ComObject := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)
ComObjEnwrap() \nDEPRECATED: This command is deprecated and will be removed in future versions.\nREMARK: This function is now an alias for ComObject() using variant type 9.
ComObjUnwrap() \nDEPRECATED: This command is deprecated and will be removed in future versions.\nREMARK: This function is now an alias for ComObject() using variant type 9.
ComObjError([Value])\nUSE: Enable or disable notification of COM errors.\nVALUE: 1 = On. 0 = Off. BLANK = Used to get currents setting.\nRETURN: The setting before any changes are made.\nEX: comObjErrorSetting := ComObjError() ; Stores current setting
ComObjFlags(ComObject, [Flag, Mask]) \nUSE: Set|get the flags which control a COM wrapper object's behaviour.\nFLAG: F_OWNVALUE = SafeArray is destroyed when wrapper object is freed.\nMASK: Bitmask of flags. If omitted, flags are toggled.\nEX: ComObjFlags(SafeArr, -1) ; Sets F_OWNVALUE to false.
ComObjGet(Name)\nUSE: Returns a reference to an object provided by a COM component.\nNAME: Object's display name.\nRETURN: COM Object.\nEX: wmiCom := ComObjGet("winmgmts:") ; Gets WMI service object
ComObjMissing() \nDEPRECATED: This command is deprecated and will be removed in future versions.\nREMARK: This function is now an alias for ComObject() using variant type 9.
ComObjParameter() \nDEPRECATED: This command is deprecated and will be removed in future versions.\nREMARK: This function is now an alias for ComObject() using variant type 9.
ComObjQuery(ComObject, [SID], IID)\nUSE: Queries a COM object for an interface or service.\nSID|IID: Service Identifier|Interface Identifie (GUID)\n    Both use the format: {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\nEX: pointer := ComObjQuery(comObj, "{B196B283-BAB4-101A-B69C-00AA00341D07}")
ComObjType(ComObject, [Type])\nUSE: Retrieves information from a COM object.\nREMARK: Return BLANK if a parameter is invalid or if type can't be retrieved. \nTYPES: Information type to retrieve.\n    Get Variant Type:   vtNum := ComObjType(ComObject)\n    Get Interface Name: iName := ComObjType(ComObject, "Name")\n    Get GUID:            GUID := ComObjType(ComObject, "IID")\n    Get Class Name:     cName := ComObjType(ComObject, "Class")\n    Get Class GUID:     cGUID := ComObjType(ComObject, "CLSID")
ComObjValue(ComObject) \nUSE: Retrieves the value or pointer stored in a COM wrapper object.\nRETURN: Number. 64-bit Integer.
Cos(Number) \nUSE: Math func. Returns the trigonometric cosine of Number.\nRETURN: Number. In radians.\nEX: Cos(1.2) ; R=> 0.362358
DllCall("[DllFile\]Function", [Type1, Value1, TypeN, ValueN, "Cdecl Type"])\nUSE: Call a function inside a DLL, such as a standard Windows API function.\nCDECL: Normally omitted as most functions use the standard calling convention.\nTYPE: Str|AStr|WStr|Int64|UInt64|Int|UInt|Short|UShort|Char|UChar|Float|Double|Ptr\nERRORLEVEL:\n    0 = Success\n    -1 = DllFile\Function is not string or positive integer\n    -2 = Return|Arg type is invalid\n    -3 = DllFile inaccessible|unloadable or privelege level is too low\n    -4 = Function not found in DLL\n    1+ = Any positive integer. Function called but experienced a fatal exception\n    A+n = Too many aruments andoff by n amount of bytes\n    A-n = Too few aruments and off by n amount of bytes\nEX: DllCall("IsWindowVisible", "Ptr", WinActive("A")) ; Check if active window is visible.
Exception(Message, [What, Extra]) \nUSE: Creates an object with the following properties:\n    MESSAGE: An error message or ErrorLevel number.\n    EXEC: Name of function|label|command that was running.\n    EXTRA: More detail about the error can be put here.\n    FILE: The path to the script file that was running at error time.\n    LINE: The line of the file that was running at error time.\nWhat:Name of the command|function|label when the error occurred.\nExtra:More about the error.
Exp(N) \nUSE: Returns e to the Nth power.\nN: A positive or negative number.\nREMARK: e (Euler's number) is a mathmatical constant. 2.71828...\nEX: Exp(1.2) ; R=> 3.320117\n    \nFileExist(Pattern) \nUSE: Checks for the existence of a file or folder\nPATTERN: A path, filename, or pattern.\nRETURN: String. D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory    O = Offline       N = Normal\n    T = Temporary    C = Compressed    R = ReadOnly\n    A = Archive      S = System        H = Hidden\n    X = No Attr      BLANK = No file found\nEX: FileExist("C:\Windows\") ; R=> D
FileOpen(Filename, Flags, [Encoding]) \nUSE: Open a file.\nFILENAME: Use a relative|absolute path. Or one of the following:\n    StdIn = FileOpen("*", "r")\n    StdOut = FileOpen("*", "w")\n    StdErr = FileOpen("**", "w")\nENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nFLAGS: r = Read|w = Write|rw = ReadWrite|a = Append|h = Handle\nRETURN: File Object. See: Cheat_Object_File
Floor(Number) \nUSE: Math func. Returns Number rounded down to the previous integer.\nEX: \n    Floor(1.9) ; R=> 1\n    Floor(-1.9) ; R=> -2
Format(FormStr, [i1, i2, ..., iN]) \nUSE: Format, convert, or pad any number of items.\nFORMSTR: String format that represents how the final data should look.\n    Format is "{1:Form}{2:Form}". Use {{} and {}} for literal curly braces.\nFORM: Format: Flag|[0]Width.Places|ULT|Type. No spaces between options.\n    FLAG: -    +    #    SPACE\n    [0]WIDTH: If value length < Width, pad value with spaces.\n        If width starts with a 0, pad with zeroes instead.\n    PLACES: Max characters|digits|decimal places\n    ULT: UPPERCASE lowercase TitleCase\n    TYPE: Int:d|i|u|x|X|o|p    Float:f|e|E|g|G|a|A    String:s    Code:c\nRETURN: Returns FormStr after formatting has been done.\nCHEAT: See Cheat_Format or Docs for more details.\nEX: MsgBox, % Format("|{2:Ts}{3:-7Us}|`n|{4:10Ls}|","","sci","te","4AHK")\n    MsgBox, % Format("{1}=>{1:#.1f}=>{1:#06x}`n|{2: .2f}|", 255, 3.141)
Func(FuncName) \nUSE: Retrieves a reference to the specified function.\nRETURN: Reference of FuncName. 0 = Function does not exist.
GetKeyName(Key) \nUSE: Return AHK's name for the provided key.\nKEY: Name|Scan Code|Virtual Key. Ex: Enter|sc0x1C|vk0xD\nRETURN: String.\nREMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)\nEX: GetKeyName("vk" Format("{:x}",27)) ; R=> Escape
GetKeyVK(Key) \nUSE: Return the vk (Virtual Key) for provided key.\nKEY: Name|Scan Code|Virtual Key. Ex: Enter|sc0x1C|vk0xD\nRETURN: Number. Decimal.\nREMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)\nEX: GetKeyVK("Escape") ; R=> 27
GetKeySC(Key) \nUSE: Return vk|Virtual Key for provided key.\nKEY: Name|Scan Code|Virtual Key. Ex: Enter|sc0x1C|vk0xD\nRETURN: Number. Decimal.\nREMARK: SC|VK must be in hex. To convert to hex use: Format("{:x}",num)\nEX: GetKeySC("Escape") ; R=> 1
GetKeyState(Key, [Mode]) \nUSE: Return the up|down|toggle state of a key, mouse button, of joy button.\nKEY: Name|Scan Code|Virtual Key. Ex: Enter|sc0x1C|vk0xD\nMODE: P = Physical down|up state. T = Key toggle on|off state\nRETURN: Number. 1 = Down|toggle on. 0 = Up or toggled off.\nEX: GetKeyState("LButton", "P") ; R=> 1
GuiClose(GuiHwnd) \nUSE: Launch function when a GUI is closed.\nPREFIX: Prefixing this function with a GUI name makes it exclusive to that GUI.\nRETURN: If function return > 0, GUI window is not hidden when closed.\nEX: GuiClose(GuiHwnd){\n        MsgBox, % "You attempted to close window: " GuiHwnd "."\n        return True\n    }
GuiEscape(GuiHwnd) \nUSE: Launch function when the active GUI detects the Escape key.\nPREFIX: Prefixing this function with a GUI name makes it exclusive to that GUI.\nEX: GuiEscape(GuiHwnd){\n        MsgBox, % "You pressed the escape key in GUI: " \n    }
GuiSize(GuiHwnd, EventInfo, Width, Height) \nUSE: Launch function when a GUI is resized|minimized|maximized|restored.\nPREFIX: Prefixing this function with a GUI name makes it exclusive to that GUI.\nWIDTH|HEIGHT: Stores the client area width|height the window.\nERRORLEVEL|A_EVENTINFO: Both recieve one of the floowing:\n    0=Win restored|resized.    1=Win minimized    2=Win maximized\nEX: GuiNamGuiSize(GuiHwnd, EventInfo, Width, Height){\n        MsgBox, % "GUI Resized! Client area is now " Height "x" width "."\n    }
GuiContextMenu(GuiHwnd, CtrlHwnd, EventInfo, RightClick, X, Y) \nUSE: This function is launched when the active GUI detects a context menu. \nPREFIX: Prefixing this function with a GUI name makes it exclusive to that GUI.\nCTRLHWND: Contains the control's handle that launched this. BLANK if none.\nWIDTH|HEIGHT: Contains window's current client Width|Height.\nA_EVENTINFO: Contains additional info if control is ListBox|ListView|TreeView.\nX|Y: Contains the right click's X and Y coordinates. Relative to window.\nRIGHTCLICK: Contains True if a right click launched the script.\nEX: GuiContextMenu(GuiHwnd, CtrlHwnd, EventInfo, RightClick, X, Y){\n        MsgBox, % "You right clicked at x" X "y:" Y\n    }
GuiDropFiles(GuiHwnd, FileArray, CtrlHwnd, X, Y) \nUSE: This function is launched when file is dragged/dropped onto a GUI.\nREMARK: To disable drag and drop, remove the GUI's WS_EX_ACCEPTFILES style.\nPREFIX: Prefixing this function with a GUI name makes it exclusive to that GUI.\nFILEARRAY: An array of filenames.\nCTRLHWND: Contains the control's handle that launched this. BLANK if none.\nX|Y: Contains the drop location X and Y coordinates. Relative to the window.\nERRORLEVEL|A_EVENTINFO: Both recieve the total number of files dropped.\nEX: GuiContextMenu(GuiHwnd, CtrlHwnd, EventInfo, RightClick, X, Y){\n        MsgBox, % "You right clicked at x" X "y:" Y\n    }
Hotstring() \nUSE: Creates, modifies, enables, or disables a hotstring.\nVARIANTS:\n    Hotstring(Trigger, [Action, State]) = Make/Change hotstring\n    Hotstring(NewOptions)               = Set Default Options\n    Hotstring("EndChars", [Value])      = Set end characters\n    Hotstring("MouseReset", [Value])    = Mouse click|Hotstring behavior\n    Hotstring("Reset")                  = Hotstring recognizer reset
Hotstring(Trigger, [Action, State]) \nTRIGGER: String that defines the hotstring. Format: :OPTIONS:PATTERN\nOPTIONS: All but Kn, Pn, and X can be disabled by suffixing a 0. Ex: B0 C0 *0\n    * = Trigger on match      ? = Each keystroke as a possible new hotstring\n    C = Case sensitive        Z = Reset recognizer after hotstring fires\n    R = {Raw} Action mode     O = End character is not sent\n    T = {Text} Action mode    C1 = Hotstring does not confrom to typed case\n    Pn = Priority P1...P5     SI|SP|SE = Send method Input|Play|Event\n    B = Keep Trigger text     Kn = SE:Key delay in ms. SP:Key duration in ms.\n    X = Action is executed instead of having its text sent.\nACTION: Default: Send text. X option: Run action as a label|function.\nSTATE: On|Off|Toggle\nEX: Hotstring(":*?B0T:rtm", " = ""Read The Manual!""", On)
Hotstring(Options) \nUSE: Set the default options for all future hotstrings.\nOPTIONS: All but Kn, Pn, and X can be disabled by suffixing a 0. Ex: B0 C0 *0\n    All options listed are the non-default options. X cannot be a default.\n    * = End char not needed     ? = Each char is a possible new hotstring\n    T = {Text} Action mode      Z = Reset recognizer after hotstring fires\n    R = {Raw} Action mode       O = End character is not sent\n    Pn = Priority P1...P5       SI|SP|SE = Send method Input(Default)|Play|Event\n    B0 = Keep Trigger text      Kn = SE:Key delay in ms. SP:Key duration in ms.\n    C = Trigger case matters    C1 = Disable text auto casing\nEX: Hotstring("*?TCB0")
Hotstring("EndChars", [Value]) \nUSE: Set characters that activate a hotstring.\nVALUE: String of new characters.\nRETURN: String. End characters before new Value is applied.\nREMARK: EndChars are irrelevent with the * option.\nEX: Hotstring("EndChars", "-()[]{}':;""/\,.?!`n `t") ; Default end chars
Hotstring("MouseReset", [Value]) \nUSE: Controls whether mouse clicks reset the hotstring recognizer.\nVALUE: 1=Enable. 0=Disable.\nRETURN: String. The setting before Value is applied.\nREMARK: Mouse hook may be installed if needed.\nEX: var := Hotstring("MouseReset") ; Get current MouseReset setting
Hotstring("Reset") \nUSE: Resets the hotstring recognizer.\nREMARK: Hotstring recognizer assumes you've typed nothing so far.
IL_Add(IL_ID, Filename, [IconNum, ResizeNonIcon]) \nUSE: Add an icon or picture to the specified IL_ID.\nIL_ID: An Image List ID made by IL_Create()\nFILENAME: Path to an image file or a bitmap|icon handle.\nICONNUM: Icon group number. Defaults to 1. -Number = Resource ID for an EXE.\nRETURN: Number. New icon's index.\nEX: IL_Add(imgListID, "C:\Main.ico", 2)
IL_Create([StartNum, Grow, LargeIcons]) \nUSE: Creates a new, empty ImageList.\nSTARTNUM: Number of icons to put into the initial list. Default=2.\nGROW: When list size is exceeded, increase capacity by this number. Default=5.\nLARGEICONS: 0=Has small icons. (Default)    1+=Has large icons.\nRETURN: Number. 0=Failure.    1+=ID of the ImageList\nEX: IL_Create(10, 10, true)
IL_Destroy(IL_ID) \nUSE: Delete the specified ImageList ID.\nRETURN: Number. 1=Success.    0=Failure.
InStr(Data, Search, [Case :=1, Pos :=1, Occurrence :=1])\nUSE: Searches for given occurrence(s) of Search in Data.\nDATA: The data you're searching through. AKA: Haystack\nSEARCH: The string you're searching for. AKA: Needle\nCASE: 1 = Case sensitive Search    0 = Not case sensitive Search\nPOS: Specify starting index. If negative, start at end and go left.\n    1 = 1st char    2 = 2nd char    0 = Last char    -1 = 2nd from last char\nOCCURRENCE: If multiple matches are made, return position of this match number.\nRETURN: Number. Index of Data that matches Search. Occurrence affects result.\nEX: InStr("HotShot", "hot", 0, 1, 2) ; R=> 5
IsByRef(ParameterVar) \nUSE: Checks if a variable was passed by memory reference (By Ref).\nRETURN: 1 = True. 0 = False\nEX: IsByRef(SomeVar) ; R=> 1
IsFunc(FunctionName) \nUSE: Checks if specified function exists in the script.\nRETURN: Number. 0 = Not found    1 = Found    2+ = Found with parameters \nREMARK: If returned number > 1, (number-1) is the number of parameters.\nEx: SomeFunc()
IsLabel(Label|Hotkey|Hotstring) \nUSE: Checks if specified label exists in the script.\nRETURN: Number. 0 = Not found.    1+ = Found\nREMARK: Do not include trailing colons.\nEX: IsLabel("GuiClose") ; R=> 1
IsObject(ObjectName) \nUSE: Checks if specified label exists in the script.\nRETURN: Number. 0 = Not an Object.    1+ = Is an Object.\nEX: IsObject("MyObj") ; R=> 1
Ln(Number) \nUSE: Math func. Returns the natural logarithm (base e) of Number.\nREMARK: Returns BLANK if Number is negative.\nEX: Ln(1.2) ; R=> 0.182322
LoadPicture(Filename, [Options, ByRef ImgType:=0]) \nUSE: Loads a picture from file and returns a bitmap or icon handle.\nOPTIONS: Any of the following. Space or tab separation allowed.\n    Wn|Hn: Sets width|height of image.\n    IconN: Load Nth icon from files with multiple images.\n    GDI+: Use GDI+ to load the image.\nIMGTYPE: Variable that stores the return handle type.\n    0 = IMAGE_BITMAP    1 = IMAGE_ICON    2 = IMAGE_CURSOR\nRETURN: Number. Handle.\nEX: Menu, Tray, Icon , % "HICON:" LoadPicture("Shell32.dll", "Icon28")
Log(Number) \nUSE: Math func. Returns the logarithm (base 10) of Number.\nREMARK: Returns BLANK if Number is negative.\nEX: Ln(1.2) ; R=> 0.079181
LTrim(String, [OmitChars:=" `t"]) \nUSE: Trims characters from the beginning of a string.\nOMIT: User defined string of characters to be trimmed. Default = Spaces and Tabs\nEX: MsgBox, % "|" LTrim("! ! ! hi ! ! !", "! ") "|"
LV_Add(Options, Field1, Field2, ..., FieldN) \nUSE: Adds a new row to the bottom of the list.\nRETURN: Number. 0 = Failure.    1+ = New row's number.\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Check   = Show checkmark if ListView has checkboxes\n    ColN    = Begin applying parameters at column number N\n    FocusN  = Sets focus to row N\n    IconN   = Nth Icon from imagelist. A blank icon is used if icon number is too high\n    Select  = Selects row\n    Vis     = Ensures specified row is completely visible\nEX: LV_Add("Check", "RowName")
LV_Delete([RowNum]) \nUSE: Deletes the specified row|all rows.\nROWNUM: BLANK = Delete all rows.    1+ = Row number to delete.\nRETURN: 0 = Failure. 1 = Success.\nEX: LV_Delete() ; Deletes all rows R=> 1
LV_DeleteCol(ColNum) \nUSE: Deletes the specified column and all content beneath it.\nRETURN: 0 = Failure. 1 = Success.\nEX: LV_DeleteCol(1) ; R=> 1
LV_GetCount([Mode]) \nUSE: Returns the total number of rows or columns\nMODE: Affects what's returned\n    BLANK      = Returns total number of rows in the control.\n    S|Selected = Returns number of selected/highlighted rows.\n    Col|Column = Returns total number of columns in the control.\nEX: LV_GetCount("Col") ; R=> 4
LV_GetNext([StartNum:=0, RowType]) \nUSE: Returns row number of the next selected|checked|focused row.\nSTARTNUM: Start searching a\nROWTYPE:\n    BLANK       = Returns the next selected/highlighted row.\n    C|Checked   = Returns the next checked row.\n    F|Focused   = Returns the row that has focus.\nEX: LV_GetNext(0, "F") ; Gets the focused row. R=> 3
LV_GetText(OutputVar, RowNum, [ColNum:=1]) \nUSE: Get text from the specified RowNumber and ColNumber.\nROWNUMBER: If 0, OutputVar is set to col header.\nRETURN: 1 = Success. 0 = Failure. OutputVar is made BLANK.\nEX: LV_GetText(var, 0, 2) ; Var is set to the header of column 2
LV_Insert(RowNum, [Options, Col1, Col2, ..., ColN]) \nUSE: Insert a new row before the specified row.\nCOL: Contents to put in each column.\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Check   = Show checkmark if ListView has checkboxes\n    ColN    = Begin applying parameters at column number N\n    FocusN  = Sets focus to row N\n    IconN   = Nth Icon from imagelist. A blank icon is used if icon number is too high\n    Select  = Selects row\n    Vis     = Ensures specified row is completely visible\nREMARK: Like LV_Add() except newly inserted row uses the first parameter.\nEX: LV_Insert(2,, "A", "B", "C") ; Insert row at row 2. Set col 1,2,3 to A,B,C
LV_InsertCol(ColNum, [Options, ColTitle]) \nUSE: Inserts a new column to the left of the specified column.\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Check   = Show checkmark if ListView has checkboxes\n    ColN    = Begin applying parameters at column number N\n    FocusN  = Sets focus to row N\n    IconN   = Nth Icon from imagelist. A blank icon is used if icon number is too high\n    Select  = Selects row\n    Vis     = Ensures specified row is completely visible\nCOLTITLE: Header for the column.\nEX: LV_InsertCol(2, "Vis", "Col 2") ; Insert col at col 2. Title it "Col 2"
LV_Modify(RowNumber, [Options, NewCol1, ..., NewColN]) \nUSE: Modifies the text|attributes of a row.\nROWNUMBER: 0 = All rows are modified.\nOPTIONS: Zero or more options. Use space or tab for separation.\n    Check   = Show checkmark if ListView has checkboxes\n    ColN    = Col followed by number to begin applying Col1 parameters and beyond\n    FocusN  = Sets focus to row N\n    IconN   = Nth Icon from imagelist. Icon number > number of Icons    = Blank Icon\n    Select  = Selects the row\n    Vis     = Ensures specified row is completely visible\nRETURN: 0 = Failure. 1 = Success.\nEX: LV_Modify(1, "Select Check", "1") ; Select+Check first row. Change col1 text to 1.
LV_ModifyCol([ColNum, Options, ColTitle]) \nUSE: Modifies the attributes|text of the specified column|header.\nREMARK: Providing no parameters will auto-adjust each row to fit the contents.\nOPTIONS:\n    GEN: N = Column width in N pixels    IconRight = Right justify icon\n        Auto = Auto-column width\n    DATA: Float|Integer|Text    Integer sorting is much faster.\n    ALIGN: Center|Left|Right\n    SORT: Uni = Use 1-way sort\n        Sort = Sort in ascending order  SortDesc = Sort in descending order\n        Case = Case sensitive           CaseLocale  = Case based on Locale\n        NoSort = Disable user sorting   Desc = Column starts in descending order\n        Logical = CaseLocale + numbers are treated like true numbers\nEX: LV_ModifyCol(1, "Desc") ; Col 1 is now sorted in descending order
LV_SetImageList(IL_ID, [IconType]) \nUSE: Sets or replaces the ListView's ImageList.\nICONTYPE: 0 = Large    1 = Small    2 = State    BLANK = AutoDetect\nRETURN: On success, returns previous associated ListView.\nEX: LV_SetImageList(IL_ID, 0) ; Set new list and set icon type to large.
Max(Num1, Num2, ..., NumN) \nUSE: Math func. Find the highest number in the Numbers provided.\nNUM: Any amount of numbers. If a string is used, return is BLANK.\nREMARK: Use * to pass an array. Use: Max(arrayName*)\nEX: Max(1, -1, 5.5, 5, 0) ; R=> 5.5
MenuGetHandle(MenuName) \nUSE: Retrieves Win32 menu handle of a menu.\nRETURN: Number. Handle.\nEX: MenuGetHandle("File") ; R=> 0524e5
MenuGetName(Handle) \nUSE: Retrieves the name of a menu based on a handle.\nEX: MenuGetName(0524e5) ; R=> File
Min(Num1, Num2, ..., NumN) \nUSE: Math func. Find the lowest number in the Numbers provided.\nNUM: Any amount of numbers. If a string is used, return is BLANK.\nREMARK: Use * to pass an array. Use: Min(arrayName*)\nEX: Min(1, -1, 2, -10, 5) ; R=> -10
Mod(Dividend, Divisor) \nUSE: Remaining amount after dividend has been divided by the divisor.\nDIVIDEND: The number being divided up. If float, return is float.\nDIVISOR: The number you're dividing by. If float, return is float.\nREMARK: Return value has the same number sign as Dividend.\nEX: Mod(-10, 4) ; R=> -2
NumGet(Var|Address, [Offset:=0, Type:="UPtr"]) \nUSE: Returns the binary number at the specified address and offset.\nVAR: If a variable is passed, its string buffer address is used.\nTYPE: Must be enclosed in quotes.\n    UInt|Int|Int64|Short|UShort|Char|UChar|Double|Float|UPtr|Ptr\nRETURN: BLANK = Invalid address.\nREMARk: If Type is put in the second parameter, offset is assumed 0.\nEX: NumGet(MyVar, 4, "UInt") ; Gets bytes 4 through 7 from MyVar.
NumPut(Number, Var|Address, [Offset:=0, Type:="UPtr"]) \nUSE: Stores number to the specified address and offset.\nVAR: If a variable is passed, its string buffer address is used.\nTYPE: Must be enclosed in quotes.\n    UInt|Int|Int64|Short|UShort|Char|UChar|Double|Float|UPtr|Ptr\nRETURN: BLANK = Invalid address.\nEX: NumPut(1, MyVar, 4, "UInt") ; Puts a 1 in the 4 to 7 byte section of MyVar.
ObjAddRef(Ptr) \nUSE: Increments an object's reference count.\nRETURN: Number. New reference count.
ObjBindMethod(ObjectName, MethodName, [Params]) \nUSE: Creates a BoundFunc object that calls an object's method.\nEX: rlRef := ObjBindMethod(fileObj, "ReadLine") ; Get reference to this\n                              ; FileObject's built-in ReadLine() method.
Object(Key1, Value1, Key2, Value2, ..., KeyN, ValueN) \nUSE: Creates an associative array/key-value pair object.\nMETHODS: All created objects have access to these methods:\n    Clone()    MaxIndex()    InsertAt()    GetAddress()\n    Count()    MinIndex()    RemoveAt()    GetCapacity()\n    Pop()      Delete()      _NewEnum()    SetCapacity()\n    Push()     Length()      HasKey()\nRETURN: Object.\nEX: infoObj := Object("Name", "Groggy", "App", "SciTE")
ObjGetBase(Obj) \nUSE: Get base object of Obj.\nREMARK: No meta-functions are called.\nRETURN: BLANK = No base. Otherwise, base name.\nEX: ObjGetBase(newClass) ; R=> MainBaseClass
ObjRawGet(Object, Key) \nUSE: Retrieve value associated with Key in Object.\nREMARK: No meta-functions or property functions are called.\n    Synonymous with: data := Object[Key]\nRETURN: BLANK = Key not exist. Otherwise, return data from key.\nEX: data := ObjRawGet("MyObj", "Key2") ; Gets data from key2 of MyObj
ObjRawSet(Object, Key, Data) \nUSE: Store/overwrite Data to Object's Key.\nREMARK: No meta-functions or property functions are called.\n    Synonymous with: Object[key] := data\nEX: ObjRawSet("MyObj", "Key2", "SciTE") ; Puts string SciTE into Key2 of MyObj
ObjRelease(Ptr) \nUSE: Decrements an object's reference count.\nRETURN: Number. New reference count.
ObjSetBase(Object, BaseObject) \nUSE: Set's an object's base object.\nREMARK: No meta-functions are called.\nRETURN: BLANK = Object has no base.
OnClipboardChange(Func, [AddRemove:=1]) \nUSE: When clipboard's contents change, a function|function object is called.\nFUNC: Function name or FuncObj. First parameter pass will mean Clipboard:\n    0 = Is empty    1 = Contains text    2 = Contains binary data\nADDREMOVE: Call function:\n    1 = After previously registered functions\n    -1 = Before previously registered functions\n    0 = Do not call function\nEX: OnClipboardChange("ClipBackup", -1)
OnError(Func, [AddRemove]) \nUSE: Specifies a function to run automatically when an unhandled error occurs.\nFUNC: Function|FuncObj. First parameter is an exception object or thorwn value.\nADDREMOVE: Call function:\n    1 = After previously registered functions\n    -1 = Before previously registered functions\n    0 = Do not call function\nEX: OnError("LogError", -1) ; Immediately run an error logger on error
OnExit(ExitFunc, [AddRemove]) \nUSE: Specifies a function to run automatically on script exit.\nEXITFUNC: Function|FuncObj. Param1 = ExitReason. Param2 = ExitCode.\n    EXITREASON: Logoff|Shutdown|Close|Error|Menu|Exit|Reload|Single\n    EXITCODE: Number. -2147483648 ... 2147483647\nADDREMOVE: Call function:\n    1 = After previously registered functions\n    -1 = Before previously registered functions\n    0 = Do not call function\nEX: OnExit("LogError", -1) ; Immediately run an error logger on error
OnMessage(MsgNum, [Func, MaxThread:=1]) \nUSE: Run a function|FuncObj when the program receives the specified message.\nMSGNUM: Number. 0 ... 4294967295\nFUNC: Function|FuncObj to run.\nMAXTHREAD: Max amount of threads. 0 = Unregister function.\n    -Number = Call function before any others and give Number max threads.\nRETURN: Completely depends on if a Function or FuncObj is used.\n    OnMessage's return values are complex. Please see the docs for return info.\nEX: OnMessage(0x201, "LeftClick") ; LeftClick() fires on left mouse down
Ord(String) \nUSE: Get ordinal number (numeric character code) of String's first character.\nRETURN: 0 = Empty string. Otherwise, returns first character's code.\nEX: Ord("test") ; R=> 116 Because t is 116.
RegExMatch(Haystack, [Options]Needle, [OutputVar, StartPos:=1]) \nUSE: Check a string for a specified pattern (Regular Expression).\nHAYSTACK: String to search trhough\nNEEDLE: RegEx Pattern. Check Cheat_RegEx or see docs.\nOPTIONS: RegEx prefix options. A ) should separate options from needle.\n    i = Case-insensitive    U = Default ungreedy     m = Multiline|Per line\n    A = Force ^ anchor      D = Force $ anchor       S = Study pattern\n    s = Dot matches ALL     X = Enable PCRE_EXTRA    x = Ignore whitespace chars\n    P = Position mode       C = Auto-callout mode   `a = Use all newline forms\n    `n = Use `n as default new line    J = Allow duplicate named subpatterns\n    `r = Use `r as default new line    (*ANYCRLF) = Newlines restricted to `r\nOUTPUTVAR: Variable contents is dependant on the following:\n    Full Match = Store the full pattern match.\n    Length = If P) option, store the length of pattern match. \n    Object = If O) option, create Match Object.\nSTARTPOS: Specify starting spot. If negative, start at end and go left.\n    1 = 1st char    2 = 2nd char    0 = Last char    -1 = 2nd from last char\nRETURN: Position of leftmost occurrence. 0 if pattern is not found.\nERRORLEVEL: 0 = No Errors.  Negative number = Regex Execution error.\n    "Compile error N at offset M". N = PCRE error number. M = error position.\nEX: RegExMatch(email, "\S+?@\S*\.\w{2,}") ; Basic email verification. R=> 1
RegExReplace(Haystack, [Options]Needle, [Replace:="", Count:="", Limit:=-1, StartPos:=1]) \nUSE: Searches a string for a specified pattern and replace match.\nHAYSTACK: String to search.             NEEDLE: RegEx Pattern.\nREPLACE: Replacement text.              COUNT: Number of replacements.\nLIMIT: Max amount of replacements       \nSTARTPOS: Specify starting spot. If negative, start at end and go left.\n    1 = 1st char    2 = 2nd char    0 = Last char    -1 = 2nd from last char\nOPTIONS: RegEx prefix options. A ) should separate options from needle.\n    i = Case-insensitive    U = Default ungreedy     m = Multiline|Per line\n    A = Force ^ anchor      D = Force $ anchor       S = Study pattern\n    s = Dot matches ALL     X = Enable PCRE_EXTRA    x = Ignore whitespace chars\n    P = Position mode       C = Auto-callout mode   `a = Use all newline forms\n    `n = Use `n as default new line    J = Allow duplicate named subpatterns\n    `r = Use `r as default new line    (*ANYCRLF) = Newlines restricted to `r\nRETURN: RegEx altered Haystack.\nREMARK: StrReplace() is faster. Use whenever possible.\nERRORLEVEL: 0 = No Errors.  Negative number = Regex Execution error.\n    String = "Compile error N at offset M". N = PCRE error num. M = Error pos.\nEX: RegExReplace("Appple", "pp", "p") ; R=> Apple
RegisterCallback(Function|FuncObj, [Options:="", PCount:=Mandatory, EventInfo:=Address]) \nUSE: Used to redirects a call to a function|FuncObj via a machine-code address.\nOPTIONS: Space separated options:\n    Fast|F = Avoid starting a new thread for each function call\n    CDecl|C = Conform to "C" address calling convention\nPCOUNT: Number of parameters being passed. If BLANK, use mandatory amount.\nREMARK: Due to the complexity of this command, the docs should be read.\nEX: RegisterCallback("TheFunc", "F", 3)
Round(Number, [N]) \nUSE: Math func. Rounds Number to N places.\nN: 0|Omitted = Round to nearest integer.\n    +N = Round to Nth decimal place.\n    -N = Round N digits left of the decimal.\nEX: Round(3.49) ; R=> 3\n    Round(350,-2) ; R=> 400
RTrim(String, [OmitChars:=" `t"]) \nUSE: Trims characters from the end of a string.\nOMIT: User defined string of characters to be trimmed. Default = Spaces and Tabs\nEX: MsgBox, % "|" RTrim("! ! ! hi ! ! !", "! ") "|"
SB_SetIcon(Filename, [IconNum:=1, Part:=1]) \nUSE: Display a small icon left of the text in a specified status bar part.\nFILENAME: Path to an icon resource or an icon handle.\nICONNUM: To use another icon group, specify an icon group number.\nRETURN: 0=Failure. 1+= HICON address.\nEX: SB_SetIcon("Shell32.dll", 2) ; Chooses the 2nd icon from shell32
SB_SetParts(Width1, Width2, ... Width255) \nUSE: Divides bar into multiple parts that are.\nWIDTH: Specify width in pixels for all parts but last. Last gets leftover pixels.\nRETURN: 0 = Failure. 1+ = Success. Return status bar's HWND.\nEX:    SB_SetParts(50,50) ; Creates two 50-pixel parts. 3rd is leftover pixels
SB_SetText(Text, [Part:=1, Style:=0]) \nUSE: Change the text in a status bar.\nTEXT: Tabs justify text. 0 tab = Left    1 tab = Center    2 tab = right\nPART: Section of statusbar to change.\nSTYLE: Alter status bar border. 0 = Traditional    1 = None    2 = Raised\nRETURN: 0 = Failure. 1 = Success.\nEX: SB_SetText("txt", 2, 1]) ; Removed status bar part 2 border and added txt
Sin(Number) \nUSE: Math func. Get the trigonometric sine of Number.\nNUMBER: Must be in radians.\nEX: Sin(1.2) ; R=> 0.932039
Sqrt(Number) \nUSE: Get the square root of Number.\nRETURN: Number. BLANK = Number was negative. \nEX: Sqrt(121) ; R=> 11
StrGet(Address, [Length , Encoding:=SameAsEXE]) \nUSE: Copy a string from a memory address.\nADDRESS: Memory addrss to read from.\nLENGTH: Number of bytes to retrieve.\nENCODING: Defaults to the exe type.  \n    Examples: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nRETURN: Requested string post encoding. BLANK = Invalid parameter.\nEX: StrGet(myAddy, 8) ; Get 8 byts from the address myAddy
StrLen(String) \nUSE: Get the number of characters in a string.\nEX: StrLen("The quick brown fox...") ; R=> 22
StrPut(String, Address, [Length , Encoding:=SameAsEXE]) \nUSE: Copy a string to a memory address.\nADDRESS: Memory addrss to write to.\nLENGTH: Number of bytes to write.\nENCODING: Defaults to the exe type.  \n    Examples: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nRETURN: 0 = Failure. BLANK = Invalid parameter. 1+ = Number of chars written.\nEX: StrPut("Test", addy) ; Store test to the handle in addy
StrReplace(Data, Search, [Replace, OutCount, Limit:=-1]) \nUSE: Replaces Search matches in data with the Replace string.\nDATA: String to search through          SEARCH: String you're trying to match\nREPLACE: String to replace matches      OUTCOUNT: Stores number of matches\nLIMIT: Limit number of replacements: -1 = All. Otherwise, number of replacements\nRETURN: String Data after replacements (if any) have been made. \nEX: StrReplace("2 tsp salt", "tsp", "teaspoon") ; R=> 2 teaspoon salt
StrSplit(Data, [Delim, Trim, Max:=-1]) \nUSE: Splits Data into substrings. Saves substrings to an array.\nDELIM: String or array of characters. Marks where a substring starts|ends.\nTRIM: String of characters trimmed from the beginning and end of each substring.\nMAX: Max array elements. At max, any non-split Data is appended to last element.\n    -1 = No array size limit\n    1+ = Max number of array elements\nRETURN: Object. Array.\nEX: StrSplit(var, "`n", " `t", 6) ; Get first 5 lines of var. Trim whitespace. \n                                  ; 6th element contains lines 6+ of var.
SubStr(String, Pos, [Length:=LastChar]) \nUSE: Get a substring from String that starts at Pos and ends at Length.\nPOS: The index of the character to start at. -Pos = Number left of last char.\n    1=1st char    2=2nd char    0=Last char    -1=2nd from last char\nLENGTH: Length of characters to capture.\n    +Num = Capture Num characters after Pos.\n    -Num = Capture from Pos to end of string. Omit last Num characters.\nEX: SubStr("CatOtterDogBird",1,8) ; R=> CatOtter\n    SubStr("CatOtterDogBird",-11,-4) ; R=> OtterDog
Tan(Number) \nUSE: Math func. Get the trigonometric tangent of Number.\nNUMBER: In radians.\nEX: Tan(1.2) ; R=> 2.572152
Trim(String, [Omit:=" `t"]) \nUSE: Trims characters from the beginning and end of a string.\nOMIT: User defined string of characters to be trimmed. Default = Spaces and Tabs\nEX: MsgBox, % Trim("!!! hi !!!", "! ")
TV_Add(Name, [ParentID, Options]) \nUSE: Add a new item to the TreeView.\nNAME: Text of the item.\nPARENTID: \nOPTIONS: Tab|Space separated string of options. + to add option. - to remove.\n    Bold = Name is bolded               IconN = Use Nth icon from ImageList\n    Check = Check left of item          Expand = Show children\n    Vis = Scroll to visibly see item    VisFirst = Vis + Scroll to top\n    Select = Select this item          \n    Sort|First|N = Item is added alphabetically|to first slot|to slot N\nRETURN: 0 = Failure.\nEX: c1 := TV_Add("Child1", "P1" ,"+Vis") ; Makes a treeview child belonging to P1
TV_Delete([ItemID]) \nUSE: Deletes the specified item or all items.\nREMARK: If no parameter is passed, all treeview items are deleted.\nRETURN: 1 = Success. 0 = Failure.
TV_Get(ItemID, Attribute) \nUSE: Check if an item has the specified attribute(s).\nATTRIBUTE: \n    B|Bold = Item font is bolded\n    E|Expand|Expanded = Item is expanded\n    C|Check|Checked = Item is checked\nRETURN: 0 = Failure or no attribute. Otherwise, return ItemID.
TV_GetChild(ParentID) \nUSE: Get the ID number of ParentID's first/top child.\nRETURN: 0 = None. 1+ = Child ID.\nEX: TV_GetChild(P1) ; R=> C1
TV_GetCount() \nUSE: Returns the total number of items in the control.\nREMARK: Always instantaneous because controls keep track of count.\nEX: TV_GetCount() ; R=> 10
TV_GetNext([ItemID, ItemType]) \nUSE: Get ID number of the item after ItemID.\nITEMTYPE:\n    F|Full = Retrieves next item regardless of relationship\n    C|Check|Checked = Retrieves next checked item regardless of relationship\nRETURN: \n    No param = Return ID of top item in TreeView\n    ItemID Only = Return ID of ItemID's next sibling\n    ItemID F|C = Return ID of next item|checked item regardless of relationship\nEX: TV_GetNext("Child3", "Full") ; R=> Parent 2
TV_GetParent(ItemID) \nUSE: Get the ID of ItemID's parent.\nRETURN: 0 = Failure or no parent. Otherwise, return parent ID.\nEX: TV_GetParent("c1") ; R=> P1
TV_GetPrev(ItemID) \nUSE: Get the ID of the sibling above ItemID.\nRETURN: 0 = Failure or none. Otherwise, return sibling ID.\nEX: TV_GetPrev("c2") ; R=> c1
TV_GetSelection() \nUSE: Get the ID number of the currently selected item.\nEX: TV_GetSelection() ; R=> c2
TV_GetText(OutputVar, ItemID) \nUSE: Stores the text of ItemID into OutputVar.\nREMARK: OutputVar is capped at 8191 characters.\nRETURN: 0 = Failure. Otherwise, return ItemID.\nEX: TV_GetText(p1c2Name, "c2") ; R=> c2
TV_Modify(ItemID, [Options, NewName:=""]) \nUSE: Modifies the attributes|name of an item.\nOPTIONS: Tab|Space separated string of options. + to add option. - to remove.\n    Bold = Name is bolded               IconN = Use Nth icon from ImageList\n    Check = Check left of item          Expand = Show children\n    Vis = Scroll to visibly see item    VisFirst = Vis + Scroll to top\n    Select = Select this item          \n    Sort|First|N = Item is added alphabetically|to first slot|to slot N\nNEWNAME: If present, renames ItemID.\nRETURN: 0 = Failure. Otherwise, return ItemID.\nREMARK: When ItemID is the only parameter, the item is selected.\nEX: TV_Modify("P1", "Bold", "Main") ; Change P1's name to Main in bold.
TV_SetImageList(ImageListID, [IconType:=0]) \nUSE: Creates or replaces a TreeView's ImageList.\nICONTYPE: 2 = State icons (Not yet supported)\nRETURN: 0 = Failure. Otherwise, returns previous ImageListID.\nEX: TV_SetImageList("UpdatedImgList")
VarSetCapacity(Variable, [Cap, Fill:=0]) \nUSE: Adjusts the size of Variable or free its memory.\nCAP: Requested size in bytes.\nFILL: Number. 0 ... 255. Fills every byte with Fill number.\nRETURN: Number of bytes the variable can currently hold.\n    BLANK = Variable not found.\n    No Params = Return size of Variable.\nEX: VarSetCapacity(rectStruct, 16) ; Set a Rectangle Structure var to 16 bytes
WinActive(WinTitle, [WinText, NotTitle, NotText]) \nUSE: Check if the current active window matches the WinTitle criteria.\nWINTITLE: WinTitle and it's matching behaviors. See WinTitle command.\n    Types: ahk_exe    ahk_class    ahk_id    ahk_pid    ahk_group\nREMARK: !WinActive() acts as WinNotActive()\nRETURN: 0 = Failure. 1+ = Active window's Unique ID (HWND)\nEX: WinActive("ahk_exe SciTe.exe") ; R=> 054c2d5
WinExist(WinTitle, [WinText, NotTitle, NotText]) \nUSE: Check if any current windows match the WinTitle criteria.\nWINTITLE: WinTitle and it's matching behaviors. See WinTitle command.\n    Types: ahk_exe    ahk_class    ahk_id    ahk_pid    ahk_group\nREMARK: !WinExist() acts as WinNotExist()\nRETURN: 0 = Failure. 1+ = Matching window's Unique ID (HWND)\nEX: WinExist("ahk_exe.exe") ; R=> 054c2d5

/* CONTROL_FLOW */
Break, [LoopLabel] \nUSE: Exits the current loop or the loop directly under LoopLabel.\nLOOPLABEL: A label directly over a loop or a loop level number.\n    1 = Current loop    2 = Previous loop    String = Label above a loop\nREMARK: LoopLabel cannot be a variable.\nEX: Break, LoopLvl2 ; Breaks the loop with a label over it called LoopLvl2
Catch, [OutputVar] \nUSE: Executes code when a try statement throws an exception.\nOUTPUTVAR: Stores an Exception Object.\nREMARK: A Catch belongs to a Try like an Else belongs to an If.\nEX: Catch, excepObj ; Catches a try error and notifies user about it\n        MsgBox, An error occurred. Data is saved to excepObj.
Continue, [LoopLabel] \nUSE: Ends current loop iteration and starts the next one.\nLOOPLABEL: A label directly over a loop or a loop level number.\n    1 = Current loop    2 = Previous loop    String = Label above a loop\nREMARK: LoopLabel cannot be a variable.\nEX: Continue, 2 ; Stops current iteration. Continues previous loop's next iteration
Else \nUSE: Specifies the command(s) to run if the matching if statement is false.\nREMARK: An else must follow|belong to an if-statement.\nEX: if (x = True)\n        MsgBox, X is true\n    Else \n        MsgBox, X is false
Exit , [ExitCode]\nUSE: Exits the current thread. If not persistent, Exit acts like ExitApp.\nREMARK: Persistence comes from having one of the following in a script:\n    #Persistent, Hotkey, Hotstring, OnMessage(), or a GUI\nEXITCODE: Number -2147483648 ... 2147483647
Finally \nUSE: Commands in a finally block must be executed after a Try-statement.\nREMARK: Finally must belong a Try-statement.\nEX: Try            ; Try's a function and then logs the event.\n        ThisFunc()\n    Finally\n        LogEvent()
For Key, [Value] in Expression \nUSE: Loop through an object. Execute the following commands for each element.\nKEY|VALUE: These can be whatever words you want. They are temporary variables.\nEX: For fruit, color in Object("Apple","Red","Grape","Purple")\n        MsgBox, % "The " color " " fruit "." ; Displays items in new object
GoSub, Label \nUSE: Thread continues at the line below Label name.\nLABEL: Name of a label, hotkey, or hotstring.\nREMARK: If a return is hit, the thread returns to the GoSub caller's next line.\n    If a return hits an exit, code flow is halted.\nEX: MyLabel:          ; Creates an infinite loop\n        GoSub, MyLabel ; Thread will keep jumping back and forth
Goto, Label \nUSE: Thread continues at the line below Label name.\nLABEL: Name of a label, hotkey, or hotstring.\nREMARK: Unlike GoSub, a Return is treated like an Exit.\nEX: MyLabel:          ; Creates an infinite loop\n        GoTo, MyLabel ; Thread will keep jumping back and forth
if  \nUSE: Run the next line|block when the if-statement evaluates True.\nREMARK: 0|False|BLANK = False. True|Number>0 = True.\n    If !|Not means check for a false statement instead of true.\n    A Block can be used to include multiple lines after any conditional statement.\nVARIATIONS: \n    If [!](Expression)\n        If Expression evaluates to True\n    If Var [not] between Lower and Upper\n        If Var falls between Lower and Upper bounds (inclusive)\n    If Var [not] in MatchList\n        If Var matches any element in MatchList\n    If Var [not] contains MatchList\n        If any element from MatchList is found anywhere inside Var\n    If Var is [not] Type\n        If var is of the specified type
if [!](Expression) \nUSE: If Expression evaluates true, run the next line|block.\nREMARK: If ! is present, check for false evaluation instead of true.\nEX: if (2 > 1)\n        MsgBox, True!
If Var [not] between Lower and Upper \nUSE: Run the next line|block if Var is between Lower and Upper bounds.\nVAR: Can be a number or string.\nLOWER|UPPER: Lowest and highest value that Var can fall between (inclusive).\nREMARK: If "not" is included, check for false evaluation instead of true.\nEX: If var between papaya and plum ; var := "pear"\n        MsgBox, True because pe falls between pa and pl. 
If Var [not] in MatchList \nUSE: Checks if Var has an exact matches to an element in MatchList.\nMATCHLIST: A comma separated list. Spacing is not ignored.\n    To make a literal comma in the match list, use 2 commas.\nREMARK: If you need a blank element, start the matchlist with a comma.\nEX: If var in peach,pear,plum ; var := "pear"\n        MsgBox, % var " is in the match list"
If Var [not] contains MatchList \nUSE: Checks if any element from MatchList matches any part of Var.\nMATCHLIST:A comma separated list. Spaces are not ignored.\n    To make a literal comma in the match list, use 2 commas.\nREMARK: If you need a blank element, start the matchlist with a comma.\nEX: If var contains word,word2,TE4 ; var := "SciTE4AHK"\n        MsgBox, TE4 was fond in %var%
If Var is [not] Type \nUSE: Checks if Var conforms to the the specified type.\nTYPE: Name          Define\n      integer       Whole numbers only.\n      float         Integer + decimals allowed.\n      number        Integer or float.\n      digit         Only the numbers 0-9 are allowed.\n      xdigit        Same as digit + A-F are allowed. 0x prefix allowed.\n      alpha         Letters only. A-Z and a-z.\n      upper         ONLY UPPERCASE ALPHA ALLOWED\n      lower         only lowercase alpha allowed\n      alnum         Alpha + digit allowed\n      space         Only whitespace allowed. Space|Tab|Linefeed|Return|etc...\n      time|date     Only valid date-time stamps allowed. YYYYMMDDHH24MISS\nEX: If var is alnum ; var := "SciTE4AHK"\n        MsgBox, % var " is made up of letters and|or numbers"
IfEqual \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if (var = value)
IfExist \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Consider using: if FileExist() 
IfGreater \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if (var > value)
IfGreaterOrEqual \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if (var >= value)
IfInString \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Consider using: if InStr()
IfLess \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if (var < value)
IfLessOrEqual \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if (var <= value)
IfMsgBox, ButtonName \nUSE: Run the following line|block based on the last MsgBox's pushed button.\nBUTTONNAME: Yes|No|OK|Cancel|Abort|Ignore|Retry|Continue|TryAgain\nEX: IfMsgBox, Abort\n        LogError("User clicked abort") ; Logs that a user aborted something
IfNotEqual \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if (var != value)
IfNotExist \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Consider using: if !FileExist()
IfNotInString \nDEPRECATED:This command is not recommended for use in new scripts.\nREPLACEMENT: Consider using: if !InStr()
IfWinActive \nDEPRECATED:This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if WinActive()
IfWinExist \nDEPRECATED:This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if WinExist()
IfWinNotActive \nDEPRECATED:This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: if !WinActive()
IfWinNotExist \nDEPRECATED:This command is not recommended for use in new scripts. \nREPLACEMENT: if !WinExist()
Loop  \nUSE: Repeatedly performs the next line|block.\nVARIATIONS: All loops are stopped by a Break or a Return\n    Loop, [Count]\n        Repeats indefinitely or until A_Index >= Count\n    Loop, Files, FilePattern\n        Loop through specified files and/or folders\n    Loop, Parse, String\n        Loop through a string by character or substring\n    Loop, Read, InputFile\n        Loop through each line of a file\n    Loop, Reg, KeyName\n        Loop through keys/subkeys of the registry\n    Until (Expression)\n        Breaks a loop when expression evaluates true. Used directly after a loop.\n    While (Expression)\n        Loop while expression evaluates true
Loop, [Count] \nUSE: Repeat commands indefinitely or until Count iterations have occurred\nCOUNT: Number of iterations.\nEX: Loop, 3\n        MsgBox, % "Iteration #" A_Index ; Shows 3 loop iterations
Loop, Files, FilePattern [Mode:=F]\nUSE: Loop through the specified files and/or folders.\nFILEPATTERN: Name|path to a file|folder. Wildcards are allowed.\nMODE: Any combination of the following. Spacing optional.\n    D = Directories    F = Files    R = Recurse into subdirectories\nREMARK: The following built-in variables can be used inside a Files-Loop\n    A_LoopFileName  A_LoopFileSizeKB    A_LoopFileShortName\n    A_LoopFileExt   A_LoopFileSizeMB    A_LoopFileShortPath\n    A_LoopFileDir   A_LoopFileAttrib    A_LoopFileTimeCreated\n    A_LoopFileSize  A_LoopFileLongPath  A_LoopFileTimeModified\n    A_LoopFilePath  A_LoopFileFullPath  A_LoopFileTimeAccessed\nEX: Loop, Files, % A_ScriptDir "\*.ah?"\n        MsgBox, A_LoopFileName
Loop, FilePattern , IncludeFolders?, Recurse?\nDEPRECATED:This command is not recommended for use in new scripts.\nREPLACEMENT: Consider using: Loop, Files, FilePattern
Loop, Parse, String, [Delim:="", Omit]\nUSE: Loops through String one substring at a time.\nREMARK: The following built-in variables can be used inside a Parse-Loop\n    A_Index = Current loop iteration    A_LoopField = Current substring\nDELIM: Determines what characters create a substring.\n    BLANK = Parse through each character.\nOMIT: User defined string of characters to trim from the end of each substring.\nEX: Loop, Parse, var ; var := "SciTE4AHK"\n        MsgBox, % A_LoopField
Loop, Read, InputFile, [OutputFile]\nUSE: Retrieves text from a file, one line at a time.\nINPUTFILE: File to read.\nOUTPUTFILE: Optional file you can write to.\n    Quickly write to OutputFile by using: FileAppend, Text\n    Prefix outputfile with an * to us use LF instead of CR+LF.\n    Using * for OutputFile's name allows FileAppend to send text to StdOut.\nREMARK: The following built-in variables can be used inside a Parse-Loop\n    A_LoopReadLine = Current line's text    A_Index = Current loop iteration\nEX: Loop, Read, % A_ScriptFullPath ; Loop through current script\n        MsgBox, % A_LoopReadLine   ; Show each line
Loop, Reg, KeyName, [Mode]\nUSE: Loops through registry keys and subkeys, one at a time. \nKEYNAME: Full key name. Must start with HKLM|HKU|HKCU|HKCR|HKCC\nMODE: Any combination of the following. Spacing optional.\n    K = Keys    V = Values    R = Recurse into subkeys\nREMARK: The following built-in variables can be used inside a Reg-Loop\n    A_Index          A_LoopRegType      A_LoopRegKey\n    A_LoopRegName    A_LoopRegSubKey    A_LoopRegTimeModified\nEX: Loop, Reg, HKCR\AutoHotkeyScript, KVR\n        MsgBox, % "Path: " A_LoopRegKey "\" A_LoopRegSubKey
Loop, RootKey\nDEPRECATED:This command is not recommended for use in new scripts. \nREPLACEMENT: Consider using: Loop, Reg, KeyName
Return [Expression]\nUSE: Return a thread to the line after the GoSub|Function|Label|GroupActivate caller.\nEXPRESSION: Only used inside of functions. Expression is returned to caller.\nREMARK: If at the top of the calling stack, Return acts like Exit.\nEX: Return (FunctionResult)
Throw [Expression]\nUSE: Signals when an error has occurred. This signal is used by Try's Catch.\nEXPRESSION: The value stored in Catch's OutputVar.\nREMARK: If Expression is omitted, an Exception Object is thrown instead.\nCHEAT: See Cheat_Object_Excpetion\nEX: Throw (ErrorVar) ; Throws a variable called ErrorVar that catch can use
Try \nUSE: Guards the next line|block from runtime errors and Throw's exceptions.\nREMARK: Used with catch.\nEX: Try                ; Try some function.\n        SomeFunction()
Until (Expression)\nUSE: Added directly after a loop. Loop breaks when Expression evaluates true.\nREMARK: Until-Loops guarantee the next line|block will run at least once\nEX: Loop                    ; Start loop\n        MsgBox, % A_Index   ; Show each A_Index iteration\n    Until (A_Index >= 10)   ; Break when A_Index >= 10
While (Expression)\nUSE: Repeat commands indefinitely until Expression evalautes False.\nREMARK: Use an Until-Loop if the next line|block needs to run at least once.\nEX: While (A_Index <= 5)\n        MsgBox, % "Iteration #" A_Index

/* OPERATORS */

- \nSubtract
-- \nDecrement 1
-= \nSubtract then assign 
: \nTernary Else, Pair Seperator
:= \nAssign to
! \nNot
!= \nNot equal
? \nTernary if
.= \nAppend to
* \nMultiply
** \nExponetial
*= \nMultiply then assign
/ \nDivide
// \nFloor divide
//= \nFloor divide then assign
/= \nDivide then assign
& \nBitwise AND|Address prefix
&& \nLogical AND
&= \nBitwise AND then assign
^ \nBitwise XOR
^= \nBitwise XOR then assign
+ \nAdd
++ \nIncrement 1
+= \nAdd then assign
< \nLess than
<< \nBit shift left
<<= \nBit shift left then assign
<= \nLess than or equal
<> \nNot equal
= \nEqual
== \nCase sensitive equal
> \nGreater than
>= \nGreater than or equal
>> \nBit shift right
>>= \nBit shift right then assign
| \nBitwise OR
|= \nBitwise OR then assign
|| \nLogical OR
~ \nBitwise NOT
~= \nRegEx Match
AND \nLogical AND
NOT \nLogical NOT
OR \nLogical OR
ByRef \nDirect variable reference
New \nNew item|object

/* DECLARATIONS */

Class \nDeclare new class
extends \nInherit Base Class
Global \nPermanant public variable
Local \nTemporary private function variable
Static \nPermanant private function variable

/* COMMANDS */
AutoTrim, On|Off \nUSE: Controls if whitespace is trimmed from the beginning|end of traditional variables.\nONOFF: On|1 = Trim whitespace    Off|0 = Don't trime whitespace\nREMARK: A_AutoTrim contains this commands current setting.\nEX: Var1 := "   1   " ; Var has spaces\n    Var2 = %var1%     ; Assign using traditional method\n    MsgBox, Var1 |%var1%|`nVar2 |%var2%| ; Whitespace is trimmed from Var2
BlockInput, Mode \nUSE: Enable and disable keyboard, mouse, and|or mouse movement.\nMODE1: Keyboard and mouse\n    On = Enable    Off = Disable\nMODE2: During send and|or mouse events.\n    Send  = Disable during Send|SendRaw.\n    Mouse = Disable during Click|MouseMove|MouseClick|MouseDrag.\n    SendAndMouse = Send mode + mouse mode.\n    Default = Disable all other modes.\nMODE3: Mouse movement.\n    MouseMove = Disable    MouseMoveOff = Enable\nREMARK: Each mode operates independantly of the others.
Click, [Button := Left, X := 0, Y := 0, Count := 1, State, Rel|Relative] \nUSE: Send different mouse button events.\nBUTTON: Left|Right|Middle|X1|X2|WU|WD|WR|WL     X|Y: Click coordinates\nSTATE: Down|D = Held down    Up|U = Released    COUNT: Number of clicks\nREL|RELATIVE: XY coordinates are relative to current mouse position.\nREMARK: Unlike most commands, don't include commas for unused fields.\n    Click can be used with send: Send, {Click, Left, 2}\nEX: Click, Left, 50, -50, 2, Rel ; Double click 50 pixels right and\n                                 ; and 50 pixels up from cursor.
ClipWait, [SecToWait := Indefinitely, DataType := 0] \nUSE: Waits until the clipboard contains data.\nSECTOWAIT: Seconds to wait for the clipboard.\n    0 = .5 seconds    1+ = Seconds\nDATATYPE: 0 = Wait for text.    1 = Wait for any binary data.\nERRORLEVEL: 0 = Success. 1 = SecToWait expired.
Control \nControl, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Used to manipualte controls.\nSUBCOMMANDS: \n    Check = Check radio button|checkbox     Uncheck = Uncheck radio button|checkbox\n    Enable = Enable control                 Disable = Disable control\n    Show = Make control visible             Hide = Hide control\n    Style = Apply style to control          ExStyle = Apply ex style to control\n    ShowDropDown = Show ComboBox DDL        HideDropDown = Hide Combobox DDL\n    TabLeft = Go left X tabs                TabRight = Go right X tabs\n    Add = Add to bottom of ListBox|ComboBox Delete = Remove Nth ListBox|ComboBox entry\n    Choose = Select Nth ListBox|ComboBox    EditPaste = Paste at edit box caret\n    ChooseString = Select first ListBox|ComboBox entry to match String\nCONTROL: Name or text of control. HWND control is done through WinTitle.\nWINTITLE: Standard WinTitle matching. For a handle, use: ahk_id %HWND%\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
Control, Check, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Turns on|checks a radio button or checkbox.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Check, , GuiCheck1, ahk_exe MyProg.exe
Control, Uncheck, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Turns off a radio button or checkbox.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Uncheck, , GuiCheck1, ahk_exe MyProg.exe
Control, Enable, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Enables a disabled control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Enable, , GuiBtn1, ahk_exe MyProg.exe
Control, Disable, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Disables|grays out an enabled control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Disable, , GuiBtn1, ahk_exe MyProg.exe
Control, Show, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Shows a previously hidden control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Show, , GuiBtn1, ahk_exe MyProg.exe
Control, Hide, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Hides a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nIf you additionally want to prevent a control's shortcut key (underlined letter) from working, disable the control via the Disable sub-command.\nEX: Control, Hide, , GuiBtn1, ahk_exe MyProg.exe
Control, Style, Hex, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Changes the style of a control.\nHEX: A style hex Num.\n    Num: Set to style Num               -Num: Remove style Num from control\n    ^Num: Toggle control's style        +Num: Add style Num to control\nREMARK: Some style changes require a redraw. See: WinSet, Redraw.\nCHEAT: See Cheat_Styles\nERRORLEVEL+EXO: 0 = Success. 1 = Window not found or style can't be applied.\nEX: Control, Style, 0x200, GuiBtn1, ahk_exe MyProg.exe
Control, ExStyle, Hex, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Changes the extended style of a control.\nHEX: A extended style hex Num.\n    Num: Set to style Num               -Num: Remove style Num from control\n    ^Num: Toggle control's style        +Num: Add style Num to control\nREMARK: Some style changes require a redraw. See: WinSet, Redraw.\nCHEAT: See Cheat_Styles\nERRORLEVEL+EXO: 0 = Success. 1 = Window not found or style can't be applied.\nEX: Control, ExStyle, 0x200, GuiBtn1, ahk_exe MyProg.exe
Control, ShowDropDown, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Shows the drop-down list of a ComboBox control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, ShowDropDown, , Combo1, ahk_exe MyProg.exe
Control, HideDropDown, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Hides the drop-down list of a ComboBox control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, HideDropDown, , Combo1, ahk_exe MyProg.exe
Control, TabLeft, [Count, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Moves a SysTabControl32 tab to the left.\nCOUNT: Number of tabs to move left.\nREMARK: To select a tab by number, use: SendMessage with 0x1330 and 0x130C\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, TabLeft, 3, GuiTabs, ahk_exe MyProg.exe
Control, TabRight, [Count, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Moves a SysTabControl32 tab to the right.\nCOUNT: Number of tabs to move right.\nREMARK: To select a tab by number, use: SendMessage with 0x1330 and 0x130C\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, TabRight, 3, GuiTabs, ahk_exe MyProg.exe
Control, Add, String, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Add a new entry to the bottom of a ListBox|ComboBox\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Add, String, ComboBox2, ahk_exe MyProg.exe
Control, Delete, N, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Deletes the Nth entry from a ListBox|ComboBox\nN: Number of control to delete. 1=First    2=Second   etc...\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Delete, 10, ComboBox2, ahk_exe MyProg.exe
Control, Choose, N, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Sets the selection in a ListBox|ComboBox to be the Nth entry.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, Choose, 2, ListBox1, ahk_exe MyProg.exe
Control, ChooseString, String, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Searches a ListBox|ComboBox and selects the first matching entry.\nSTRING: The string to search for inside the ListBox|ComboBox.\nREMARK: This is not case sensitive.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, ChooseString, ListBox1, ahk_exe MyProg.exe
Control, EditPaste, String, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Inserts String into an Edit control at the caret.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Control, EditPaste, String, Edit1, ahk_exe MyProg.exe
ControlClick, [Control|Pos, WinTitle, WinText, Button, Count, Options, NotTitle, NotText] \nUSE: Sends a mouse event directly to a control.\nCONTROL: Name|Text of control. Uses SetTitleMatchMode.\nBUTTON: LEFT|RIGHT|MIDDLE|X1|X2|WU|WD|WL|WR    COUNT: Number of clicks\nPOS: XY position to click. Uses: CoordMode, Mouse\nOPTIONS: A space separated string of the following:\n    D|U = Set button to down|up state       Pos = Prioritize POS over Control\n    NA = Can improve reliability\n    Xn|Yn = Sets x|y coordinate to click. Relative to control's upperleft corner.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlClick, x10 y10, ahk_exe MyProg.exe, , Left, 2, NA Pos
ControlFocus, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Sets focus to a given control on a window.\nCONTROL: Name|Text of control. Uses SetTitleMatchMode.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlFocus, Btn1, ahk_exe MyProg.exe
ControlGet \nControlGet, OutputVar, SubCommand, [Value, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Retrieves various types of information about a control.\nSUBCOMMAND:\n    Hwnd = Get control handle.                  Checked = 1 = Checked. 0 = Not checked.\n    Choice = Get selected ListBox|ComboBox.     Visible = 1 = Visible. 0 = Not visible.\n    Tab = Get SysTabControl32 tab number.       Enabled = 1 = Enabled. 0 = Not enabled.\n    Line = Get text of Edit control line.       Selected = Get Edit control selected text.\n    CurrentCol = Get col number of Edit caret.  CurrentLine = Get line number of Edit caret.\n    LineCount = Get number of Edit control lines.\n    List = Get list from: ListView|ListBox|ComboBox|DropDownList.\n    Style|ExStyle = Get 8-digit hex number for the control's Style|ExStyle.\n    FindString = Get number of ListBox|ComboBox that exactly matches string Value.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
ControlGet, List \nControlGet, OutputVar, List, [Options, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Retrieves a list of items from a ListView|ListBox|ComboBox|DropDownList.\nOPTIONS: BLANK = All text. Lines are Linefeed separated. Fields are tab separated.\n    These options only apply to ListView. Space|Tab separated.\n    Selected = Get selected rows. BLANK = None.\n    Focused = Get focused row. BLANK = None.\n    ColN = Get Nth column instead of all.\n    Count = Get number of rows in control.\n    Count Selected = Get number of selected rows in control.\n    Count Focused = Get number of focused row. 0 if none.\n    Count Col = Get number of columns in control. -1 = Undetermined.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure and OutputVar is BLANK.\nEX: ControlGet, LVList, List,, LV1, ahk_exe MyProg.exe
ControlGet, Checked \nControlGet, OutputVar, Checked, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Check to see if a radio button|checkbox is checked.\nOUTPUTVAR: 1 = Checked. 0 = Not checked.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, radio2_2, Checked,, Radio22, ahk_exe MyProg.exe
ControlGet, Enabled \nControlGet, OutputVar, Enabled, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Check if a control is enabled.\nOUTPUTVAR: 1 = Enabled. 0 = Disabled.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, BtnStatus, Enabled,, Btn1, ahk_exe MyProg.exe
ControlGet, Visible \nControlGet, OutputVar, Visible , [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Check if a control is visible.\nOUTPUTVAR: 1 = Visible. 0 = Hidden.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, btnVisState, Visible,, Btn1, ahk_exe MyProg.exe
ControlGet, Tab \nControlGet, OutputVar, Tab, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the tab number of a control.\nOUTPUTVAR: 1 = Tab 1. 2 = Tab 2. Etc...\nREMARK: To get total tabs, see: SendMessage, 0x1304\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, thisTab, Tab,, Btn1, ahk_exe MyProg.exe
ControlGet, FindString \nControlGet, OutputVar, FindString, String [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get entry number of ListBox|ComboBox that matches String.\nOUTPUTVAR: Number of matching entry.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure and OutputVar is BLANK.\nEX: ControlGet, lbNum, FindString, AutoHotkey, LB1, ahk_exe MyProg.exe
ControlGet, Choice \nControlGet, OutputVar, Choice, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the name of the selected ListBox|ComboBox entry.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, cbActiveItem, Choice ,, CB1, ahk_exe MyProg.exe
ControlGet, LineCount \nControlGet, OutputVar, LineCount, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get number of lines in an Edit control.\nREMARK: An emtpy control still has 1 line.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, editLineNum, LineCount, , Edit2, ahk_exe MyProg.exe
ControlGet, CurrentLine \nControlGet, OutputVar, CurrentLine, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the line number of the caret in an Edit control.\nREMARK: If text is highlighted, line of highlight start is used.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, edit2Caret, CurrentLine, , Edit2, ahk_exe MyProg.exe
ControlGet, CurrentCol \nControlGet, OutputVar, CurrentCol, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the col number of the caret in an Edit control.\nREMARK: If text is highlighted, col of highlight start is used.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, edit2Caret, CurrentCol, , Edit2, ahk_exe MyProg.exe
ControlGet, Line \nControlGet, OutputVar, Line, N [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get Nth line of text from an Edit control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure|line not exist. OutputVar = BLANK.\nEX: ControlGet, editLineInfo, Line, 5, Edit2, ahk_exe MyProg.exe
ControlGet, Selected \nControlGet, OutputVar, Selected, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get selected text from an Edit control.\nREMARK: If no text is selected, ErrorLevel is 0 and OutputVar is BLANK.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure|no text selected.\nEX: ControlGet, editSelected, Selected, , Edit2, ahk_exe MyProg.exe
ControlGet, Style \nControlGet, OutputVar, Style, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the 8-digit hex number of the control's style.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nCHEAT: See Cheat_Styles\nEX: ControlGet, btnStyle, Style, , btn2, ahk_exe MyProg.exe
ControlGet, ExStyle \nControlGet, OutputVar, ExStyle, [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the 8-digit hex number of the control's extended style.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nCHEAT: See Cheat_Styles\nEX: ControlGet, btnExStyle, ExStyle, , btn2, ahk_exe MyProg.exe
ControlGet, Hwnd \nControlGet, OutputVar, Hwnd , [, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the handle (HWND) of the control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGet, gui2Btn2HWND, Hwnd, , btn2, ahk_exe MyProg.exe
ControlGetFocus, OutputVar [, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the identifier of the control that currently has focus. If any.\nERRORLEVEL+EXO: 0 = Focused control found. 1 = Failure.\nEX: ControlGetFocus, conFocusName, ahk_exe MyProg.exe
ControlGetPos, [outX, outY, outW, outH, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get the X|Y coordinates, height, and width of a control.\nOUT: Output varaibles for coords and size of control.\nREMARK: Output will be BLANK if no window or control is found.\nEX: ControlGetPos, x, y, w, h, btn1, ahk_exe MyProg.exe
ControlGetText, OutputVar, [Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Get text from a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlGetText, ddlTxt, DDL1, ahk_exe MyProg.exe
ControlMove, Control, X, Y, W, H, [WinTitle, WinText, ExcludeTitle, ExcludeText ] \nUSE: Moves or resizes a control.\nX|Y|W|H: Set the X|Y coords and the Height|Width of the control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlMove, Btn1, 10, 10, 50, 25, ahk_exe MyProg.exe
ControlSend, [Control, Keys, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Sends simulated keystrokes directly to a window or control.\nKEYS: Keys to send. Use same syntax as a Send field.\nREMARK: ahk_parent sends keys directly to the window instead of a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlSend,, SciTE, ahk_exe MyProg.exe
ControlSendRaw, [Control, Keys, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Sends simulated keystrokes directly to a window or control.\nKEYS: Keys to send. Text is sent as typed. Same as: Send, {Raw}\nREMARK: ahk_parent sends keys directly to the window instead of a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlSend, Edit1, Some Text, ahk_exe MyProg.exe\nALT: Consider using ControlSend with {Raw} in keys.
ControlSetText, [Control, NewText, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Update a control's text to NewText.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: ControlSetText, Edit1, SciTE, ahk_exe MyProg.exe
CoordMode, Type, [Area := Screen] \nUSE: Sets which corner x0 y0 starts at.\nTYPE: What each type affects:\n    Tooltip = Tooltip\n    Caret = A_CaretX|A_CaretY\n    Menu = Menu Show command\n    Pixel   = PixelGetColor|PixelSearch|ImageSearch\n    Mouse   = MouseGetPos|Click|MouseClick|MouseDrag|MouseMove\nAREA: \n    Screen = Entire screen/desktop.\n    Window = Whole window including OS Menu|Titlebar|Borders\n    Client = Program area. Does not include OS Menu|Titlebar|Borders\nEX: CoordMode, Mouse, Relative
Critical, [State] \nUSE: Prevents or enables interruptiong of the current thread.\nSTATE\n    ON: Thread is critical and cannot be interrupted.\n    OFF: Thread is not critical and can be interrupted.\n    N: Thread is critical. Check message queue every N milliseconds.
DetectHiddenText, On|Off \nUSE: Hidden text in a window can|cannot be seen by the script.\nON|OFF: 1 and 0 can be used.\nREMARK: Hidden text = Text from controls that are not visible.\n    Normally used with WinTitle based things.
DetectHiddenWindows, On|Off \nUSE: Hidden windows can|cannot be seen by the script.\nON|OFF: 1 and 0 can be used.
Drive  \nDrive, SubCommand, [DriveLetter, Value2] \nUSE: Optical drive commands.\nSUBCOMMANDS:\n    Eject = Ejects drive                Label = Rename drive label\n    Lock = Disables drive eject         Unlock = Enables drive eject\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
Drive, Label, DriveLetter, [NewLabel] \nUSE: Changes the Label of DriveLetter.\nDRIVELETTER: Drive's letter followed by a colon.\nNEWLABEL: If BLANK, drive will have no label.\nREMARK: To get current label, use: DriveGet, OutputVar, Label, DriveLetter\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: Drive, Label, C:, GroggyDrive
Drive, Lock, DriveLetter \nUSE: Disable a drive's ability to eject.\nDRIVELETTER: Drive's letter followed by a colon.\nREMARK: Has no effect on drives that do not support locking\nERRORLEVEL+EXO: 0 = Success. 1 = Failure|Drive not Exist|Drive not lockable
Drive, Unlock, DriveLetter \nUSE: Enable a drive's ability to eject.\nDRIVELETTER: Drive's letter followed by a colon.\nREMARK: Has no effect on drives that do not support locking\n    Some drives may need multiple unlocks if multiple locks were issued.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
Drive, Eject, [DriveLetter, Open] \nUSE: Eject|retracts the tray of an optical drive.\nDRIVELETTER: Drive's letter followed by a colon. If omitted, use default drive.\nOPEN: 1 = Retract drive. BLANK = Eject drive.\nREMARK: Ejecting other media has to be done through DllCalls. See docs.
DriveGet\nDriveGet, OutputVar, SubCommand, [Value]\nUSE: Retrieves various types of information about the computer's drive(s).\nSUBCOMMANDS:\n    Status = Get path's status          List = Get string of drive letters\n    Type = Get path's drive type        Capacity = Get path's capacity in MB\n    Label = Get drive's volume label    StatusCD = Get optical drive status\n    FileSystem = Get file system type of drive\n    Serial = Get drive's volume serial number\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
DriveGet, OutputVar, List, [Type] \nUSE: Returns a string of system drive letters.\nTYPE: If omitted, all drives are retrieved. Otherwise:\n    CDROM|REMOVABLE|FIXED|NETWORK|RAMDISK|UNKNOWN\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveLetters, List, [Type] ; V=> CDEFXYZ
DriveGet, OutputVar, Cap|Capacity, Path\nUSE: Get the total capacity of Path in megabytes.\nPATH: Drive path.\nREMARK: If you need to get free space, use: DriveSpaceFree\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveCap, Cap, C:\ ; V=> 228740
DriveGet, OutputVar, FS|FileSystem, Drive\nUSE: Get the type of file system used by Drive.\nDRIVE: Drive letter or UNC\n    C:      Z:\     \\Server1\Share\nOUTPUTVAR: File system types: FAT|FAT32|NTFS|CDFS|UDF\nERRORLEVEL+EXO: 0 = Success. 1 = Failure. BLANK = Drive has no formatted media.\nEX: DriveGet, driveFsType, FS, C: ; V=> NTFS
DriveGet, OutputVar, Label, Drive\nUSE: Get volume label of Drive.\nDRIVE: Drive letter or UNC\n    C:      Z:\     \\Server1\Share\nREMARK: To change the drive's label, see: Drive, Label\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveLabel, Label, c:\ ; V=> GroggyDrive
DriveGet, OutputVar, Serial, Drive\nUSE: Get the volume serial number for Drive.\nOUTPUTVAR: Output is a decimal integer.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveSerial, Serial, Drive ; V=> 2151283365
DriveGet, OutputVar, Type, Path\nUSE: Get the drive type of Path.\nOUTPUTVAR: Removable|Fixed|Network|CDROM|RAMDisk|Unknown\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveType, Type, C:\ ; V=> Fixed
DriveGet, OutputVar, Status, Path \nUSE: Retrieves Path's status.\nOUTPUTVAR: Status types: Unknown(Possibly RAW)|Ready|NotReady|Invalid\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, driveStatus, Status, C: ; V=> Ready
DriveGet, OutputVar, StatusCD, [DriveLetter] \nUSE: Get the status of an optical drive.\nOUTPUTVAR: Not Ready|Open|Playing|Paused|Seeking|Stopped\n    BLANK = Status undeterminable\nDRIVELETTER: Drive's letter followed by a colon. If omitted, use default drive.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: DriveGet, dvdStatus, StatusCD, E: ; V=> Stopped
DriveSpaceFree, OutputVar, Path \nUSE: Get Drive's free disk space in megabytes.\nEX: DriveSpaceFree, freeSpace, C: ; V=> 147455
Edit \nUSE: Open current script in the associated editor.\nREMARK: Edit association is a registry setting.\n    See: HKCR\AutoHotkeyScript\Shell\Edit\Command
EnvAdd, Var, Value, [TimeUnit] \nUSE: Add Value to Var. Store results in Var.\nVAR: If Var is BLANK, A_Now is used.\n    Var = BLANK: Invalid timestamp. Year is before 1601. Value not a number.\nTIMEUNIT: Treats value as a time unit: S|Seconds  M|Minutes  H|Hours  D|Days\n    When present, var is treated as a YYYYMMDDHH24MISS timestamp\nREMARK: To subtract a number, use a negative Value. \n    Synonymous with: Var += Value\nEX: var := A_Now       ; Set var to time right now and add 50 days\n    EnvAdd, Var, 50, D ; V=> 20181007022250
EnvDiv, Var, Value \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACMENET: Use a regular expression: Var := Var / Value, Var2 /= Value
EnvGet, OutputVar, EnvName \n    USE: Get an environment variable.\nENVNAME: Name of environmental variable.\nEX: EnvGet, OutputVar, ProgramW6432 ; Gets the x64 program files directory
EnvMult, Var, Value \nDEPRECATED: This command is not recommended for use in new scripts. \nREPLACMENET: Use a regular expression: Var := Var * Value, Var2 *= Value
EnvSet, EnvVar, Value \nUSE: Writes a value to a variable contained in the environment.\nREMARK: Windows limits environment variables to 32 KB of text.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
EnvSub, Var, Value, [TimeUnit] \nUSE: Subtract Value from Var. Stores result in Var.\nTIMEUNIT: When present, Var & Value are both treated as YYYYMMDDHH24MISS timestamps\n    If either are blank, A_Now is used.\nREMARK: If Var returns BLANK, it's becaues:\n    Invalid timestamp.  Year is before 1601.  Value not a number.\nEX: utc := A_NowUTC, loc := A_Now ; Set local and UTC times\n    EnvSub, loc, % utc, H         ; Get the difference between the two
EnvUpdate \nUSE: Notify OS and all running apps an environment variable has changed.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
ExitApp, [ExitCode] \nUSE: Shuts down a script.\nEXITCODE: Number. -2147483648 ... 2147483647\nREMARK: Immediately terminates script. Runs OnExit functions if present.
FileAppend, [Text, Filename, Encoding] \nUSE: Writes text to the end of a file. Creates file if one doesn't exist.\nFILENAME: Name of the file to write to.\n    Prefix outputfile with an * to us use LF instead of CR+LF.\n    Using * for Filename sends text to StdOut.\nENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nREMARK: For continuous writing, consider FileOpen()\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileAppend, % "Hello World!", C:\Text.txt, UTF-16
FileCopy, Source, Destination, [Overwrite:=0] \nUSE: Copy one or more files to Destination.\nSOURCE: The path of a file or folder. Wildcards are allowed.\nDESTINATION: The path of a file or folder to copy to.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nREMARK: This is for files only. For whole directors, see: FileCopyDir\nERRORLEVEL+EXO: 0 = Success. 1+ = Number of files that failed to copy.\nEX: FileCopy, D:\Scripts\*.ahk, E:\Backup, 1 ; Backup all AHK scripts
FileCopyDir, Source, Destination, [Overwrite] \nUSE: Copy folder, and optionally subfolders, to Destination.\nSOURCE: Path to source directory. No trailing backslash.\nDESTINATION: Path to destination directory. No trailing backslash.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nREMARK: If the folder structure doesn't exist, it will be created.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileCopyDir, D:\Scripts, E:\Backup, 1 ; Backup Scripts folder
FileCreateDir, DirName \nUSE: Creates a directory/folder .\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileCreateDir, C:\TestFolder
FileCreateShortcut, Target, Link, [Dir, Args, Desc, Icon, Shortcut, IconNum, State] \nUSE: Creates a shortcut (.lnk) file to Target with.\nTARGET: File to make shortcut for       LINK: Path and name of shortcut\nDIR: Provide an working directory       ARGS: Space separated args for Target\nDESC: Shotcut description               SHORTCUT: Single letter hotkey\nICON: Path to shortcut's icon           ICONNUM: Icon number if icon file\nSTATE: 1 = Normal  3 = Maximized  7 = Minimzed\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileCreateShortcut, C:\Windows\Explorer, % A_Desktop "\Explorer.lnk"
FileDelete, FilePattern \nUSE: Deletes one or more files.\nFILEPATTERN: Path to a file. Wildcards allowed.\nERRORLEVEL+EXO: 0 = Success. 1+ = Number of files failed to be deleted.\nEX: FileDelete, % A_Desktop "\TestFile.txt"
FileEncoding, [Encoding] \nUSE: Sets default encoding for the following:\n    FileRead    FileReadLine    Loop-Read    FileAppend    FileOpen\nENCODING: UTF-8    UTF-8-RAW    UTF-16    UTF-16-RAW    CPnnn\nEX: FileEncoding, UTF-8
FileGetAttrib, OutputVar, [Filename] \nUSE: Get attributes of a file.\nOUTPUTVAR: String of: D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory    O = Offline       N = Normal\n    T = Temporary    C = Compressed    R = ReadOnly\n    A = Archive      S = System        H = Hidden\n    X = No Attr      BLANK = No file found\nFILENAME: Path and file to get attributes from.\nREMARK: Remember: DONT CRASH X\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileGetAttrib, fileAttribs, % A_ScriptFullPath ; Get current scripts attributes
FileGetShortcut, Link, [OutTarget, OutDir, OutArgs, OutDesc, OutIcon, OutIconNum, OutState] \nUSE: Retrieves information about a shortcut (.lnk) file.\nLINK: Path to the shortcut\nOUT: Variables to store all the data from the shortcut\n    OutTarget = Target's path           OutArgs = Shortcut's arguments\n    OutDesc = Shotcut's description     OutDir = Target working directory\n    OutIcon = Path to shortcut's icon   OutIconNum = Shotcut's \n    OutState = 1 = Normal  3 = Maximized  7 = Minimzed\nREMARK: Any Out variable can be omitted.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure and all Out files = BLANK.\nEX: FileGetShortcut, C:\test.lnk, outTar, outDir, , , OutIcon
FileGetSize, OutputVar, [Filename, Units] \nUSE: Get the size of a file. \nUNITS: BLANK = Bytes. K = Kilobytes. M = Megabytes.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileGetSize, scriptSize, % A_ScriptFullPath, K ; V=> 2
FileGetTime, OutputVar, [Filename, TimeType:=M] \nUSE: Get the datetime stamp of a file or folder in YYYYMMDDHH24MISS format.\nTIMETYPE: Type of timestamp to retrieve:\n    M = Modification time    C = Creation time    A = Last access time\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileGetTime, fileModTime, C:\Test.txt, M ; Get modification time of test.txt
FileGetVersion, OutputVar, [Filename] \nUSE: Retrieves the version of a file.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nREMARK: If file has no version, OutputVar is BLANK.\nEX: FileGetVersion, fileVer, C:\Windows\Explorer.exe ; V=> 6.1.7601.23537
FileInstall, Source, Dest, [Overwrite:=0] \nUSE: Includes files inside of a compiled exe.\nSOURCE: Path to the file to include.\n    Path must not contain double quotes, variable references, or wildcards.\nDEST: Destination to put source on file extraction\n    Unlike source, this path can use varaible references.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nREMARK: Uncompiled files perform a simple copy. This makes testing much easier.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileInstall, icon.ico, % A_AppData "\MyProgFiles\", 1
FileMove, Source, Dest, [Overwrite] \nUSE: Move or rename file(s).\nSOURCE: The path to a file. Wildcards allowed.\nDEST: path to destination.\nOVERWRITE: 1 = Overwrite. 0 = Do not overwrite.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileMove, C:\Test.txt, C:\Test.ahk, 1 ; Rename test.txt to test.ahk
FileMoveDir, Source, Dest, [Flag:=0] \nUSE: Move|rename a folder and it's sub-folders and files.\nSOURCE: Name of the source directory. No trailing spaces.\nDEST: New path and name of directory. No trailing spaces.\nFLAG: One of the following single characters:\n    0 = Do not overwrite existing files.\n    1 = Overwrite existing files.\n    2 = Same as 1 except prevents a known limitation. See the docs.\n    R = Rename directory instead of moving it. \nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileMoveDir, D:\Scripts, D:\Backup, 1 ; Backup scripts dir
FileRead, OutputVar, Filename \nUSE: Reads a file's contents into a variable.\nFILENAME: Name of file that can include the following prefixed options:\n    *c: Load binary data like ClipboardAll\n    *mN: Max file size in N bytes\n    *t: Replaces CR+LF with LF. \n    *Pnnn: Set FileEncoding identifier where nnn = numeric code page identifier.\nREMARK: If file greater than 1 GB, ErrorLevel = 1 and OutputVar = BLANK\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileRead, txtVar, C:\Test.txt
FileReadLine, OutputVar, Filename, LineNum \nUSE: Read a line of text from a file into a variable.\nREMARK: Used for small files. For large files, see: FileRead() or Loop-Files\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileReadLine, txtVar, C:\Test.txt, 2
FileRecycle, FilePattern \nUSE: Sends a file or directory to the recycle bin, if possible.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileRecycle, C:\Test.txt
FileRecycleEmpty, [DriveLetter] \nUSE: Empties the recycle bin of all files.\nDRIVELETTER: If specified, only recycles files from that drive letter.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileRecycleEmpty, C:
FileRemoveDir, DirName, [Recurse:=0] \nUSE: Deletes a folder.\nRECURSE: Choose to recursively remove files/folders from subdirectories\n    0 = Remove directory if no files or subdirectories exist.\n    1 = Recursively removes all files and directories, too.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileRemoveDir, D:\TestFolder, 1
FileSelectFile, OutputVar, [Options:=0, Path, Prompt, Filter] \nUSE: Displays an interface for the user to select a file|files.\nOPTIONS: Choose one: S = Changes Open to Save    M = Select multiple files  \n    Include these with S, M, or by themselves. Add desired values together.\n        +1 =  File Must Exist           +2 =  Path Must Exist\n        +8 =  Create New File Prompt   +16 =  Prompt to Overwrite File\n       +32 =  Shortcuts use their own path and don't resolve to their targets.\nPATH: A directory, filename, or CLSID dialog starts at.\nPROMPT: Dialog window's title.\nFILTER: Filter file extensions. Format: Title(*.ext1; *.ext2; *.ext3; ...)\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nCHEAT: Cheat_CLSID_List\nEX: FileSelectFile, OutputVar, S27, D:\Scripts,, Text (*.txt; *.ahk)
FileSelectFolder, OutputVar, [Path, Options:=1, Prompt] \nUSE: Displays an interface for the user to select a folder from Path.\nPATH: A directory or CLSID to start at. An * can be prefixed to the path.\n    * indicates user can navigate upward toward root.\n    Without this, the user must choos Path or a directory in Path/\nOPTIONS: Add desired options together.\n     0 = All options diabled             +1 = Allowed to create new folder\n    +2 = Enable edit bar for user to type/paste folder path \n    +4 = Omit the BIF_NEWDIALOGSTYLE property.\nPROMPT: Dialog prompt.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nCHEAT: Cheat_CLSID_List\nEX: FileSelectFolder, folderPath, c:\, 3, Pick a folder
FileSetAttrib, Attributes, [Path, Operate:=0, Recurse] \nUSE: Set attributes of one or more files|folders.\nATTRIBUTES: String of Operators and Attributes.\\n    +Add    -Remove    ^Toggle    D|O|N|T|C|R|A|S|H|X|BLANK\n    D = Directory    O = Offline       N = Normal\n    T = Temporary    C = Compressed    R = ReadOnly\n    A = Archive      S = System        H = Hidden\n    X = No Attr      BLANK = No file found\nPATH: Path to a file or folder. Wildcards are allowed.\nOPERATE: 0 = Only files    1 = Files and folders that match    2 = Only folders \nRECURSE: 0 = No recursion    1 = Recurse into subdirectories\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileSetAttrib, +RC-O, [Path, Operate:=0, Recurse] 
FileSetTime, [DTS, Path, TimeType, Operate, Recurse] \nUSE: Change the datetime stamp of one or more files|folders.\nPATH: Path to a file or folder. Wildcards are allowed.\nDTS: Date-timestamp. Use format: YYYYMMDDHH24MISS\nTIMETYPE: Timestamp type to alter:\n    M = Modification time    C = Creation time    A = Last access time\nOPERATE: 0 = Only files    1 = Files and folders that match    2 = Only folders \nRECURSE: 0 = No recursion    1 = Recurse into subdirectories\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: FileSetTime, 20181007045200, C:\Test.txt, C, 1, 0
FormatTime, OutputVar, [DTS := A_Now, Format := BLANK] \nUSE: Transform a YYYYMMDDHH24MISS date-timestamp into a custom Format.\nFORMAT: A string of characters, spacing, and any punctuation you want.\n    Year:   y = 0-99    yy = 00-99    yyyy = 2018       gg = B.C. A.D. etc.\n    Month:  M = 1-12    MM = 01-12    MMM  = Jan-Dec    MMMM = January-December\n    Day:    d = 1-31    dd = 01-31    ddd  = Sun-Sat    dddd = Sunday-Saturday\n    Hour:   H = 0-24    HH = 00-24    h    = 1-12       hh = 01-12\n    Minute: m = 0-59    mm = 00-59\n    Second: s = 0-59    ss = 00-59\n    Period: t = A-P     tt = AM-PM\n    STANDALONE: Alternately, use a preset. Uses locale (Window's format)\n    Time  = Hour:Minute [Period]        LongDate  = dddd, MMMM Day, yyyy\n    BLANK = Time LongDate               ShortDate = Month/Day/Year\n    YearMonth = MMMM, yyyy              \n    YDay  = Day of year. 1-366          YDay0     = Day of year. 001-366\n    YWeek = Year and week number        WDay  = Day of week. 1-7. 1=Sunday\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nCHEAT: There are too many options to list. See: Cheat_FormatTime\nEX: FormatTime, timeF, % A_Now, HH:mm dddd, MMMM dd, yyyy ; Same as BLANK format
GetKeyState, OutputVar, KeyName [, Mode] \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: This is now a function instead of a command. Use: GetKeyState()
GroupActivate, GroupName, [Mode] \nUSE: Activates the next window in a window group.\nGROUPNAME: A defined list of windows. See: GroupAdd\nMODE: R = Activate last active window.   BLANK = Activate oldest window.\nEX: GroupActivate, exeGroup, R
GroupAdd, GroupName, [WinTitle, WinText, Label, ExcludeTitle, ExcludeText] \nUSE: Adds a window to GroupName. Window groups are used by other commands.\nLABEL: A label to run if no window is matched.\nEX: GroupAdd, browserGroup, ahk_exe chrome.exe,, NoMatchSub
GroupClose, GroupName, [Mode]\nUSE: Closes next|all windows. Behavior based on mode.\nMODE: \n    BLANK = Close active window. Activate oldest window in group.\n    A = All exisiting group members are closed.\n    R = Depends if GroupDeactivate or GroupActivate was last used\n        If GroupDeactivate = Close active window if it is not a group member \n        If GroupActivate = Close active window if it is a group member \nEX: GroupClose, winGroup, A
GroupDeactivate, GroupName, [Mode]\nUSE: Activates next window in the stack if it does not belong to GroupName.\nMODE: R = Activate next non-member window.\n    BLANK = Activate oldest non-member window.\nEX: GroupDeactivate, GroupName, R
Gui  \nGui, SubCommand, [Value1, Value2, Value3] \nUSE: Used to create, destroy, format, and manipulate Graphical User Interfaces.\nSUBCOMMANDS:\n    New = New GUI                   Destroy = Deletes GUI\n    Show = Make GUI visible         Cancel|Hide = Make GUI Hidden\n    Add = Add a control to GUI      Submit = Save all control data to varaibles\n    Margin = Default padding size   Color = Sets background|control color\n    Menu = Add|remove menu bar      Flash = Blink window|taskbar button\n    Minimize|Maximize|Restore = GUI resizing options\n    Default = Set default GUI name for current thread\n    Font = Sets default font|color|size|style for future controls\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
Gui, New, [Options, Title]\nGui, GuiName:New, [Options, Title]\nUSE: Create a new GUI and sets new GUI to thread default.\nEX: Gui, MyGUI:New, HWNDguiH\nOPTIONS: Use +|- to Add|Remove any of these options.\n    AlwaysOnTop = Window always on top      Border = Thin-line border\n    Delimiter = Set GUI control delimeter   Disabled = Disable window\n    DPIScale = Scale GUI with DPI           HWNDvar = Store GUI HWND to var\n    Label = Change GUI Label prefix         LastFound = Set GUI to LastFound        \n    MaximizeBox = Maximize button           MinimizeBox = Minimze button\n    MaxSize = Maximum window size           MinSize = Minimum window size\n    Owner = Set windows owner               OwnDialogs = Own popup dialogs\n    Parent = Set parent of this window      Resize = Set resizability\n    Style = Window Style                    ExStyle = Window Extended Style\n    SysMenu = System menu & buttons         Theme = Sets normal|classic theme\n    LastFoundExist = Set GUI to LastFound only if GUI exists\n    ToolWindow = Narrower title bar & no taskbar button\nREMARK: Destroys any GUI using the specified name.\nCHEAT: See: Cheat_GUI_Options and Cheat_Styles\nEX: Gui, MyGUI:New, +Resize -Border -SysMenu, Clever GUI Title
Gui, Add, ControlType, [Options, Text]\nUSE: Adds a control to a GUI window.\nREMARK: If no GUI exists, one is created.\nCONTROLTYPE:\n    ActiveX     DropDownList    ListView    StatusBar\n    Button      Edit            MonthCal    Tab\n    Checkbox    GroupBox        Picture     Text\n    ComboBox    Hotkey          Progress    TreeView\n    Custom      Link            Radio       UpDown\n    DateTime    ListBox         Slider
Gui, Add, Text, [Options, Value] \nUSE: A control that displays Value's text.\nOPTIONS: No unique options. See Cheat_GUI_Options for general options.\nEX: Gui, MyGui:Add, Text, x100 y100 w50 h20, Hello World
Gui, Add, Edit, [Options, Text] \nUSE: A control that can accept text input from the user.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Number = Numbers only          -Wrap = Disable word wrapping\n    ReadOnly = Fixed text          -WantCtrlA = Disable SelectAll\n    Lowercase = force lowercase    Uppercase = FORCE UPPERCASE\n    LimitN = Limit to N chars      Limit = Limit input to control width\n    tN =  Tabstop in N chars       -WantTab = Tab navigate\n    Password = Mask user input     Password* = Change mask. * is any char\n    Multi = Multiple lines         -WantReturn = Disable linefeed from enter\nTEXT: Default text to appear inside edit box.\nEX: Gui, MyGui:Add, Edit, w100 h20 Number Limit, Default text here.
Gui, Add, UpDown, [Options, Start] \nUSE: Attach up|down arrows to a control that increase|decrease a value.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Horz = UpDown become LeftRight      Left = Move UpDown left of control\n    Range = Set range N1 to N2          Wrap = Wraps range min and max\n    -16 = Prevent control attach        0x80 = Omit thousands separator\nSTART: Starting value. Overrides attached controls value.\nEX: Gui, MyGui:Add, Edit,, 1\n    Gui, MyGui:Add, UpDown, vGuiEditUD gUDSub Range1-100 Wrap, 5
Gui, Add, Picture, [Options, ImagePath] \nUSE: Imports a supported image to the GUI.\nOPTIONS: No unique options. See Cheat_GUI_Options for general options.\nEX: Gui, Add, Picture, x10 y10 w500 vGuiPic, C:\Images\GuiPic.png
Gui, Add, Button, [Options, Text] \nUSE: Creates a clickable, basic button.\nOPTIONS: No unique options. See Cheat_GUI_Options for general options.\nTEXT: Text that appears on the button.\nEX: Gui, Add, Button, x5 y90 w50 h20 vGuiBtn gSubmit, Submit
Gui, Add, Checkbox, [Options, Text] \nUSE: A box that can be set to check, unchecked, or filled.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Check3 = Enables a 3rd checkstate\n    Checked|CheckedGray = Start in 3rd check state\n    Right|Left = Side to put checkbox on\nTEXT: Value that appears next to checkbox.\nEX: Gui, Add, Checkbox, x5 y5 vGuiCheck gCBUpdate Check3 Right, Enable
Gui, Add, Radio, [Options, Text] \nUSE: A checkable element groups. Only 1 radio button can be active per group.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Group =  Specifies a new radio group\nTEXT: Value that appears next to checkbox.\nEX: Gui, Add, Radio, x20 y5 w40 h20 vGuiR1 Group, Yes\n    Gui, Add, Radio, x70 y5 w40 h20 vGuiR2, No
Gui, Add, DropDownList, [Options, List] \nUSE: An element that expands to reveal a list. Only 1 item can be selected.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Lowercase = force lowercase\n    Uppercase = FORCE UPPERCASE\n    ChooseN = Item N starts selected\n    Sort = Auotmatically sorts list alphabetically. Also allows type-to-select\nLIST: A pipe separated list of items. Set default item with 2 pipes after it.\nEX: Gui, Add, DropDownList, x5 y5 w50 Sort, Bin|Oct|Dec||Hex|
Gui, Add, ComboBox, [Options, List] \nUSE: Same as a drop down list except it also has an editable field.\nOPTIONS: See Cheat_GUI_Options for general options.\n    Limit = Limit input to viewable area\n    Simple = Combo box's drop down list is replaced with a ListBox\nLIST: A pipe separated list of items. An item with 2 pipes = Default selection\nEX: Gui, Add, ComboBox, x5 y5 w100 vGuiCB Simple Limit, Add|Sub||Mult|Div|
Gui, Add, ListBox, [Options, List] \nUSE: Displays a list of items where 1 or more items can be selected.\nOPTIONS: See Cheat_GUI_Options for general options.\n    ChooseN = Item N starts selected\n    Multi = Multiple selections\n    ReadOnly = Non-interactive\n    Sort = Auotmatically sorts list alphabetically\n    0x100 = Prevents row cutoff\nLIST: A pipe separated list of items. An item with 2 pipes = Default selection\nEX: Gui, Add, ListBox, x5 y5 w50 r5 vGuiLB1 Multi, Red||Green|Blue||Alpha
Gui, Add, ListView, [Options[ViewMode], List] \nUSE: An element that can list multiple rows and columns of data.\nOPTIONS: See Cheat_GUI_Options for general options.\n    R = Rows on creation              C = Text color. Use Hex|Name\n    -Hdr = Omit header                NoSortHdr = Header becomes a field\n    -Multi = Max select 1 row         LV0x10 = Disable rearranging columns\n    Grid = Row|col lines              AltSubmit = Gets more ListView events\n    Sort = Auto sort by first col     LV0x20 = Click first col to select row\n    -WantF2 = Prevent F2 renaming     Checked = Add checkboxes to left of row\n    -ReadOnly = First col editable    NoSort = Disalbe sorting by header click\n    Count = Initial number of rows    SortDesc = Auto sort descending by first col\n    LV = Add or remove a ListView Extended Style\n    Background = Set background color. Use Hex|Name\nVIEWMODE: One view mode can be added to the options field\n    Report = Default view               Tile = Alt large icon view\n    Icon = Large icon view              IconSmall = Small icon view\n    List = Listed small icon view\nLIST: A pipe separated list of items. An item with 2 pipes = Default selection\nEX: Gui, MyGui:Add, ListView, x5 y5 r10 w400 vGuiLV Grid, Name|Weight(LB)|Height
Gui, Add, TreeView, [Options] \nUSE: An element that can show a parent/child hierarchy. Like Explorer's file view\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    R = Rows on creation            AltSubmit = Additional events\n    Checked = Enable checkbox       -WantF2 = Prevent F2 renaming\n    -Buttons = Disable +/- box      C = Text color. Use Hex|Name\n    -ReadOnly = Allow renaming      -Lines = Disable parent-child lines\n    ImageList = Add ImageListID     -HScroll = Remove horizontal scroll bar\n    Background = Set background color. Use Hex|Name\nGui, Add, TreeView, w200 r20 vGuiTV Background0x959595
Gui, Add, Link, [Options, Text[Tag]] \nUSE: Creates text that does something when clicked (hypertext).\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\nTEXT: Regular text that can contain HTML HREF tags.\nEX: Gui, Add, Link, x5 y5, Click <a href="https://autohotkey.com">here</a>
Gui, Add, Hotkey, [Options, Default] \nUSE: A control that detects and stores the keys a user presses.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    LimitN = Restrict hotkey types. N = Sum of options:\n        1 = Require a modifier key    16 = No Shift+Control keys \n        2 = No Shift-only keys        32 = No Shift+Alt keys \n        4 = No Control-only keys      64 = Do not use. Not supported\n        8 = No Alt-only keys          128 = No Shift+Control+Alt keys\nDEFAULT: Set a default hotkey. Accepts mod notation: !^+\nEX: Gui, MyGui:Add, Hotkey, x5 y5 w90 vGuiHK1, ^+A
Gui, Add, DateTime, [Options, Format] \nUSE: A single line input box that accepts dates or time. Has a calendar dropdown.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    Choose = Preselect a YYYYMMDDHH24MISS date\n    Range = Set min/max date to YYYYMMDD-YYYYMMDD\n    Right = Set calendar dropdown to right side\n    1 = Provide UpDown control    2 = Provide a no date/time checkbox\nFORMAT:\n    BLANK = Locale short date     LongDate = Use locale long date\n    Time = Time only              Custom = Custom date. See: FormatTime\nEX: Gui, Add, DateTime, x5 y5 Right 2 vGuiDTS, yyyyMMdd
Gui, Add, MonthCal, [Options, Default] \nUSE: An calendar element that allows single or range date selecting.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    rN = N rows of calendars       w-N = Columns of calendars. Negative number.\n    4 = Display week numbers       8 = Disable circling todays date\n    16 = Disable showing todays date\n    Multi = Allows date range selection    \n    Range = Set min/max date to YYYYMMDD-YYYYMMDD\nDEFAULT: Set the default start date in YYYYMMDDHH24MISS format.\nEX: Gui, Add, MonthCal, vGuiCal r2 w-2
Gui, Add, Slider, [Options, Start] \nUSE: A button on a track that can change a value by sliding it.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    Center = Blunt thumb                    ToolTip = Tooltip shows position\n    ThickN = N thumb thickness in pixels    Vertical = Slider is vertical\n    Left = Thumb points to opposite side    Invert = Switch min/max sides\n    NoTicks = No tickmarks                  PageN = Move N positions on PageUp|Dn\n    TickIntervalN = Set tickmark interval   LineN = Move N positions on arrow press\n    RangeN1-N2 = Set range from N1 to N2\n    Buddy1N|Buddy2N = Attach control N to left|right side of slider\nSTART: Starting position of slider. If omitted, defaults to number closest 0.\nEX: Gui, Add, Slider, Thick15 TickInterval25 Range0-200 vGuiSL, 100
Gui, Add, Progress, [Options, Start] \nUSE: A dual colored bar that can track forms of progress.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    cN = Bar color. N = Hex|ColorName\n    BackgroundN = BG color. N = Hex|ColorName\n    RangeN1-N2 = Set range from N1 to N2\n    -Smooth = Segmented bar\n    Vertical = Fill vertically\nSTART: Starting number. If omitted, defaults to number closest 0.\nEX: Gui, Add, Progress, vGuiPr c00FF00 -Smooth BackgroundBlack Range0-10, 5
Gui, Add, GroupBox, [Options, Text] \nUSE: An element used to visually group things. This is a visual element only.\nOPTIONS: \n    Wrap = Allow more than 1 line of text\nEX: Gui, Add, Button, x15 y35 w50 h20, OK\n    Gui, Add, GroupBox, x5 y5 w70 h60 Wrap, Group`nBox
Gui, Add, Tab3|Tab2|Tab, [Options, Text] \nUSE: Creats a page|tab. Each page can contain its own set of controls.\nTAB: TAB=Original tab    TAB2=Fixed some TAB issues    TAB3=Fixed Tab2 issues\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    ChooseN = Preselect a tab N\n    -Background = Use default color for tab\n    Buttons = Replace tabs with buttons\n    Left|Right|Bottom|Top = Tab location\n    -Wrap = Force single tab row\nEX: Gui, Add, Tab3, x5 y5 w200 h200 Choose2 vGuiTabs, Tab1|Tab2|Tab3
Gui, Add, StatusBar, [Options, Text] \nUSE: An element anchored to the bottom of the GUI for displaying info.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.\n    No unique commands but this element does utilize 3 built-in functions:\n    SB_SetText() = Set text in the status bar\n    SB_SetParts() = Split/unite parts of the status bar\n    SB_SetIcon() = Insert icons into the status bar\nREMARK: Can be split into multiple sections.\nEX: Gui, Add, StatusBar, vGuiSB, Status bar text
Gui, Add, ActiveX, [Options, Text] \nUSE: Allows the import of ActiveX controls. Like IE.\nOPTIONS: See Cheat_GUI_Options for a list of general GUI options.
Gui, Add, Custom, [ControlDefinedParams] \nUSE: Allows the import of other controls not provided by AHK.
Gui, Show, [Options, Title]\nUSE: Show, hide, position, and title a GUI.\nOPTIONS:\n    Wn = GUI widh in n pixels        Hn = GUI height in n pixels\n    Xn = Set GUI x coord             Yn = Set GUI y coord\n    xCenter = Center horizontally    yCenter = Center vertically\n    Center = Center on screen        Restore = Regular GUI size\n    Minimize = Minimize GUI          Maximize = Maximize GUI\n    Hide = Hide GUI                  AutoSize = Minimum size to fits all controls\n    NoActivate = Regular view. No activation.\n    NA = Show unminimized window. No activation.\nEX: Gui, MyGui:Show, x5 y5 w400 h200 Center, My New GUI
GuiClose: \nUSE: Launched when a GUI is closed.\nREMARK:If this label does not exist, closing the GUI will hide it.\n    Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: See function: GuiClose()
GuiEscape: \nUSE: Launched when the GUI detects Escape being pressed.\nREMARK: Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: GuiEscape()
GuiSize: \nUSE: Launched when the GUI window is resized.\nREMARK: Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: GuiSize()
GuiContextMenu: \nUSE: Launched whenever the user right-clicks inside the GUI.\nREMARK: Prefixing the GUI name to the label/function limits that code to that GUI.\nREPLACEMENT: GuiContextMenu()
GuiDropFiles: \nUSE: Launched whenever files/folders are dragged and dropped onto the GUI.\nREMARK: Prefixing the GUI name to the label/function limits that code to that Gui.\nREPLACEMENT: GuiDropFiles()
GuiControl  \nGuiControl, SubCommand, ControlID, [Value]\nUSE: Makes a variety of changes to a control in a GUI window.\nSUBCOMMANDS:\n    (Blank) = Put new content into control\n    Text = Change text|caption of control\n    Move = Move|resize control\n    MoveDraw = Same as move. Forces repaint\n    Focus = Set focus to control\n    Disable = Disable control use\n    Enable = Enable control use\n    Hide = Make control invisible\n    Show = make control visible\n    Delete = Not implemented yet.\n    Choose = Sets the selection in a ListBox|DropDownList|ComboBox|Tab control\n    ChooseString = Same as choose but selection to the defined string\n    Font = Chaneg control font, size, color, or style\n    Options = Add|remove options from a control\nREMARK: To operate on a specific GUI, prefix SubCommand with GUI's name.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.
GuiControl, , ControlID, [Value] \nUSE: Puts new contents into the control.\nVALUE: Each value varies depending on control type\n    Picture = Image path|handle to new picture\n    Text|Button|GroupBox|StatusBar|Link|Edit = New text\n    Hotkey = BLANK removes current hotkey\n    Checkbox|Radio = 0|1|-1 then uncheck|check|graycheck. Otherwise, new text.\n    DateTime|MonthCal = Set date. Use YYYYMMDDHH24MISS format.\n    UpDown|Slider|Progress = Set position\n    Tab|DropDownList|ComboList|ListBox = New delimited list\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.
GuiControl, Text, ControlID, [Value] \nUSE: Changes the text|caption of a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Text, guiBtn1, Close Button
GuiControl, Move, ControlID, Options \nUSE: Move|resize a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Move, guiBtn1, x50 y10 
GuiControl, MoveDraw, ControlID, [Options] \nUSE: Move|resize a control and repaint control area.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:MoveDraw, guiBtn1, x50 y10
GuiControl, Focus, ControlID \nUSE: Sets keyboard focus to the control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Focus, guiBtn1
GuiControl, Disable, ControlID \nUSE: Disable|gray out a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Disable, guiLoadBtn
GuiControl, Enable, ControlID \nUSE: Enable a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Enable, guiLoadBtn
GuiControl, Hide, ControlID \nUSE: Hides a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Hide, guiBtn1
GuiControl, Show, ControlID \nUSE: Shows a control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Show, guiBtn1
GuiControl, Choose, ControlID, N \nUSE: Set a ListBox|DropDownList|ComboBox|Tab control selection to Nth item.\nN: Number = select item. All = Select all items. 0 = Deselect current item\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:Choose, guiLB, All
GuiControl, ChooseString, ControlID, String \nUSE: Set a ListBox|DropDownList|ComboBox|Tab control selection to matching String.\nSTRING: Selection string to search for.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGui:ChooseString, guiTabs, Tab2
GuiControl, Font, ControlID \nUSE: Updates control the the current Font setting.\nREMARK: To set a font, use Gui, Font first then apply the font with this command.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: Gui, MyGUI:Font, s20 Bold, Courier\n    GuiControl, MyGUI:Font, gText
GuiControl, Options, ControlID, Value \nUSE: Add|remove various options and styles to a control.\nOPTIONS: +|- an option to add|remove it.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControl, MyGUI:+gFire +Center +c00FF00
GuiControlGet  \nGuiControlGet, OutputVar, [SubCommand, ControlID, Value] \nUSE: Get various information about a GUI control.\nSUBCOMMAND:\n    BLANK = Get control contents. Dependant on control type.\n    Pos = Get control size|position.\n    Focus = Get control identifier (ClassNN) for focused control.\n    FocusV = Get variable name of focused control.\n    Enabled = Get control enable state.\n    Visible = Get control visiblity state.\n    HWND = Get handle of control.\n    Name = Get variable name of control.
GuiControlGet, OutputVar, , [ControlID, Text] \nUSE: Get the contents of the control. Usually text but dependant on type.\nTYPE:\n    Picture = Get file name used at creation.\n    Edit = Get contents of edit box.\n    Hotkey = Get hotkey. BLANK if none.\n    Checkbox|Radio = Get check status. 1=Checked. 0=Unchecked. -1=Gray.\n    UpDown|Slider|Progress = Get current position.\n    Tab|DropDownList|ComboBox|ListBox = Get text of selected item.\n    StatusBar = Get text of first part.\n    ActiveX = Get new wrapper.\nTEXT: If this param is Text, it will always get the text/caption of a control.\nEX: GuiControlGet, guiCheckState, , guiCB2
GuiControlGet, OutputWHXY, Pos, [ControlID] \nUSE: Get the position|size of the control relative to client area.\nOUTPUT: Creates 4 varialbes for Width|Height|Xcoord|Ycoord\n    Output name is affixed with W|H|X|Y respectively.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, gEdit, Pos, guiEdit2\n    MsgBox, Width: %gEditW%`nHeight: %gEditH%`nX: %gEdit%`nY: %gEditY%
GuiControlGet, OutputVar, Focus \nUSE: Get control identifier (ClassNN) for currently focused control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, focusCI, Focus
GuiControlGet, OutputVar, FocusV \nUSE: Get variable name for currently focused control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, focusVar, FocusV
GuiControlGet, OutputVar, Enabled, [ControlID] \nUSE: Get enabled state of control. \nOUTPUTVAR: 0 = Disabled. 1 = Enabled.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conEn, Enabled, submitBtn
GuiControlGet, OutputVar, Visible, [ControlID] \nUSE: Get visibility state of control. \nOUTPUTVAR: 0 = Hidden. 1 = Visible.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conVis, Visible, submitBtn
GuiControlGet, OutputVar, Hwnd, [ControlID] \nUSE: Get handle of control.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conHWND, Hwnd, submitBtn
GuiControlGet, OutputVar, Name, [ControlID] \nUSE: Get name of control variable.\nOUTPUTVAR: BLANK if no name.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure or window|control not exist.\nEX: GuiControlGet, conVarName, Name, submitBtn
Hotkey  \nHotkey, [Modifier]KeyName, [Label, Options] \nUSE: Create, modify, enable, or disable a hotkey.\nMODIFIER: Hotkey modifiers and modifier symbols.\n    # = Win key     & = Combo keys      * = Fire \n    ! = Alt         < = Left mod key    ~ = Always send hotkey\n    ^ = Control     > = Right mod key   $ = Hook prevents key loops\n    + = Shift       <^>! = AltGr        UP = Key release\nKEYNAME: The key that will fire the hotkey.\nLABEL: A Label or FuncObject. It can alternately be one of these:\n    On = Enable hotkey      Toggle = Set hotkey to opposite of current\n    Off = Disable hotkey    AltTab = Allows for AltTab hotkeys. See docs.\nOPTIONS: \n    On = Enable hotkey              Off = Disable hotkey\n    iN = N level for input          tN = N number of threads\n    pN = Priority. N = 1...5        B|B0 = Buffer|Buffer disable\n    UseErrorLevel = Skip warning dialogs and set ErrorLevel. See docs.\nERRORLEVEL+EXO: Set if UseErrorLevel is used.\nEX: Hotkey, $+Backspace::Delete, On
Hotkey, If, % [FunctionObject|(Expression)] \nHotkey, IfWin[Not]Active|Exist, [WinTitle, WinText]\nUSE: Makes subsequent hotkeys context sensitive.\nREMARK: Leave optional areas blank to turn context sensitivity off.\nEX: Hotkey, IfWinNotExist, ahk_exe winamp.exe ; Applies IfWin check to next hotkey\n    Hotkey, *#x, LaunchWinamp, On ; Win+X launches winamp if it does not exist
ImageSearch, OutputX, OutputY, X1, Y1, X2, Y2, [Options]ImgFile \nUSE: Searches an area of screen for an image.\nX1|Y1: Coordinates of upper left search area.\nX2|Y2: Coordinates of lower right search area.\nIMGFILE: Path to image file.\nOPTIONS:\n    *IconN = Nth image file icon number\n    *N = Allowed color variation. 0 ... 255\n    *TransN = Trabsparent color. N = Hex|ColorName\n    *wn = Width in N pixels\n    *hn = Height in N pixels\nERRORLEVEL+EXO: 0 = Image found. 1 = Not found. 2 = Error.\nEX: ImageSearch, findX, findY, 0, 0, 300, 200, *32 C:\Icon.ico
IniDelete, Filename, Section, [Key] \nUSE: Delete a value from a standard format .ini file.\nKEY: Key name to delete. If omitted, entire section is delted.\nERRORLEVEL+EXO: 0 = Image found. 1 = Not found. 2 = Error.\nEX: IniDelete, C:\ahksettings.ini, SaveData, LastGuiPos
IniRead, OutputVar, Filename, [Section, Key, Default] \nUSE: Get a key value, a section, or a list of sections from a .ini file.\nOUTPUTVAR: Depends on parameters.\n    Only Filename = List of all sections\n    Filename and Section = List of all keys\n    Filename, section, and key = Key's value\nDEFAULT: Value to use if a key can't be found.\nEX: IniRead, keyVal, C:\test.ini, sec1, testKey1, Error. Not found.
IniWrite, Input, Filename, Section, [KeyName] \nUSE: Write a value or an entire section to a .ini file.\nINPUT: Value to store in Key if KeyName is present.\n    One or more Key=Value pairs if KeyName is omitted.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: IniWrite, % "key1=val1`nkey2=val2`nkey3=val3", C:\Test.ini, CustomSection
Input, [OutputVar, Options, EndKeys, MatchList] \nUSE: Captures user input.\nOUTPUTVAR: Stores visible characters.\n    Non-visible keys can be detected with EndKeys.\nOPTIONS: \n    V = Visible input text      * = Entire input is checked for match\n    C = Case sensitive          lN = Limit input to N chars\n    B = Ignore backspace        I = Ignore AHK generated input\n    tN = Time in N seconds      M = Capture modified keystrokes\n    e = Use char code instead of key code for singular end characters\nENDKEYS: List of keys that will end this input. Use Send key format. {Enter}\nMATCHLIST: Comma separated list of words. Input ends if a word is matched.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\n    0 = If no params, prior input was successfully terminated.\n    1 = If no params, no input is in progress.\n    NewInput = Input was interrupted by another Input.\n    Max = Input reached max length with no matches.\n    Timeout = Input timed out.\n    Match = Input matched an item in MatchList.\n    EndKey:Name = The Name endkey was pressed.\nEX: Input, SingleKey, I * V, {Enter}{Space}{Tab}, ball,dog,cat
InputBox, OutputVar, [Title, Prompt, HIDE, W, H, X, Y, Font, Timeout, Default] \nUSE: Display an input box to get user input.\nTITLE: Titlebar title.                  PROMPT: Notify user of expected input.\nHIDE: Use HIDE to mask user input.      FONT: Not implemented yet.\nDEFAULT: Default input field text.      TIMEOUT: Time in seconds before closing.\nW|H|X|Y: Width, height, x|y coords of input box.\nERRORLEVEL+EXO: 0 = OK pressed. 1 = Cancel pressed. 2 = Timeout. \nREMARK: OutputVar is always set to the edit field, even if cancelled.\nEX: InputBox, userName, Name, Enter your name:,, 300, 150,,,,, Name here
KeyHistory \nUSE: Opens a window that shows info, recent keystrokes, mouseclicks, etc.
KeyWait, KeyName, [Options] \nUSE: Wait for a key|mouse|joy button to be pressed|released.\nKEYNAME: Any key from the keylist.\nOPTIONS: List of options. Space separation optional.\n    D = Wait for key to be pressed down\n    L = Check logical state instead of physical\n    tN = Timeout in N seconds.\nERRORLEVEL+EXO: 0 = Success. 1 = Timeout.\nEX: KeyWait, LButton, D T1
ListHotkeys \nUSE: Displays information about script hotkeys.
ListLines \nUSE: Displays the script lines most recently executed.
ListVars \nUSE: Displays information about script variables. Names, contents, etc.
Menu  \nMenu, MenuName, SubCommand, [Value1, Value2, Value3, Value4] \nUSE: Create, delete, modify and show menus and tray icons. \nSUBCOMMANDS:\n    Show = Show menu                    Check = Add check left of item\n    Color = Set menu color              Uncheck = Remove check from item\n    Add = Add a menu|submenu            ToggleCheck = Check|Uncheck an item\n    Rename = Rename an item             Enable = Enable a disabled item\n    Icon = Set tray|menu icon           Disable = Disable an enabled item\n    Insert = Insert menu item           ToggleEnable = Disable|Enable item\n    NoIcon = Remove tray|menu icon      Default = Set default menu item\n    Tip = Set tray icon tooltip         NoDefault = Unset custom default\n    Delete = Delete menu item           DeleteAll = Delete all custom items\n    Standard = Insert standard menu items\n    NoStandard = Remove standard menu items\n    UseErrorLevel = Skep warning/error dialogs\n    Click = Set tray icon clicks to activate default menu\n    MainWindow = Enable main window access for compiled scripts\n    NoMainWindow = Prevent main window access for compiled scripts
Menu, MenuName, Add, [MenuItem, LabelSubmenu, Options] \nUSE: Add|update|convert a menu or submenu item.\nMENUITEM: The name or position of a menu item\nLABELSUBMENU: The name of a submenu, subroutine, function, or FuncObj.\nOPTIONS: Space or tab separated\n    +Right = Right align text       +Break = Item starts new column\n    pN = Set priority to N level    +BarBreak = +Break with a dividing line\n    +Radio = Use bullet instead of a check mark\nREMARK: To add a separator, omit all 3 parameters.
Menu, MenuName, Insert, [MenuItem, InsertItem, LabelSubmenu, Options] \nUSE: Insert a new item before the specified menu item.\nLABELSUBMENU: The name of a submenu, subroutine, function, or FuncObj.\nOPTIONS: Space or tab separated\n    +Right = Right align text       +Break = Item starts new column\n    pN = Set priority to N level    +BarBreak = +Break with a dividing line\n    +Radio = Use bullet instead of a check mark
Menu, MenuName, Delete, [MenuItem] \nUSE: Deletes the specified menu item from the menu.\nMENUITEM: Name or position of a menu item.\nMenuItemName is the name or position of a menu item (see MenuItemName for details).
Menu, MenuName, DeleteAll \nUSE: Deletes all custom menu items from the menu.
Menu, MenuName, Rename, MenuItem, [NewName] \nUSE: Rename specified menu item to NewName.\nMENUITEM: Name or position of a menu item.\nNEWNAME: If NewName is omitted, item becomes a line separator.
Menu, MenuName, Check, MenuItem \nMENUITEM: Name or position of a menu item.\nUSE: Add a visible checkmark next to the menu item.
Menu, MenuName, Uncheck, MenuItem \nUSE: Remove checkmark from specified menu item.\nMENUITEM: Name or position of a menu item.
Menu, MenuName, ToggleCheck, MenuItem \nUSE: Adds a checkmark to the specified menu item if there wasn't one; otherwise, removes it.\nMENUITEM: Name or position of a menu item.
Menu, MenuName, Enable, MenuItem \nUSE: Enabled a previously disabled menu item.\nMENUITEM: Name or position of a menu item.
Menu, MenuName, Disable, MenuItem \nUSE: Disable a previously enabled menu item.\nMENUITEM: Name or position of a menu item.
Menu, MenuName, ToggleEnable, MenuItem \nUSE: Enable|disable state to the opposite of current state.\nMENUITEM: Name or position of a menu item.
Menu, MenuName, Default, [MenuItem] \nUSE: Change default menu item to MenuItem.\nMENUITEM: Name or position of a menu item.
Menu, MenuName, NoDefault \nUSE: Change menu default back to original default. 
Menu, MenuName, Standard \nUSE: If not present, insert standard menu items.
Menu, MenuName, NoStandard \nUSE: Remove all standard menu items if present.
Menu, Tray, Icon, [FileName, IconNum, Freeze] \nUSE: Change script tray icon to one from FileName.\nICONNUM: Icon number if FileName has multiple icons.\nFREEZE: Set to 1 to freeze icon. 0 to unfreeze.\nEX: Menu, Tray, Icon, C:\TestIcon.ico,, 0
Menu, MenuName, Icon, MenuItem, FileName, [IconNum, IconWidth] \nUSE: Sets a icon for the specified menu item.\nMENUITEM: Name or position of a menu item.\nICONNUM: Icon number if FileName has multiple icons.
Menu, Tray, NoIcon \nUSE: Removes the tray icon if it exists.
Menu, MenuName, NoIcon, MenuItem \nUSE: Removes the icon from the specified menu item, if any.\nMENUITEM: Name or position of a menu item.
Menu, Tray, Tip, [Text] \nUSE: Changes the tray icon's tooltip.\nTEXT: Text to display. If omitted, uses default text.
Menu, MenuName, Show, [X, Y] \nUSE: Displays MenuName.\nX|Y: If X and Y are omitted, display at mouse location.
Menu, MenuName, Color, ColorValue, [Single] \nUSE: Changes the background color of the menu to Hex|ColorName.\nSINGLE: If this parameter isn't single, submenus will not be changed.
Menu, Tray, Click, ClickCount \nUSE: Set number of clicks to activate the default item of the tray menu.\nCLICKCOUNT: 1 for single click. 2 for double click.
Menu, Tray, MainWindow \nUSE: Allow a compiled script's main window to be shown via tray icon.
Menu, Tray, NoMainWindow \nUSE: Prevent a compiled script's main window from being shown via tray icon.
Menu, MenuName, UseErrorLevel, [Off] \nUSE: Skips warning dialogs and thread terminations on Menu error.\nERRORLEVLE: 1 = Problem. 0 = Success.
MouseClick, [Button, X, Y, Count, Speed, State, Relative] \nUSE: Clicks or holds down a mouse button\nBUTTON: Left|Right|Middle|X1|X2|WU|WD|WR|WL\nCOUNT: Number of clicks to send.\nSPEED: Mouse movement speed. 0 (Fast) ... 100 (Slow).\nSTATE: D = Down. U = Up. BLANK = Full click.\nRELATIVE: If R is present, click relative to current mouse position.\nREMARK: Click is generally more flexible and easier to use.\nEX: MouseClick, Left, 200, 100, 2, 3
MouseClickDrag, Button, X1, Y1, X2, Y2, [Speed, Relative] \nUSE: Cick, drag, and release a mouse button.\nBUTTON: Left|Right|Middle|X1|X2\nSPEED: Mouse movement speed. 0 (Fast) ... 100 (Slow).\nRELATIVE: If R is present, click relative to current mouse position.\nEX: MouseClickDrag, Left, 0, 0, 100, 100, 3
MouseGetPos, [OutputX, OutputY, OutputWin, OutputControl, Flag] \nUSE: Get current position, window name, and control name under mouse.\nFLAG: \n    BLANK|0 = Use default method\n    1 = Simple method\n    2 = Store HWND in OutputControl rather than ClassNN.\n    3 = Simple method with HWND to OutputControl\nEX: MouseGetPos, mouseX, mouseY, mouseWin
MouseMove, X, Y, [Speed, Relative] \nUSE: Moves the mouse cursor to XY coordinate\nSPEED: Mouse movement speed. 0 (Fast) ... 100 (Slow).\nRELATIVE: If R is present, click relative to current mouse position.\nEX: MouseMove, 100, 50, 1
MsgBox, [Options, Title, Text, Timeout] \nMsgBox, Text \nUSE: Premade popup GUI for displaying text and getting user responses.\nOPTIONS: A hex or dec number that sets various options of the message box.\n    See Cheat_MsgBox for options or use MagicBox.\nREMARK: MsgBox can use just the text field.\nEX: MsgBox, 0x14, Error, Click yes to retry and no to close.
OnExit, [Label] \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: OnExit()
OutputDebug, Text \nUSE: Sends a string to the debugger for display.\nREMARK: If the script's process has no debugger\n    If system debugger is not active\nEX: OutputDebug, %A_Now%: Error: File:%A_LineFile% Line:%A_LineNumber%
Pause, [State, Operate] \nUSE: Pauses the script's current thread.\nSTATE: \n    On = Turn pause on. \n    Off = Disable pause. \n    Toggle|BLANK = Set pause to opposite of current state.\nOPERATE:\n    0|BLANK = The command pauses the current thread.\n    1 = Pause the previous thread.\nEX: Pause, On
PixelGetColor, OutputVar, X, Y, [Mode] \nUSE: Get BGR pixel color of XY coordinate.\nMODE: Space separated.\n    RGB = Get color inr RGB format.\n    Alt = Altnerate, slower method to get color.\n    Slow = Slower method to get color that may work in some full-screen apps.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: PixelGetColor, col, 100, 200, RGB Alt
PixelSearch, OutputX, OutputY, X1, Y1, X2, Y2, Color, [Variation, Mode] \nUSE: Searches a region of the screen for a pixel of the specified color.\nX1|Y1: Starting point for search. \nX2|Y2: Ending point for search.\nCOLOR: BGR color ID.\nVARIATION: 0 ... 255. Allowed amount of color variation for a match.\nMODE: Space separated options\n    FAST = Faster searching method. Searche by row instead of by column.\n    RGB = Use RGB instead of BGR for color.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: PixelSearch, foundX, foundY, 0, 0, 90, 90, 0xccff00, 16, Fast RGB
PostMessage, Msg, [wParam, lParam, Control, WinTitle, WinText, NotTitle, NotText] \nUSE: Sends a message to a window or control.\nMSG: Message number to send. See: Cheat_Window_Messages\nWPARAM|LPARAM: Parameters to send.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: PostMessage, 0x50, 0, 0x4090409,, A
Process  \nProcess, SubCommand, [ID, Value] \nUSE: Get information about a process or take action based on a process.\nID: A program's PID or EXE name.\n    Exist = Check process is running.\n    Close = Force close first matching process.\n    List = Not yet implemented.\n    Priority = Set priority level of first matching process.\n    Wait = Wait for process to exist.\n    WaitClose = Wait for all matching processes to close.\nERRORLEVEL: 0 = Error, timeout, or problem. Otherwise, set to PID.
Process, Exist, [ID] \nUSE: Check whether the specified process is running.\nID: A program's PID or EXE name.\nERRORLEVEL: 0 = No matching process. Otherwise, set to matching process PID.\nEX: Process, Exist, AutoHotkey.exe ; R=> 532e3a
Process, Close, [ID] \nUSE: Force close the first matching process.\nID: A program's PID or EXE name.\nERRORLEVEL: 0 = No matching process or error. Otherwise, set to closed PID\nEX: Process, Close, AutoHotkey.exe
Process, Priority, [ID], Level \nUSE: Set priority level of the first matching process.\nID: A program's PID or EXE name. BLANK = Set script priority.\nLEVEL: Use whole word or first letter:\n    Low    BelowNormal    Normal    AboveNormal    High    Realtime\nERRORLEVEL: 0 = No matching process or error. Otherwise, set to PID.\nEX: Process, Priority, , A
Process, Wait, ID, [Seconds] \nUSE: Wait until the specified process is running.\nID: A program's PID or EXE name.\nSECONDS: Seconds to wait before timing out.\nERRORLEVEL: 0 = Error, timeout, or problem. Otherwise, set to PID.\nEX: Process, Wait, notepad.exe, 5
Process, WaitClose, ID, [Seconds] \nUSE: Wait for all matching processes to close.\nSECONDS: Seconds to wait before timing out.\nERRORLEVEL: 0 = Error, timeout, or problem. Otherwise, set to PID.\nEX: Process, WaitClose, chrome.exe, 5
Progress, Param1, [SubText, MainText, WinTitle, FontName] \nUSE: Create or update a progress bar window.\nPARAM1: Options = Create new bar\n    Show = Show if hidden       Off = Destroy window\n    BLANK = Update text         Number Only = Update progress bar\nOPTIONS:\n    xN = X coord        zhN = Bar height    fmN = Font size MainText   \n    yN = Y coord        zwN = Bar width     fsN = Font size SubText\n    zxN = Bar X coord   hN = N height       wmN = Font weight MainText\n    zyN = Bar Y coord   Wn = N width        wsN = Font weight SubText\n    cbN = Bar color     ctN = Text color    cwN = Window color\n    B = Borderless      B1 = Thin border    B2 = Dialog-style border\n    M = Moveable        M1 = +Resizeable    M2 = +MenuBtns   \n    T = Task Button     pN = starting pos   A = Disable always-on-top\n    rN1-N2 = Range N1 to N2                 Hide = Hide initially\n    cSM = Set S (SubText) or M (MainText) text align. 0 = Left. 1 = center.\nEX: Progress, p50 r1-100 c10 cwBlack ctFF8800 M T, SubText, MainText
Random, OutputVar, [Min|Seed, Max] \nUSE: Generates a pseudo-random number between Min and Max (inclusive).\nMIN: Minimum number.\nMAX: Maximum number.\nSEED: Reseeds random number generator. 0 ... 4294967295. Omit max field.\nEX: Random, rand, 1, 50
RegDelete, KeyName, [Value] \nUSE: Delete a subkey or value from the registry.\nKEYNAME: Registry key. Must start with a root key. Long or short allowed.\n    HKLM = HKEY_LOCAL_MACHINE    HKCU = HKEY_CURRENT_USER    HKU = HKEY_USERS\n    HKCR = HKEY_CLASSES_ROOT     HKCC = HKEY_CURRENT_CONFIG\nVALUE: Value name. Use ahk_default to delete key (default).\n    Omitting value will delete everything in KeyName.\nREMARK: Remote registry format: \\\\workstation01:HKLM\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: RegDelete, HKLM\\Software\\SomeApplication, TestValue
RegRead, OutputVar, KeyName, [ValueName] \nUSE: Reads a value from the registry.\nKEYNAME: Registry key. Must start with a root key. Long or short allowed.\n    HKLM = HKEY_LOCAL_MACHINE    HKCU = HKEY_CURRENT_USER    HKU = HKEY_USERS\n    HKCR = HKEY_CLASSES_ROOT     HKCC = HKEY_CURRENT_CONFIG\nREMARK: Remote registry format: \\\\workstation01:HKLM\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: RegRead, defKey, HKLM\SomeSoftware\Key, ahk_default
RegWrite, DataType, KeyName, [ValueName, Value] \nUSE: Writes a Value to the entry ValueName in the registry.\nDATATYPE: \n    REG_SZ = String         REG_DWORD = 32-bit num\n    REG_BINARY = Binary     REG_MULTI_SZ = Array of strings\n    REG_EXPAND_SZ = String using environment variables.\nKEYNAME: Registry key. Must start with a root key. Long or short allowed.\n    HKLM = HKEY_LOCAL_MACHINE    HKCU = HKEY_CURRENT_USER    HKU = HKEY_USERS\n    HKCR = HKEY_CLASSES_ROOT     HKCC = HKEY_CURRENT_CONFIG\nVALUENAME: Name of entry. If omitted, the (Default) key is used.\nREMARK: Remote registry format: \\\\workstation01:HKLM\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: RegWrite, REG_SZ, HKLM\SOFTWARE\Test, Name, Test Name
Reload \nUSE: Exit current script and start a new instance.
Run, Target, [WorkingDir, Options, PID] \nUSE: Run an external program.\nTARGET: Name and path of file to run.\nOPTIONS:\n    Max|Min|Hide = Start window Maximized|Minimzed|Hidden.\n    UseErrorLevel = On error, skip warning dialog. Set ErrorLevel to ERROR. \nPID: The PID of the running program. BLANK if undeterminable.\nERRORLEVEL+EXO: UseErrorLevel option. 0 = Success. ERROR = Failure.\nEX: Run, C:\Windows\notepad.exe, UseErrorLevel
RunAs, [UserName, Password, Domain] \nUSE: Specify user credentials for all subsequent Run and RunWait commands.\nREMARK: If all parameters are omitted, RunAs is disabled.\nEX: RunAs, Guest, Password123
RunWait, Target, [WorkingDir, Options, PID] \nUSE: Run an external program and wait until program finishes.\nTARGET: Name and path of file to run.\nOPTIONS:\n    Max|Min|Hide = Start window Maximized|Minimzed|Hidden.\n    UseErrorLevel = On error, skip warning dialog. Set ErrorLevel to ERROR. \nERRORLEVEL+EXO: ERROR = Failure. Number = Exit code of finished program.\nEX: RunWait, C:\Startup.bat,, Hide
Send, [Options]Keys \nUSE: Sends simulated keystrokes and mouse clicks to the active window.\nMODIFIER: !=Alt    +=Shift    ^=Control    #=Win    {Name}=Keyname\nOPTIONS: Must be first item in string.\n    BLANK = !+^#{} are special modifiers.\n    {Raw} = Send literal text.\n    {Text} = Send characters instead of keystrokes.\n    {Blind} = Modifier keys are used with send Keys.\nREMARK: Send type is determined by SendMode. Default is SendEvent.\nEX: Send, {Text}Normally, {Enter} will make a new line.
SendInput, [Options]Keys \nUSE: The faster, more reliable method of sending simulated keystrokes.\nMODIFIER: !=Alt    +=Shift    ^=Control    #=Win    {Name}=Keyname\nOPTIONS: Must be first item in string.\n    BLANK = !+^#{} are special modifiers.\n    {Raw} = Send literal text.\n    {Text} = Send characters instead of keystrokes.\n    {Blind} = Modifier keys are used with send Keys.\nEX: SendInput, {Text}Normally, {Enter} will make a new line.
SendEvent, [Options]Keys \nUSE: Slower method of sending simulated keystrokes. Adjustable key delays.\nMODIFIER: !=Alt    +=Shift    ^=Control    #=Win    {Name}=Keyname\nOPTIONS: Must be first item in string.\n    BLANK = !+^#{} are special modifiers.\n    {Raw} = Send literal text.\n    {Text} = Send characters instead of keystrokes.\n    {Blind} = Modifier keys are used with send Keys.\nEX: SendEvent, {Text}Normally, {Enter} will make a new line.
SendPlay, [Options]Keys \nUSE: Method of sending simulated keystrokes that works in more programs.\nMODIFIER: !=Alt    +=Shift    ^=Control    #=Win    {Name}=Keyname\nOPTIONS: Must be first item in string.\n    BLANK = !+^#{} are special modifiers.\n    {Raw} = Send literal text.\n    {Text} = Send characters instead of keystrokes.\n    {Blind} = Modifier keys are used with send Keys.\nEX: SendPlay, {Text}Normally, {Enter} will make a new line.
SendLevel, Level \nUSE: Set interruption level of hotkeys and hotstrings.\nLEVEL: 0 ... 100
SendMessage, Msg, [wParam, lParam, Control, WinTitle, WinText, NotTitle, NotText, Timeout] \nUSE: Sends a message to a window or control and waits for acknowledgement.\nMSG: Message number to send. See: Cheat_Window_Messages\nWPARAM|LPARAM: Parameters to send.\nTIMEOUT: Milliseconds to wait for message to be processed.\nERRORLEVEL+EXO: Fail = Problem or command timed out. Otherwise set to numeric message.\nEX: PostMessage, 0x50, 0, 0x4090409,, A
SendMode Mode\nUSE: Set send command to a a new default send method.\nREMARK: Initially set to SendEvent.\nMODE:\n    Event = Uses SendEvent\n    Input = Uses SendInput. Falls back on SendEvent.\n    InputThenPlay = Uses SendInput and falls back on SendPlay.\n    Play = Uses SendPlay
SetBatchLines, Setting\nUSE: Determines how often a script intiates a 10ms sleep.\nSETTING:\n    N = A number means wait for N amount of lines to execute before sleep.\n    Nms = A number followed by ms means wait N milliseconds before sleep.\nRemark = -1 
SetCapsLockState, [State] \nUSE: Turn CapsLock on or off. Can also set to always on|always off.\nSTATE: \n    On = Set CapsLock to on         AlwaysOn = Force CapsLock to stay on\n    Off = Set CapsLock to off       AlwaysOff = Force CapsLock to stay off
SetControlDelay, Delay \nUSE: Set delay after each control-modifying command.\nDELAY: Time in milliseconds. Default is 20.\n    -1 = No Delay\n    0  = Smallest possible delay
SetDefaultMouseSpeed, Speed \nUSE: Sets the mouse speed for commands that move the mouse.\nSPEED: 0 ... 100. Instant to slowest.
SetEnv, Var, Value \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use expression assignments: varStr := "String", varNum := 123
SetFormat, NumberType, Format \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use funtion: Format()
SetKeyDelay, [Delay, Duration, Play]\nUSE: Set the delay, in milliseconds, after each Send|ControlSend keystroke.\nDELAY: Time between each key send\n    -1 = No Delay\n    0  = Smallest possible delay\nDURATION: Time key is held down\n    -1 = No Delay\n    0  = Smallest possible delay\nPLAY: Use PLAY to apply these settings to SendPlay mode.
SetMouseDelay, Delay, [Play]\nUSE: Set the delay, in milliseconds, after each mouse movement or click.\nDELAY:\n    -1 = No Delay\n    0  = Smallest possible delay\nPLAY: Use PLAY to apply these settings to SendPlay mode.
SetNumLockState, [State] \nUSE: Turn NumLock on or off. Can also set to always on|always off.\nSTATE: \n    On = Set NumLock to on          AlwaysOn = Force NumLock to stay on\n    Off = Set NumLock to off        AlwaysOff = Force NumLock to stay off
SetRegView, RegView\nUSE: Set registry view to 32-bit or 64-bit.\nREGVIEW: 32 = 32-bit    64 = 64-bit     Default = Restore to original
SetScrollLockState, [State] \nUSE: Turn ScrollLock on or off. Can also set to always on|always off.\nSTATE: \n    On = Set ScrollLock to on       AlwaysOn = Force ScrollLock to stay on\n    Off = Set ScrollLock to off     AlwaysOff = Force ScrollLock to stay off
SetStoreCapsLockMode, State \nUSE: Sets the default behavior for how send controls capslock.\nONOFF:\n    On = CapsLock is restored to former value if Send altered it.\n    Off = CapsLock is never changed.
SetTimer, [Label, State, Priority] \nUSE: Set a timer to run a subroutine|function once or repeatedly.\nLABEL: Label, funciton, or FuncObj. \nSTATE:\n    On  = Reenables a disabled timer. Or starts a new timer at 250 ms.\n    Off = Disables a running timer.\n    Delete = Disables and deletes existing timer.\n    N = Timer loops repeatedly every N ms.\n    -N = Timer fires once in N ms.\nEX: SetTimer, UpdateCheck, % 5 * 60 * 1000 ;Run function every 5 minutes
SetTitleMatchMode, Setting \nUSE: Set the text matching behavior for titles in WinTitle.\nSETTING: Mode and speed must be set separately.\n    MODE:\n        1 = Title must start with.\n        2 = Title must contain.\n        3 = Title must exactly match.\n        RegEx = Title must match a RegEx pattern.\n    SPEED:\n        Fast = Fast but certain controls might not be detected.\n        Slow = Much slower but more thorough.
SetWinDelay, Delay \nUSE: Set the delay that occurs after commands that operate on windows.\nDELAY: Time in milliseconds. Default = 100\n    -1 = No delay\n    0  = Smallest possible delay
SetWorkingDir, Dir\nUSE: Changes the script's current working directory to Dir.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: SetWorkingDir, D:\Scripts
Shutdown \nUSE: Shut down, restart, or logoff system.\nCODE: The sum of any of the following:\n    0 = Logoff\n    1 = Shutdown\n    2 = Reboot\n    4 = Force\n    8 = Power down\nEX: Shutdown, 5 ; Forces a shutodwn
Sleep, Delay \nUSE: Wait a specified amount of time before continuing.\nDELAY: Time in milliseconds\n    Min = 0\n    Max = 2147483647\n    -1  = Does not sleep. Script immediately checks message queue.\nEX: Sleep, % 1000 * 60 * 5 ; Using an expression to calculate a 5 minute sleep
Sort, Var, [Options] \nUSE: Arranges the content of Var in Alphabetical, numerical, or random order.\nOPTIONS:\n    N  = Numeric sort           CL = Case insensitive locale\n    R  = Reverse order          dX = Set delimiter to X value\n    C  = Case sensitive         F  = Custom Function. See docs\n    U  = Remove duplicates      pN = Sort by N character position\n    Random = Randomizes list    \\  = Sort after last backslash in Var\n    Z  = Delimiters at end of var infer a blank final entry\nEX: Sort, myList, d| U ; Sort through a pipe delimited list. Remove duplicates.
SoundBeep, [Frequency, Duration] \nUSE: Emits a tone from the PC speaker.\nFREQUENCY: Number. 37 ... 32767.\n    Default = 523\nDURATION: Time in milliseconds\n    Default = 150.\nEX: SoundBeep, 750, 500
SoundGet, OutputVar, [Component, Control, Device] \nUSE: Get various settings from a sound device.\nCOMPONENT: Default = MASTER\n    CD     WAVE     ANALOG       TELEPHONE     MASTER|SPEAKERS\n    N/A    LINE     DIGITAL      HEADPHONES\n    AUX    SYNTH    PCSPEAKER    MICROPHONE\nCONTROL: Default = VOLUME\n    PAN     MONO    ONOFF     LOUDNESS     VOLUME|VOL   BASSBOOST\n    BASS    MUTE    TREBLE    STEREOENH    QSOUNDPAN\nDEVICE: Device number. Default = 1\nERRORLEVEL+EXO: 0 = Success. Failure will result in a string.\nEX: SoundGet, sysVol, MASTER, VOLUME, 2
SoundGetWaveVolume, OutputVar, [Device] \nUSE: Get the wave output volume percentage for a sound device.\nDEVICE: Device number. Defaults to 1.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.\nEX: SoundGetWaveVolume, vol, 2
SoundPlay, Filename, [Wait] \nUSE: Plays a sound, video, or other supported file type.\nFILENAME: Name of file to be played. For a standard system sound, use:\n    *-1 = Simple beep\n    *16 = Hand/stop/error\n    *32 = Question\n    *48 = Exclamation\n    *64 = Asterisk/info\nWAIT:\n    Omit = Immediately go to next line\n    1|WAIT = Wait for file to finish before going to next line\nERRORLEVEL: 0 = Success. 1 = Failure.\nEX: SoundPlay, C:\SoundFile.mp3, 1
SoundSet, Value, [Component, Control, Device] \nUSE: Changes various settings of a sound device.\nVALUE:   N = Set to N percentage\n        +N = Increase volume by N amount\n        -N = Decrease volume by N amount\nCOMPONENT: Default = MASTER\n    CD     WAVE     ANALOG       TELEPHONE     MASTER|SPEAKERS\n    N/A    LINE     DIGITAL      HEADPHONES\n    AUX    SYNTH    PCSPEAKER    MICROPHONE\nCONTROL: Default = VOLUME\n    PAN     MONO    ONOFF     LOUDNESS     VOLUME|VOL   BASSBOOST\n    BASS    MUTE    TREBLE    STEREOENH    QSOUNDPAN\nDEVICE: Device number. Default = 1\nERRORLEVEL+EXO: 0 = Success. Failure will result in a string.\nEX: SoundSet, +50, HEADPHONES, VOLUME, 1
SoundSetWaveVolume, Value, [Device] \nUSE: Change the wave output volume for a sound device.\nVALUE:   N = Set to N percentage\n        +N = Increase volume by N amount\n        -N = Decrease volume by N amount\nDEVICE: Device number. Default = 1\nERRORLEVEL: 0 = success. 1 = failure.\nEX: SoundSetWaveVolume, 100, 2
SplashImage, [Param1, Options, SubText, MainText, WinTitle, FontName] \nUSE: Create, destroy, or update a splash image window.\nPARAM1: File and path = Create new image\n    Show = Show if hidden       Off = Destroy window\nOPTIONS:\n    xN = X coord           hN = N height         fmN = Font size MainText   \n    yN = Y coord           Wn = N width          fsN = Font size SubText\n    zxN = Image X coord    zhN = Image height    wmN = Font weight MainText\n    zyN = Image Y coord    zwN = Image width     wsN = Font weight SubText\n    cbN = Image color      ctN = Text color      cwN = Window color\n    B = Borderless         B1 = Thin border      B2 = Dialog-style border\n    M = Moveable           M1 = +Resizeable      M2 = +MenuBtns   \n    T = Task Button        pN = starting pos     A = Disable always-on-top\n    rN1-N2 = Range N1 to N2                      Hide = Hide initially\n    cSM = Set S (SubText) or M (MainText) text align. 0 = Left. 1 = center.\nEX: SplashImage, C:\Test.jpg, zh60 zw70 h120 w90, Sub, Main, Title
SplashTextOff \nUSE: Destroy an existing splash window.
SplashTextOn, [Width, Height, Title, Text] \nUSE: Creates a customizable Text popup window.\nEX: SplashTextOn, 100, 40, Splash Title, Splash Text
SplitPath, InputVar, [OutName, OutDir, OutExt, OutNameNoExt, OutDrive]\nUSE: Splits a file path or URL into name, directory, extension, and drive.\nOUTNAME: File name with ext             EXT: File's extension type\nNAMENOEXT: File name without ext        OUTDIR: Full directory\nDRIVE: Drive file resides in\nEX: SplitPath, % A_ScriptFullPath, name, dir, ext, nameX, drive\n    MsgBox, % name "`n" dir "`n" ext "`n" nameX "`n" drive
StatusBarGetText, OutputVar, [Part, WinTitle, WinText, NotTitle, NotText] \nUSE: Get text from a standard status bar control.\nPART: Status bar part to get text from.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure + OutputVar = BLANK.\nEX: StatusBarGetText, var, 1, A
StatusBarWait, [Text, SEC, Part, WinTitle, WinText, Check, NotTitle, NotText] \nUSE: Wait until a window's status bar contains the specified Text.\nBARTEXT: Text to look for. Blank by default.\nSEC: Number of seconds to wait before timing out.\nPART: Bar section number to monitor.\nCHECK: How often the bar should be checked. In milliseconds.\nERRORLEVEL+EXO: 0 = Match found.\n            1 = Command timed out.\n            2 = Status bar not accessible.\nEX: StatusBarWait, Line: 1,, 1, a,, 100\n    MsgBox, Found it!
StringCaseSense, State\nUSE: Set string comparison case sensitivity. Default is off.\nSTATE: ON = String comparisons are case sensitive. A = a ; false\n      Off = Case sensitivity is irrelevant. A = a ; true\n   Locale = Case sensitivity is based on user locale.
StringGetPos, OutputVar, InputVar, SearchText, [Occurrence, Offset]\nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: InStr()
StringLeft, OutputVar, InputVar, Count\nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: SubStr()
StringLen, OutputVar, InputVar\nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: StrLen()
StringLower, OutputVar, InputVar, [TitleCase] \nUSE: Converts a string to lowercase.\nTITLECASE: If set to T, Title Case is used.\nEX: StringLower, varLower, var
StringMid, OutputVar, InputVar, StartChar, [Count, L] \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: SubStr()
StringReplace, OutputVar, InputVar, SearchText, [ReplaceText, ReplaceAll?] \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: StrReplace()
StringRight, OutputVar, InputVar, Count \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: SubStr()
StringSplit, OutputArray, InputVar, [Delimiters, OmitChars] \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: StrSplit()
StringTrimLeft, OutputVar, InputVar, Count \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: SubStr()
StringTrimRight, OutputVar, InputVar, Count \nDEPRECATED: This command is not recommended for use in new scripts.\nREPLACEMENT: Use the function: SubStr()
StringUpper, OutputVar, InputVar, [TitleCase] \nUSE: Converts a string to uppercase.\nTITLECASE: If set to T, Title Case is used.\nEX: StringUpper, varUpper, var
Suspend, Mode \nUSE: Disables or enables all or selected hotkeys and hotstrings.\nMODE:\n    On  = Suspends all non-exempt hotkeys and hotstrings\n    Off = Re-enable hotkeys and hotstrings\n    Toggle = Set suspend to opposite of current state\n    Permit = Marks current subroutine exempt from suspend\nREMARK: Hotkeys|Hotstrings that start with Suspend are exempt.
SysGet, OutputVar, SubCommand , Value \nUSE: Get various system metrics. \nSUBCOMMAND:\n    MonitorCount = Get total number of monitors.\n    MonitorPrimary = Get primary monitor number.\n    Monitor = Get coordinates of specified monitor.\n    MonitorWorkArea = Get non-registered coordinates of specified monitor.\n    MonitorName = Get the name of specified monitor.\n    Number = See docs for list of numbers and what they get.
SysGet, OutputVar, MonitorCount \nUSE: Get total number of monitors.
SysGet, OutputVar, MonitorPrimary \nUSE: Get primary monitor number.
SysGet, OutputVar, Monitor, [N] \nUSE: Get coordinates of specified monitor.\nN: Monitor number. Default = Primary monitor\nOUTPUTVAR: 4 variables starting with OutputVar will be made\n    OutputVarLeft|OutputVarRight|OutputVarTop|OutputVarBottom
SysGet, OutputVar, MonitorWorkArea, [N] \nUSE: Get non-registered coordinates of specified monitor.\nN: Monitor number. Default = Primary monitor\nREMARK: A registered area would be like the taskbar.
SysGet, OutputVar, MonitorName, [N] \nUSE: Get the name of specified monitor.\nN: Monitor number. Default = Primary monitor
SysGet, OutputVar, Number \nUSE: See docs for list of all numbers and what they mean.
Thread, SubCommand, [Value1, Value2] \nUSE: Sets the priority or interruptibility of threads.\nSUBCOMMAND:\n    NoTimers  = Prevents timer interruptions.\n    Priority  = Change current thread's priority level.\n    Interrupt = Change newly launched thread's duration of interruptibility.
Thread, NoTimers, True|False\nUSE: Prevents interruptions from any timers.
Thread, Priority, Level\nUSE: Change the priority level of the current thread.\nLEVEL: -2147483648 ... 2147483647\nREMARK: The critical command's ability to buffer events makes it superior.
Thread, Interrupt, [Duration, LineCount]\nUSE: Change uninterruputable status for new threads.\nDURATION: Time in milliseconds before interruptable.\nLINECOUNT: Amount of lines to execute before interruptable.
ToolTip, [Text, X, Y, ID]\nUSE: Creates an always-on-top window anywhere on the screen.\nTEXT: Text to display. BLANK = Hide ToolTip.\nX|Y: Coordinates to display ToolTip. If omitted, ToolTip stays near cursor.\nID: 1-20. Identifies which tooltip to operate on. Default = 1.\nEX: ToolTip, MESSAGE,,,2 ; Sets second tooltip to MESSAGE
Transform, OutputVar, SubCommand, Value1, [Value2]\nUSE: Performs miscellaneous tasks such as ASCII/Unicode conversion.\nSUBCOMMAND:\n    Unicode = Get or set Unicode text on clipboard.\n    Deref = Expands variable references and escape sequences contained inside other variables.\n    HTML = Convert ASCII characters above 127 to their HTML names.
Transform, OutputVar, Unicode, [String]\nUSE: Get or set Unicode text on clipboard.
Transform, OutputVar, Deref, String\nUSE: Expand variable references and escape sequences inside other variables.
Transform, OutputVar, HTML, String, [Flags]\nUSE: Convert the ASCII characters in a String above 127 to their HTML names.\nFLAGS: Sum of the following values. \n    1 = Convert to named expressions. € converts to &euro;\n    2 = Convert to numbered expressions. € converts to &#8364;
TrayTip, [Title, Text, Seconds, Options]\nUSE: Create a balloon message near the tray icon. \nSECONDS: Time before closing. No effect on Vista or later.\nOptions: Default = 0. Otherwise, sum of the following:\n    Function:               Dec:    Hex:\n    Info icon               1       0x1\n    Warning icon            2       0x2\n    Error icon              3       0x3\n    No sound notification   16      0x10\n    Large icon              32      0x20\nREMARK: Windows 10 may show a toast notification instead.\nEX: TrayTip, Time:, %A_Hour%:%A_Min%,,0x1
UrlDownloadToFile, URL, Filename\nUSE: Download a file from the Internet.\nURL: Address to download from.\nFILENAME: Path to save file to.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
WinActivate, [WinTitle, WinText, NotTitle, NotText]\nUSE: Activate a specified window.\nEX: WinActivate, ahk_exe explorer.exe
WinActivateBottom, [WinTitle, WinText, NotTitle, NotText]\nUSE: Activates the bottommost matching window.
WinClose, [WinTitle, WinText, Wait, ExcludeTitle, ExcludeText] \nUSE: Closes the specified window.\nWAIT: Time to wait in seconds.\n    BLANK = No wait\n    0     = 500ms\n    1+    = Number of seconds\nEX: WinClose, ahk_exe notepad.exe
WinGet  \nWinGet, OutputVar, [SubCommand, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Get information about specified window(s) and their controls.\nSUBCOMMAND:\n    ID = Unique ID               ExStyle = Hex extended style\n    PID = Process ID             Count = Total matching windows\n    Style = Hex style            TransColor = Transparency color\n    MinMax = Min/Max state       ProcessPath = Path and EXE name\n    ProcessName = EXE name       Transparent = Transparency level\n    IDLast = Bottom window ID    List = List of IDs for all matching windows\n    ControlList = List of window controls\n    ControlListHwnd = List of window contorl handles
WinGet, OutputVar, ID, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the unique ID|HWND number of the first matching window.
WinGet, OutputVar, IDLast, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the unique ID|HWND number of the bottommost matching window.
WinGet, OutputVar, PID, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the process ID of the first matching window.
WinGet, OutputVar, ProcessName, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the name of the process|EXE that owns a window.
WinGet, OutputVar, ProcessPath , WinTitle, WinText, NotTitle, NotText\nUSE: Get the full path and name of the process|EXE that owns a window.
WinGet, OutputVar, Count, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the total number of exising windows that match.
WinGet, OutputVar, List, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the unique ID|HWND of all matching windows.\nREMARK: Omitting all for parameters will get all windows
WinGet, OutputVar, MinMax, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the min|max state of a window.\nOUTPUTVAR: \n    BLANK = No matching window exists\n        0 = Not minimized. Not maximized.\n        1 = Maximized\n       -1 = Minimized
WinGet, OutputVar, ControlList, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the control name of all window controls.\nOUTPUTVAR: A linefeed delimited list of each control ClassNN.\n    BLANK = No controls
WinGet, OutputVar, ControlListHwnd, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get the unique ID|HWND for each control in a window.\nOUTPUTVAR: A linefeed delimited list of each unique ID|HWND.\n    BLANK = No controls
WinGet, OutputVar, Transparent, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get a window's degree of transparency.\nOUTPUTVAR: BLANK = Not found. 0 ... 255 = Transparency level
WinGet, OutputVar, TransColor, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get a window's marked transparency color.\nOUTPUTVAR: BLANK = Not vound. Otherwise a 6 digit hex color.
WinGet, OutputVar, Style, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get widnow's 8 digit hexidecimal style number.\nOUTPUTVAR: BLANK = No matching windows.
WinGet, OutputVar, ExStyle, [WinTitle, WinText, NotTitle, NotText]\nUSE: Get widnow's 8 digit hexidecimal extended style number.\nOUTPUTVAR: BLANK = No matching windows.
WinGetActiveStats, Title, Width, Height, X, Y\nUSE: Get title, size, and position of active window.
WinGetActiveTitle, OutputVar\nUSE: Get title of active window.\nREMARK: Same as using WinGetTitle
WinGetClass, OutputVar, [WinTitle, WinText, ExcludeTitle, ExcludeText]\nUSE: Get the class name of the specified window.
WinGetPos, [X, Y, Width, Height, WinTitle, WinText, ExcludeTitle, ExcludeText]\nUSE: Get the size and position of a window.\nWINTITLE: To get desktop size, use: Program Manager
WinGetText, OutputVar, [WinTitle, WinText, ExcludeTitle, ExcludeText]\nUSE: Get text from the specified window.\nERRORLEVEL+EXO: 0 = Success. 1 = Failure.
WinGetTitle, OutputVar, WinTitle, WinText, ExcludeTitle, ExcludeText\nUSE: Get the title of the specified window.
WinHide, [WinTitle, WinText, ExcludeTitle, ExcludeText]\nUSE: Hide the specified window.
WinKill, [WinTitle, WinText, Wait, ExcludeTitle, ExcludeText]\nUSE: Forces the specified window to close.\nWAIT: Time in seconds to wait before timing out.\n    BLANK = No wait\n        0 = 500ms\n       1+ = Number of seconds to wait
WinMaximize, [WinTitle, WinText, ExcludeTitle, ExcludeText]\nUSE: Resizes specified window to maximum size.
WinMenuSelectItem, WinTitle, WinText, Menu, [SubMenu1, ..., SubMenu6, ExcludeTitle, ExcludeText]\nUSE: Select a menu item from the specified window's menu bar.\nMENU: Top-level menu item name. Ex: File\n    Or Top-level menu item position. Ex: 1&\nMENU: Item|submenu item name. Ex: Recent\n    Or item|submenu item position. Ex: 4&\nREMARK: Use 0& to access window's system menu.\nERRORLEVEL: 0 = Success. 1 = Failure.\nEX: WinMenuSelectItem, Untitled - Notepad, , File, Open
WinMinimize , WinTitle, WinText, ExcludeTitle, ExcludeText\nUSE: Collapses specified window to task bar|SysTray.
WinMinimizeAll \nUSE: Collapse all windows to task bar|SysTray.
WinMinimizeAllUndo \nUSE: Restores all previously minimzed windows.
WinMove, WinTitle, [WinText], X, Y, [Width, Height, ExcludeTitle, ExcludeText]\nWinMove, X, Y\nUSE: Changes the position and/or size of the specified window.\nREMARK: If X and Y are the only params, LastFoundWindow is used.\nX|Y: Position window X|Y pixels from the screen's upper left corner.\nWIDTH|HEIGHT: Size of window in Width|Height pixels.
WinRestore, [WinTitle, WinText, ExcludeTitle, ExcludeText]\nUSE: Returns window to it's original position and size.\nREMARK: If WinTitle is omitted, LastFoundWindow is used.
WinSet, SubCommand, Value , WinTitle, WinText, ExcludeTitle, ExcludeText\nUSE: Makes a variety of changes to the specified window.\nSUBCOMMAND:\n    AlwaysOnTop = Window stays above all other windows.\n    Bottom|Top = Send window to bottom|top of stack. No activation.\n    Disable|Enable|Redraw = Disables|Enables|Redraws the window.\n    Style|ExStyle = Changes window's style|extended style.\n    Region = Change the shape and amount of a window that is shown.\n    Transparent = Set window transparency level.\n    TransColor = Set color that will be inisible inside target window.
WinSet, AlwaysOnTop|Topmost, [State, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Forces a window to stay on top of all other windows.\nSTATE: On|Off|Toggle
WinSet, Bottom, [, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Send a window to the bottom of the window stack.
WinSet, Top, [, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Bring a window to the top of the window stack without activating it.
WinSet, Disable, [, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Disable a window.
WinSet, Enable, [, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Enables a window.
WinSet, Redraw, [, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Redraws a window.
WinSet, Style, N, [WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Change the style of a window.\nN: A hex style.\n    +|- prefix will add|remove N from current style.\n    ^ prefix will toggle N from current style.\n    Not specifying a prefix will set style equal to N\nERRORLEVEL: 0 = Success. 1 = Failure.
WinSet, ExStyle, N, [WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Change the extended style of a window.\nN: A hex style.\n    +|- prefix will add|remove N from current style.\n    ^ prefix will toggle N from current style.\n    Not specifying a prefix will set style equal to N
WinSet, Region, [Options, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Change the shape of a window to be the specified rectangle, ellipse, or polygon.\nOPTIONS:\n    wN = Width     e = Ellipse              BLANK = Restor to original\n    hN = Height    X-Y = Coordinate pair\n    rN1-N2 = Rectangle corners rounded using ellipses\n        N1 = Ellipse width. N2 = Ellipse height. \n    Polygon = Omit W and H. Us multipl X-Y pairs.\n    Wind = Force polygon to us winding method.\nERRORLEVEL: 0 = Success. 1 = Failure.
WinSet, Transparent, [N, WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Make a window semi-transparent.\nN: Transparency. 0 ... 255. OFF = Disable transparency.
WinSet, TransColor, Color[Alpha], [WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Set transparency level for chosen Color.\nCOLOR: RGB hex color or color name. Off = Disable transparnecy.\nALPHA: Set the alpha for a color. 0 ... 255\nCHEAT: See Cheat_HTML_Color_Names
WinSetTitle, WinTitle, WinText, NewTitle, [ExcludeTitle, ExcludeText] \nWinSetTitle, NewTitle\nUSE: Changes the title of the specified window.\nREMARK: If NewTitle is the only parameter, LastFoundWindow is used.
WinShow, [WinTitle, WinText, ExcludeTitle, ExcludeText] \nUSE: Unhide the specified window.
WinWait, [WinTitle, WinText, Wait, ExcludeTitle, ExcludeText] \nUSE: Waits until the specified window exists.\nWAIT: Time to wait in seconds.\n    BLANK = No wait\n    0     = 500ms\n    1+    = Number of seconds\nERRORLEVEL: 0 = Success. 1 = Timed out.
WinWaitActive, [WinTitle, WinText, Wait, ExcludeTitle, ExcludeText] \nUSE: Waits until the specified window is active.\nWAIT: Time to wait in seconds.\n    BLANK = No wait\n    0     = 500ms\n    1+    = Number of seconds\nERRORLEVEL: 0 = Success. 1 = Timed out.
WinWaitClose, [WinTitle, WinText, Wait, ExcludeTitle, ExcludeText] \nUSE: Wait until the specified window does not exist.\nWAIT: Time to wait in seconds.\n    BLANK = No wait\n    0     = 500ms\n    1+    = Number of seconds\nERRORLEVEL: 0 = Success. 1 = Timed out.
WinWaitNotActive, [WinTitle, WinText, Wait, ExcludeTitle, ExcludeText] \nUSE: Waits until the specified window is not active.\nWAIT: Time to wait in seconds.\n    BLANK = No wait\n    0     = 500ms\n    1+    = Number of seconds\nERRORLEVEL: 0 = Success. 1 = Timed out.

/* OBJECT_METHODS */
.Clone() \nUSE: Built-in method to create a shallow copy of an object.\nRETURN: Object. Shallow copy.
.Count() \nUSE: Built-in method to get total number of key-value pairs in an object.\nReturn: Number of key-value pairs.
.Delete(Key) \n.Delete(StartKey,EndKey) \nUSE: Built-in method to delete a key|range of keys from an object.\nKEY: Specific key to delete.\nSTARTKEY|ENDKEY: Key range (inclusive) to delete.\nRETURN: 1+ = Number of pairs removed. BLANK = None.
.GetAddress(Key) \nUSE: Built-in method for getting address of field's string buffer.\nRETURN: Address number.
.GetCapacity() \n.GetCapacity(Key) \nUSE: Built-in method to get the capactiy or an object|field.\nRETURN: Object's max size or field's capacity in bytes.
.HasKey(Key) \nUSE: Built-in method to check if key is present in object.\nRETURN: True = Key is present. False = Key does not exist.
.Insert(Pos, Value1, [Value2, ..., ValueN]) \n.Insert(Value) \n.Insert(StringOrObjectKey, Value) \nDEPRECATED: Insert is not recommended for use in new scripts.\nREPLACEMENT: Use the method: .InsertAt()
.InsertAt(Index, [Value1 , Value2, ... ValueN])\nUSE: Built-in method to insert one or more values at array Index.\nINDEX: Array position to insert values.
.Length() \nUSE: Built-in method for getting highest positive integer key.
.MaxIndex() \nUSE: Built-in method to get highest integer key from a linear array.
.MinIndex() \nUSE: Built-in method to get lowest integer key from a linear array.
._NewEnum() \nUSE: Built-in method to enumerate an object's key-value pairs.\nREMARK: This method is usually not called directly
.Pop() \nUSE: Built-in method to remove the highest integer element of an array.\nRETURN: Element removed. Otherwise return empty string.
.Push(Value)\nUSE: Built-in method to add new element to "end" of array.\nRETURN:Index of last inserted value.
.Remove(FirstKey, LastKey)\nDEPRECATED: Insert is not recommended for use in new scripts.\nREPLACEMENT: Use the method: .RemoveAt()
.RemoveAt(Index, [Length])\nUSE: Built-in method to remove one or more items from an array.\nINDEX: The key to start removing items at.\nLENGTH: Number of items to remove.\nRETURN: If no length, return value of removed Index.\n    If length, return number of removed items.
.SetCapacity(MaxItems)\n.SetCapacity(Key, ByteSize)\nUSE: Built-in method to adjust capcity of an object or field.\nMAXITEMS: Set arrays maximum size.\nKEY: Any key.\nBYTESIZE: Size in bytes to make Key.\nRETURN: New capacity if successful. Empty string if failed.

/* CLASS_METHODS */
.__Call() \nUSE: Set the default class method to run when a called class method doesn't exist.
.__Class() \nUSE: Built-in class method that returns the name of the class.
.__Delete() \nUSE: Built-in class method that is called when a class is destroyed.
.__Get() \nUSE: Set the default class method to run when getting a class key that doesn't exist.
.__New() \nUSE: Built-in class method that is called when a class is created using New.
.__Set() \nUSE: Set the default method to run when setting a class key that doesn't exist.

/* OTHER_KEYWORDS */
__Handle
Abort
AboveNormal
ActiveX
Add
ahk2exe
ahk_class
ahk_default \nUsed with regdelete
ahk_exe
ahk_group
ahk_id
ahk_pid
All
alnum
alpha
alt
AltSubmit
AltTab
AltTabAndMenu
AltTabMenuDismiss
AlwaysOff
AlwaysOn
AlwaysOnTop
ANALOG
AND
appskey
Aqua
AStr
AtEOF
Auto
AutoHdr
AutoSize
AUX
Background
BackgroundTrans
backspace
BarBreak
BASS
BASSBOOST
BelowNormal
between
Bind
Black
Blue
Bold
Border
Bottom
break
browser_back
browser_favorites
browser_forward
browser_home
browser_refresh
browser_search
browser_stop
bs
Buddy
Button
Buttons
ByRef
Call
Cancel
Capacity
capslock
Caption
Caret
Case
CaseLocale
CD
CDecl
Center
Char
Check
Check3
Checkbox
Checked
CheckedGray
Choice
Choose
ChooseString
ClassOverwrite
Click
Client
Close
Col
ColClick
Color
Column Options
Com
ComboBox
Comment
Comments
contains
Continue
control
ControlList
ControlListHwnd
Count
CSV
ctrl
ctrlbreak
CurrentCol
CurrentLine
DateTime
Days
DDL
Debug
Default
del
Delete
DeleteAll
Delimiter
Deref
Desc
Destroy
digit
DIGITAL
Disable
Disabled
Double
DoubleClick
Down
DownR
DownTemp
DPIScale
DropDownList
Edit
EditPaste
Eject
Enable
Enabled
Encoding
end
EndChars
enter
EQUALIZER
ErrorStdOut
esc
escape
Event
Exist
Expand
ExStyle
extends
Extra
f1
f10
f11
f12
f13
f14
f15
f16
f17
f18
f19
f2
f20
f21
f22
f23
f24
f3
f4
f5
f6
f7
f8
f9
Fast
File
FileSystem
FindString
First
Flash
float
Focus
Focused
Font
Force
Fuchsia
Global
Gray
Green
Grid
Group
GroupBox
GuiClose
GuiContextMenu
GuiDropFiles
GuiEscape
GuiSize
Hdr
HEADPHONES
help
Hidden
Hide
HideDropDown
High
HKCC
HKCR
HKCU
HKEY_CLASSES_ROOT
HKEY_CURRENT_CONFIG
HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE
HKEY_USERS
HKLM
HKU
home
Horz
Hotkey
Hours
HScroll
HTML
Hwnd
HwndOutputVar
Icon
IconRight
IconSmall
ID
IDLast
Ignore
iLib
ImageList
ImageListID
in
Input
InputThenPlay
ins
insert
Int
Int64
integer
Interrupt
Invert
is
IsBuiltIn
IsByRef
IsOptional
IsVariadic
Italic
Join
joy1
joy10
joy11
joy12
joy13
joy14
joy15
joy16
joy17
joy18
joy19
joy2
joy20
joy21
joy22
joy23
joy24
joy25
joy26
joy27
joy28
joy29
joy3
joy30
joy31
joy32
joy4
joy5
joy6
joy7
joy8
joy9
joyaxes
joybuttons
joyinfo
joyname
joypov
joyr
joyu
joyv
joyx
joyy
joyz
lalt
LastFound
LastFoundExist
LastFoundWindow \n A hidden variable that tracks the last window found by:\nWinActive(), WinExist(), or the IfWin variants.
launch_app1
launch_app2
launch_mail
launch_media
lbutton
lcontrol
lctrl
Left
Length
Lime
Limit
Line
LineCount
Lines
Link
List
ListBox
ListView
Local
Locale
LocalSameAsGlobal
Lock
Logical
LongDate
LOUDNESS
Low
lower
Lowercase
lshift
LTrim
lwin
MainWindow
Margin
Maroon
MASTER
Max
Maximize
MaximizeBox
MaxParams
MaxSize
mbutton
media_next
media_play_pause
media_prev
media_stop
Menu
Message
MICROPHONE
Middle
Min
Minimize
MinimizeBox
MinMax
MinParams
MinSize
Minutes
Monitor
MonitorCount
MonitorName
MonitorPrimary
MonitorWorkArea
MONO
MonthCal
Mouse
MouseMove
MouseMoveOff
Move
MoveDraw
Multi
MUTE
N/A
NA
Navy
New
No
NoActivate
NoDefault
NoHide
NoIcon
NoMainWindow
NoMouse
Norm
Normal
NoSort
NoSortHdr
NoStandard
NOT
NoTicks
NoTimers
number
numlock
numpad0
numpad1
numpad2
numpad3
numpad4
numpad5
numpad6
numpad7
numpad8
numpad9
numpadadd
numpadclear
numpaddel
numpaddiv
numpaddot
numpaddown
numpadend
numpadenter
numpadhome
numpadins
numpadleft
numpadmult
numpadpgdn
numpadpgup
numpadright
numpadsub
numpadup
Off
OK
Olive
On
ONOFF
Options
OR
OutputDebug
OwnDialogs
Owner
Page
PAN
Parent
Password
pause
PCSPEAKER
Permit
pgdn
pgup
Pic
Picture
PID
Pixel
Play
Pos
printscreen
Priority
ProcessName
ProcessPath
Progress
Ptr
Purple
QSOUNDPAN
Radio
ralt
Range
RawRead
RawWrite
rbutton
rcontrol
rctrl
Read
ReadLine
ReadNumType
ReadOnly
Realtime
Red
Redraw
REG_BINARY
REG_DWORD
REG_EXPAND_SZ
REG_MULTI_SZ
REG_SZ
RegEx
Region
Rel
Relative
Rename
Report
Resize
Restart
Restore
Retry
return
RGB
Right
RightBottom
RightClick
rshift
RTrim
Rtrim0
rwin
sc
scancode
Screen
scrolllock
Seconds
Section
Seek
Select
Selected
SendAndMouse
Serial
shift
ShiftAltTab
Short
Show
ShowDropDown
Silver
sleep
Slider
Slow
Smooth
Sort
SortDesc
space
Standard
Static
Status
StatusBar
StatusCD
StdOut
STEREOENH
Str
Strike
Style
Submit
SYNTH
SysMenu
Tab
Tab2
Tab3
TabLeft
TabRight
Tabstop
Teal
TELEPHONE
Tell
Text
Theme
Thick
this
TickInterval
Tile
time
Timeout
Tip
ToggleCheck
ToggleEnable
ToolTip
ToolWindow
Top
TransColor
Transparent
Tray
TREBLE
TreeView
TryAgain
Type
UChar
UInt
Uncheck
Underline
Uni
Unicode
Unlock
Up
UpDown
upper
Uppercase
UPtr
UseEnv
UseErrorLevel
UseUnsetGlobal
UseUnsetLocal
UShort
UTF-16
UTF-16-RAW
UTF-8
UTF-8-RAW
Vertical
virtualkey
Vis
VisFirst
Visible
vk
VOL
VOLUME
volume_down
volume_mute
volume_up
VScroll
VT_ARRAY
VT_BOOL
VT_BSTR
VT_BYREF
VT_CY
VT_DATE
VT_DECIMAL
VT_DISPATCH
VT_EMPTY
VT_ERROR
VT_I1
VT_I2
VT_I4
VT_I8
VT_INT
VT_NULL
VT_R4
VT_R8
VT_RECORD
VT_UI1
VT_UI2
VT_UI4
VT_UI8
VT_UINT
VT_UNKNOWN
VT_VARIANT
Wait
WaitClose
WantCtrlA
WantF2
WantReturn
WantTab
WAVE
WD
What
wheel
WheelDown
WheelLeft
WheelRight
WheelUp
White
Window
WL
WR
Wrap
Write
WriteLine
WriteNumType
WStr
WU
X1
X2
xbutton1
xbutton2
xdigit
xm
xp
xs
Yellow
Yes
ym
yp
ys
{Blind}
{Raw}
{Text}
